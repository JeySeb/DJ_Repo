
SemiReal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  0800c690  0800c690  0001c690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd2c  0800cd2c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd2c  0800cd2c  0001cd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd34  0800cd34  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cd34  0800cd34  0001cd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd3c  0800cd3c  0001cd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bdc  200001e0  0800cf20  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  0800cf20  00020dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e27d  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000375a  00000000  00000000  0003e48d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001578  00000000  00000000  00041be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001458  00000000  00000000  00043160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc71  00000000  00000000  000445b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a6e  00000000  00000000  00070229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc6d2  00000000  00000000  00089c97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00186369  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007104  00000000  00000000  001863bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c674 	.word	0x0800c674

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c674 	.word	0x0800c674

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_Z23read_calliberation_datav>:
#define atmPress 102800 //Pa



void read_calliberation_data (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fa4:	23aa      	movs	r3, #170	; 0xaa
 8000fa6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa8:	8afa      	ldrh	r2, [r7, #22]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2316      	movs	r3, #22
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	21ee      	movs	r1, #238	; 0xee
 8000fbc:	4836      	ldr	r0, [pc, #216]	; (8001098 <_Z23read_calliberation_datav+0x10c>)
 8000fbe:	f003 ff61 	bl	8004e84 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fc2:	783b      	ldrb	r3, [r7, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <_Z23read_calliberation_datav+0x110>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <_Z23read_calliberation_datav+0x114>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <_Z23read_calliberation_datav+0x118>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <_Z23read_calliberation_datav+0x11c>)
 800100a:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800100c:	7a3b      	ldrb	r3, [r7, #8]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7a7b      	ldrb	r3, [r7, #9]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <_Z23read_calliberation_datav+0x120>)
 800101e:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001020:	7abb      	ldrb	r3, [r7, #10]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <_Z23read_calliberation_datav+0x124>)
 8001032:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <_Z23read_calliberation_datav+0x128>)
 8001044:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <_Z23read_calliberation_datav+0x12c>)
 8001056:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7c7b      	ldrb	r3, [r7, #17]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_Z23read_calliberation_datav+0x130>)
 8001068:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800106a:	7cbb      	ldrb	r3, [r7, #18]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_Z23read_calliberation_datav+0x134>)
 800107a:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7d7b      	ldrb	r3, [r7, #21]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <_Z23read_calliberation_datav+0x138>)
 800108c:	801a      	strh	r2, [r3, #0]

}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000244 	.word	0x20000244
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	200001fe 	.word	0x200001fe
 80010a4:	20000200 	.word	0x20000200
 80010a8:	20000202 	.word	0x20000202
 80010ac:	20000204 	.word	0x20000204
 80010b0:	20000206 	.word	0x20000206
 80010b4:	20000208 	.word	0x20000208
 80010b8:	2000020a 	.word	0x2000020a
 80010bc:	2000020c 	.word	0x2000020c
 80010c0:	2000020e 	.word	0x2000020e
 80010c4:	20000210 	.word	0x20000210

080010c8 <_Z9Get_UTempv>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010ce:	232e      	movs	r3, #46	; 0x2e
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010d2:	2300      	movs	r3, #0
 80010d4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	22f4      	movs	r2, #244	; 0xf4
 80010e8:	21ee      	movs	r1, #238	; 0xee
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <_Z9Get_UTempv+0x60>)
 80010ec:	f003 fdb6 	bl	8004c5c <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010f0:	2005      	movs	r0, #5
 80010f2:	f002 ffb3 	bl	800405c <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2302      	movs	r3, #2
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	22f6      	movs	r2, #246	; 0xf6
 8001108:	21ee      	movs	r1, #238	; 0xee
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <_Z9Get_UTempv+0x60>)
 800110c:	f003 feba 	bl	8004e84 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b29a      	uxth	r2, r3
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b29b      	uxth	r3, r3
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000244 	.word	0x20000244

0800112c <_Z14BMP180_GetTempv>:

float BMP180_GetTemp (void)
{
 800112c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001130:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001132:	f7ff ffc9 	bl	80010c8 <_Z9Get_UTempv>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <_Z14BMP180_GetTempv+0x138>)
 800113c:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <_Z14BMP180_GetTempv+0x138>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a49      	ldr	r2, [pc, #292]	; (8001268 <_Z14BMP180_GetTempv+0x13c>)
 8001144:	8812      	ldrh	r2, [r2, #0]
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <_Z14BMP180_GetTempv+0x140>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9e4 	bl	8000524 <__aeabi_i2d>
 800115c:	4680      	mov	r8, r0
 800115e:	4689      	mov	r9, r1
 8001160:	210f      	movs	r1, #15
 8001162:	2002      	movs	r0, #2
 8001164:	f000 fbc0 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fb6c 	bl	800084c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa3c 	bl	80005f8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fce6 	bl	8000b58 <__aeabi_d2iz>
 800118c:	4603      	mov	r3, r0
 800118e:	4a38      	ldr	r2, [pc, #224]	; (8001270 <_Z14BMP180_GetTempv+0x144>)
 8001190:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <_Z14BMP180_GetTempv+0x148>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9c3 	bl	8000524 <__aeabi_i2d>
 800119e:	4604      	mov	r4, r0
 80011a0:	460d      	mov	r5, r1
 80011a2:	210b      	movs	r1, #11
 80011a4:	2002      	movs	r0, #2
 80011a6:	f000 fb9f 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff fa21 	bl	80005f8 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4614      	mov	r4, r2
 80011bc:	461d      	mov	r5, r3
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <_Z14BMP180_GetTempv+0x14c>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <_Z14BMP180_GetTempv+0x144>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9a9 	bl	8000524 <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff fb37 	bl	800084c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fcb7 	bl	8000b58 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <_Z14BMP180_GetTempv+0x150>)
 80011ee:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <_Z14BMP180_GetTempv+0x144>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <_Z14BMP180_GetTempv+0x150>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <_Z14BMP180_GetTempv+0x154>)
 80011fc:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <_Z14BMP180_GetTempv+0x154>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f98d 	bl	8000524 <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	2104      	movs	r1, #4
 8001210:	2002      	movs	r0, #2
 8001212:	f000 fb69 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001216:	ec53 2b10 	vmov	r2, r3, d0
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff fb15 	bl	800084c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fc95 	bl	8000b58 <__aeabi_d2iz>
 800122e:	4603      	mov	r3, r0
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_Z14BMP180_GetTempv+0x158>)
 8001232:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_Z14BMP180_GetTempv+0x158>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_Z14BMP180_GetTempv+0x15c>)
 8001244:	f7ff fb02 	bl	800084c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcca 	bl	8000be8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	ee07 3a90 	vmov	s15, r3
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001262:	bf00      	nop
 8001264:	20000214 	.word	0x20000214
 8001268:	20000206 	.word	0x20000206
 800126c:	20000204 	.word	0x20000204
 8001270:	2000021c 	.word	0x2000021c
 8001274:	2000020e 	.word	0x2000020e
 8001278:	20000210 	.word	0x20000210
 800127c:	20000220 	.word	0x20000220
 8001280:	2000022c 	.word	0x2000022c
 8001284:	20000240 	.word	0x20000240
 8001288:	40240000 	.word	0x40240000

0800128c <_Z10Get_UPressi>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	b2db      	uxtb	r3, r3
 800129c:	3334      	adds	r3, #52	; 0x34
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <_Z10Get_UPressi+0xb4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	81bb      	strh	r3, [r7, #12]
 80012a8:	2300      	movs	r3, #0
 80012aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	22f4      	movs	r2, #244	; 0xf4
 80012c0:	21ee      	movs	r1, #238	; 0xee
 80012c2:	4820      	ldr	r0, [pc, #128]	; (8001344 <_Z10Get_UPressi+0xb8>)
 80012c4:	f003 fcca 	bl	8004c5c <HAL_I2C_Mem_Write>
	switch (oss)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d81a      	bhi.n	8001304 <_Z10Get_UPressi+0x78>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <_Z10Get_UPressi+0x48>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	080012fd 	.word	0x080012fd
	{
		case (0):
			HAL_Delay (5);
 80012e4:	2005      	movs	r0, #5
 80012e6:	f002 feb9 	bl	800405c <HAL_Delay>
			break;
 80012ea:	e00b      	b.n	8001304 <_Z10Get_UPressi+0x78>
		case (1):
			HAL_Delay (8);
 80012ec:	2008      	movs	r0, #8
 80012ee:	f002 feb5 	bl	800405c <HAL_Delay>
			break;
 80012f2:	e007      	b.n	8001304 <_Z10Get_UPressi+0x78>
		case (2):
			HAL_Delay (14);
 80012f4:	200e      	movs	r0, #14
 80012f6:	f002 feb1 	bl	800405c <HAL_Delay>
			break;
 80012fa:	e003      	b.n	8001304 <_Z10Get_UPressi+0x78>
		case (3):
			HAL_Delay (26);
 80012fc:	201a      	movs	r0, #26
 80012fe:	f002 fead 	bl	800405c <HAL_Delay>
			break;
 8001302:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2303      	movs	r3, #3
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f6      	movs	r2, #246	; 0xf6
 8001318:	21ee      	movs	r1, #238	; 0xee
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <_Z10Get_UPressi+0xb8>)
 800131c:	f003 fdb2 	bl	8004e84 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4413      	add	r3, r2
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	441a      	add	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f1c3 0308 	rsb	r3, r3, #8
 8001334:	fa42 f303 	asr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0800c690 	.word	0x0800c690
 8001344:	20000244 	.word	0x20000244

08001348 <_Z15BMP180_GetPressi>:


float BMP180_GetPress (int oss)
{
 8001348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff9a 	bl	800128c <_Z10Get_UPressi>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4bc8      	ldr	r3, [pc, #800]	; (8001680 <_Z15BMP180_GetPressi+0x338>)
 800135e:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001360:	4bc8      	ldr	r3, [pc, #800]	; (8001684 <_Z15BMP180_GetPressi+0x33c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4ac8      	ldr	r2, [pc, #800]	; (8001688 <_Z15BMP180_GetPressi+0x340>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8da 	bl	8000524 <__aeabi_i2d>
 8001370:	4604      	mov	r4, r0
 8001372:	460d      	mov	r5, r1
 8001374:	4bc5      	ldr	r3, [pc, #788]	; (800168c <_Z15BMP180_GetPressi+0x344>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8d3 	bl	8000524 <__aeabi_i2d>
 800137e:	4680      	mov	r8, r0
 8001380:	4689      	mov	r9, r1
 8001382:	210f      	movs	r1, #15
 8001384:	2002      	movs	r0, #2
 8001386:	f000 faaf 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800138a:	ec53 2b10 	vmov	r2, r3, d0
 800138e:	4640      	mov	r0, r8
 8001390:	4649      	mov	r1, r9
 8001392:	f7ff fa5b 	bl	800084c <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fbd5 	bl	8000b58 <__aeabi_d2iz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4ab7      	ldr	r2, [pc, #732]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80013b2:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013b4:	4bb7      	ldr	r3, [pc, #732]	; (8001694 <_Z15BMP180_GetPressi+0x34c>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8b2 	bl	8000524 <__aeabi_i2d>
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
 80013c4:	210b      	movs	r1, #11
 80013c6:	2002      	movs	r0, #2
 80013c8:	f000 fa8e 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013cc:	ec53 2b10 	vmov	r2, r3, d0
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7ff f910 	bl	80005f8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	4bad      	ldr	r3, [pc, #692]	; (8001698 <_Z15BMP180_GetPressi+0x350>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4ba9      	ldr	r3, [pc, #676]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f898 	bl	8000524 <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7ff fa26 	bl	800084c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fba6 	bl	8000b58 <__aeabi_d2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	4aa3      	ldr	r2, [pc, #652]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 8001410:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001412:	4b9f      	ldr	r3, [pc, #636]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4ba1      	ldr	r3, [pc, #644]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4aa0      	ldr	r2, [pc, #640]	; (80016a0 <_Z15BMP180_GetPressi+0x358>)
 800141e:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001420:	4b9f      	ldr	r3, [pc, #636]	; (80016a0 <_Z15BMP180_GetPressi+0x358>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001428:	4a9e      	ldr	r2, [pc, #632]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 800142a:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800142c:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <_Z15BMP180_GetPressi+0x360>)
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f876 	bl	8000524 <__aeabi_i2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a98      	ldr	r2, [pc, #608]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	4680      	mov	r8, r0
 8001450:	4689      	mov	r9, r1
 8001452:	210c      	movs	r1, #12
 8001454:	2002      	movs	r0, #2
 8001456:	f000 fa47 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800145a:	ec53 2b10 	vmov	r2, r3, d0
 800145e:	4640      	mov	r0, r8
 8001460:	4649      	mov	r1, r9
 8001462:	f7ff f9f3 	bl	800084c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7ff f8c3 	bl	80005f8 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4614      	mov	r4, r2
 8001478:	461d      	mov	r5, r3
 800147a:	210b      	movs	r1, #11
 800147c:	2002      	movs	r0, #2
 800147e:	f000 fa33 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001482:	ec53 2b10 	vmov	r2, r3, d0
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7ff f9df 	bl	800084c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb5f 	bl	8000b58 <__aeabi_d2iz>
 800149a:	4603      	mov	r3, r0
 800149c:	4a7c      	ldr	r2, [pc, #496]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 800149e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014a0:	4b82      	ldr	r3, [pc, #520]	; (80016ac <_Z15BMP180_GetPressi+0x364>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f837 	bl	8000524 <__aeabi_i2d>
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	210b      	movs	r1, #11
 80014bc:	2002      	movs	r0, #2
 80014be:	f000 fa13 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014c2:	ec53 2b10 	vmov	r2, r3, d0
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f9bf 	bl	800084c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb3f 	bl	8000b58 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a6f      	ldr	r2, [pc, #444]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80014de:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b6d      	ldr	r3, [pc, #436]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 80014ec:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014ee:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <_Z15BMP180_GetPressi+0x36c>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	009a      	lsls	r2, r3, #2
 80014f6:	4b6e      	ldr	r3, [pc, #440]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	441a      	add	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	3302      	adds	r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <_Z15BMP180_GetPressi+0x1c2>
 8001508:	3303      	adds	r3, #3
 800150a:	109b      	asrs	r3, r3, #2
 800150c:	461a      	mov	r2, r3
 800150e:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <_Z15BMP180_GetPressi+0x370>)
 8001510:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <_Z15BMP180_GetPressi+0x374>)
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	461a      	mov	r2, r3
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fffe 	bl	8000524 <__aeabi_i2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	210d      	movs	r1, #13
 800152e:	2002      	movs	r0, #2
 8001530:	f000 f9da 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001534:	ec53 2b10 	vmov	r2, r3, d0
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff f986 	bl	800084c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb06 	bl	8000b58 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	4a50      	ldr	r2, [pc, #320]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 8001550:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <_Z15BMP180_GetPressi+0x378>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffe3 	bl	8000524 <__aeabi_i2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffd8 	bl	8000524 <__aeabi_i2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
 8001578:	210c      	movs	r1, #12
 800157a:	2002      	movs	r0, #2
 800157c:	f000 f9b4 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	ec53 2b10 	vmov	r2, r3, d0
 8001584:	4640      	mov	r0, r8
 8001586:	4649      	mov	r1, r9
 8001588:	f7ff f960 	bl	800084c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff f830 	bl	80005f8 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4614      	mov	r4, r2
 800159e:	461d      	mov	r5, r3
 80015a0:	2110      	movs	r1, #16
 80015a2:	2002      	movs	r0, #2
 80015a4:	f000 f9a0 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015a8:	ec53 2b10 	vmov	r2, r3, d0
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7ff f94c 	bl	800084c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff facc 	bl	8000b58 <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80015c4:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	3302      	adds	r3, #2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffa6 	bl	8000524 <__aeabi_i2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	2102      	movs	r1, #2
 80015de:	2002      	movs	r0, #2
 80015e0:	f000 f982 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015e4:	ec53 2b10 	vmov	r2, r3, d0
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f92e 	bl	800084c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff faae 	bl	8000b58 <__aeabi_d2iz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 8001600:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <_Z15BMP180_GetPressi+0x37c>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff75 	bl	8000504 <__aeabi_ui2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	210f      	movs	r1, #15
 8001620:	2002      	movs	r0, #2
 8001622:	f000 f961 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001626:	ec53 2b10 	vmov	r2, r3, d0
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7ff f90d 	bl	800084c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fab5 	bl	8000ba8 <__aeabi_d2uiz>
 800163e:	4603      	mov	r3, r0
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <_Z15BMP180_GetPressi+0x380>)
 8001642:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <_Z15BMP180_GetPressi+0x338>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <_Z15BMP180_GetPressi+0x370>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	fa41 f202 	asr.w	r2, r1, r2
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <_Z15BMP180_GetPressi+0x384>)
 8001660:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <_Z15BMP180_GetPressi+0x384>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db34      	blt.n	80016d4 <_Z15BMP180_GetPressi+0x38c>
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <_Z15BMP180_GetPressi+0x384>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	005a      	lsls	r2, r3, #1
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_Z15BMP180_GetPressi+0x380>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	461a      	mov	r2, r3
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_Z15BMP180_GetPressi+0x388>)
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e033      	b.n	80016e8 <_Z15BMP180_GetPressi+0x3a0>
 8001680:	20000218 	.word	0x20000218
 8001684:	20000214 	.word	0x20000214
 8001688:	20000206 	.word	0x20000206
 800168c:	20000204 	.word	0x20000204
 8001690:	2000021c 	.word	0x2000021c
 8001694:	2000020e 	.word	0x2000020e
 8001698:	20000210 	.word	0x20000210
 800169c:	20000220 	.word	0x20000220
 80016a0:	2000022c 	.word	0x2000022c
 80016a4:	20000234 	.word	0x20000234
 80016a8:	2000020a 	.word	0x2000020a
 80016ac:	200001fe 	.word	0x200001fe
 80016b0:	20000224 	.word	0x20000224
 80016b4:	200001fc 	.word	0x200001fc
 80016b8:	20000228 	.word	0x20000228
 80016bc:	20000200 	.word	0x20000200
 80016c0:	20000208 	.word	0x20000208
 80016c4:	20000202 	.word	0x20000202
 80016c8:	20000230 	.word	0x20000230
 80016cc:	20000238 	.word	0x20000238
 80016d0:	2000023c 	.word	0x2000023c
	else Press = (B7/B4)*2;
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <_Z15BMP180_GetPressi+0x4f0>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <_Z15BMP180_GetPressi+0x4f4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 80016e6:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	4604      	mov	r4, r0
 80016f4:	460d      	mov	r5, r1
 80016f6:	2108      	movs	r1, #8
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 f8f5 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016fe:	ec53 2b10 	vmov	r2, r3, d0
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4690      	mov	r8, r2
 8001710:	4699      	mov	r9, r3
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff04 	bl	8000524 <__aeabi_i2d>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	2108      	movs	r1, #8
 8001722:	2002      	movs	r0, #2
 8001724:	f000 f8e0 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001728:	ec53 2b10 	vmov	r2, r3, d0
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7ff f88c 	bl	800084c <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4640      	mov	r0, r8
 800173a:	4649      	mov	r1, r9
 800173c:	f7fe ff5c 	bl	80005f8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa06 	bl	8000b58 <__aeabi_d2iz>
 800174c:	4603      	mov	r3, r0
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 8001750:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f640 32de 	movw	r2, #3038	; 0xbde
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fee0 	bl	8000524 <__aeabi_i2d>
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
 8001768:	2110      	movs	r1, #16
 800176a:	2002      	movs	r0, #2
 800176c:	f000 f8bc 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001770:	ec53 2b10 	vmov	r2, r3, d0
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7ff f868 	bl	800084c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff f9e8 	bl	8000b58 <__aeabi_d2iz>
 8001788:	4603      	mov	r3, r0
 800178a:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 800178c:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <_Z15BMP180_GetPressi+0x500>)
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fec3 	bl	8000524 <__aeabi_i2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
 80017a2:	2110      	movs	r1, #16
 80017a4:	2002      	movs	r0, #2
 80017a6:	f000 f89f 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017aa:	ec53 2b10 	vmov	r2, r3, d0
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7ff f84b 	bl	800084c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9cb 	bl	8000b58 <__aeabi_d2iz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <_Z15BMP180_GetPressi+0x504>)
 80017c6:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fea9 	bl	8000524 <__aeabi_i2d>
 80017d2:	4604      	mov	r4, r0
 80017d4:	460d      	mov	r5, r1
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <_Z15BMP180_GetPressi+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe9d 	bl	8000524 <__aeabi_i2d>
 80017ea:	4680      	mov	r8, r0
 80017ec:	4689      	mov	r9, r1
 80017ee:	2104      	movs	r1, #4
 80017f0:	2002      	movs	r0, #2
 80017f2:	f000 f879 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017f6:	ec53 2b10 	vmov	r2, r3, d0
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7ff f825 	bl	800084c <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fd3f 	bl	800028c <__adddf3>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f99f 	bl	8000b58 <__aeabi_d2iz>
 800181a:	4603      	mov	r3, r0
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 800181e:	6013      	str	r3, [r2, #0]

	return Press;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001838:	20000238 	.word	0x20000238
 800183c:	20000230 	.word	0x20000230
 8001840:	2000023c 	.word	0x2000023c
 8001844:	2000021c 	.word	0x2000021c
 8001848:	ffffe343 	.word	0xffffe343
 800184c:	20000220 	.word	0x20000220

08001850 <_Z13BMP180_GetAlti>:


float BMP180_GetAlt (int oss)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fd75 	bl	8001348 <_Z15BMP180_GetPressi>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <_Z13BMP180_GetAlti+0x80>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80018d4 <_Z13BMP180_GetAlti+0x84>
 800186e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001872:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80018c0 <_Z13BMP180_GetAlti+0x70>
 8001876:	eeb0 0a47 	vmov.f32	s0, s14
 800187a:	f000 f855 	bl	8001928 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800187e:	ec53 2b10 	vmov	r2, r3, d0
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	4914      	ldr	r1, [pc, #80]	; (80018d8 <_Z13BMP180_GetAlti+0x88>)
 8001888:	f7fe fcfe 	bl	8000288 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	a30c      	add	r3, pc, #48	; (adr r3, 80018c8 <_Z13BMP180_GetAlti+0x78>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fead 	bl	80005f8 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f99f 	bl	8000be8 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	ee07 3a90 	vmov	s15, r3
}
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	ccd745e4 	.word	0xccd745e4
 80018c4:	3fc85b95 	.word	0x3fc85b95
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40e5a540 	.word	0x40e5a540
 80018d0:	2000023c 	.word	0x2000023c
 80018d4:	47c8c800 	.word	0x47c8c800
 80018d8:	3ff00000 	.word	0x3ff00000

080018dc <_Z12BMP180_Startv>:

void BMP180_Start (void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80018e0:	f7ff fb54 	bl	8000f8c <_Z23read_calliberation_datav>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_i2d>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f7fe fe11 	bl	8000524 <__aeabi_i2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ec43 2b11 	vmov	d1, r2, r3
 800190a:	ec45 4b10 	vmov	d0, r4, r5
 800190e:	f007 f879 	bl	8008a04 <pow>
 8001912:	eeb0 7a40 	vmov.f32	s14, s0
 8001916:	eef0 7a60 	vmov.f32	s15, s1
    }
 800191a:	eeb0 0a47 	vmov.f32	s0, s14
 800191e:	eef0 0a67 	vmov.f32	s1, s15
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bdb0      	pop	{r4, r5, r7, pc}

08001928 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001932:	ed87 1b00 	vstr	d1, [r7]
      return pow(__type(__x), __type(__y));
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7fe fe06 	bl	8000548 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	ed97 1b00 	vldr	d1, [r7]
 8001944:	ec43 2b10 	vmov	d0, r2, r3
 8001948:	f007 f85c 	bl	8008a04 <pow>
 800194c:	eeb0 7a40 	vmov.f32	s14, s0
 8001950:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001954:	eeb0 0a47 	vmov.f32	s0, s14
 8001958:	eef0 0a67 	vmov.f32	s1, s15
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f002 fb04 	bl	8003f72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f80f 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 f943 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001972:	f000 f91b 	bl	8001bac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001976:	f000 f8e9 	bl	8001b4c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800197a:	f000 f899 	bl	8001ab0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800197e:	f000 f857 	bl	8001a30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001982:	f001 f9d3 	bl	8002d2c <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 8001986:	f001 fa21 	bl	8002dcc <loop>
 800198a:	e7fc      	b.n	8001986 <main+0x24>

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2244      	movs	r2, #68	; 0x44
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f007 ff8e 	bl	80098bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b2:	f003 fecd 	bl	8005750 <HAL_PWREx_ControlVoltageScaling>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019bc:	f000 f94c 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019c0:	2310      	movs	r3, #16
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019dc:	2328      	movs	r3, #40	; 0x28
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f003 ff03 	bl	80057fc <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019fc:	f000 f92c 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2303      	movs	r3, #3
 8001a06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	2104      	movs	r1, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fad7 	bl	8005fcc <HAL_RCC_ClockConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a24:	f000 f918 	bl	8001c58 <Error_Handler>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3758      	adds	r7, #88	; 0x58
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <MX_I2C1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <MX_I2C1_Init+0x7c>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a6c:	f003 f866 	bl	8004b3c <HAL_I2C_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 f8ef 	bl	8001c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a7e:	f003 fdc1 	bl	8005604 <HAL_I2CEx_ConfigAnalogFilter>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 f8e6 	bl	8001c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a90:	f003 fe03 	bl	800569a <HAL_I2CEx_ConfigDigitalFilter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 f8dd 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000244 	.word	0x20000244
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	10909cec 	.word	0x10909cec

08001ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af8:	f005 f92a 	bl	8006d50 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b02:	f000 f8a9 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b14:	f005 f973 	bl	8006dfe <HAL_TIM_ConfigClockSource>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b1e:	f000 f89b 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b30:	f005 fb62 	bl	80071f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b3a:	f000 f88d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000290 	.word	0x20000290

08001b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <MX_USART2_UART_Init+0x5c>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b58:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b90:	f005 fbba 	bl	8007308 <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f000 f85d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002dc 	.word	0x200002dc
 8001ba8:	40004400 	.word	0x40004400

08001bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_DMA_Init+0x48>)
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <MX_DMA_Init+0x48>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <MX_DMA_Init+0x48>)
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2010      	movs	r0, #16
 8001bd0:	f002 fb43 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bd4:	2010      	movs	r0, #16
 8001bd6:	f002 fb5c 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2011      	movs	r0, #17
 8001be0:	f002 fb3b 	bl	800425a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001be4:	2011      	movs	r0, #17
 8001be6:	f002 fb54 	bl	8004292 <HAL_NVIC_EnableIRQ>

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>

08001c62 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	0800c8c8 	.word	0x0800c8c8

08001ca4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
      data()
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ffe8 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffcf 	bl	8001c62 <_ZN3ros4TimeC1Ev>
    {
    }
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	0800c8b0 	.word	0x0800c8b0

08001cd4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0a19      	lsrs	r1, r3, #8
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	0c19      	lsrs	r1, r3, #16
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b2ca      	uxtb	r2, r1
 8001d12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0e19      	lsrs	r1, r3, #24
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	b2ca      	uxtb	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0a19      	lsrs	r1, r3, #8
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	0c19      	lsrs	r1, r3, #16
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3302      	adds	r3, #2
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0e19      	lsrs	r1, r3, #24
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3303      	adds	r3, #3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d76:	68fb      	ldr	r3, [r7, #12]
    }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	440b      	add	r3, r1
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	6839      	ldr	r1, [r7, #0]
 8001dc0:	440b      	add	r3, r1
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	440b      	add	r3, r1
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	440b      	add	r3, r1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3302      	adds	r3, #2
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	440b      	add	r3, r1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3303      	adds	r3, #3
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	0800c694 	.word	0x0800c694

08001e68 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	0800c6a4 	.word	0x0800c6a4

08001e84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fef8 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	809a      	strh	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
    {
    }
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	0800c898 	.word	0x0800c898
 8001ec8:	0800c6c8 	.word	0x0800c6c8

08001ecc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8899      	ldrh	r1, [r3, #4]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	889b      	ldrh	r3, [r3, #4]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3302      	adds	r3, #2
 8001f00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe f962 	bl	80001d0 <strlen>
 8001f0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	69b9      	ldr	r1, [r7, #24]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 ffb8 	bl	8002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	18d0      	adds	r0, r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f007 fcb6 	bl	80098a0 <memcpy>
      offset += length_topic_name;
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4413      	add	r3, r2
 8001f3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe f945 	bl	80001d0 <strlen>
 8001f46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	6979      	ldr	r1, [r7, #20]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f000 ff9b 	bl	8002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	18d0      	adds	r0, r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f007 fc99 	bl	80098a0 <memcpy>
      offset += length_message_type;
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4413      	add	r3, r2
 8001f74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe f928 	bl	80001d0 <strlen>
 8001f80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 ff7e 	bl	8002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3304      	adds	r3, #4
 8001f94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	18d0      	adds	r0, r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f007 fc7c 	bl	80098a0 <memcpy>
      offset += length_md5sum;
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001fb6:	68f9      	ldr	r1, [r7, #12]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0a19      	lsrs	r1, r3, #8
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0c19      	lsrs	r1, r3, #16
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0e19      	lsrs	r1, r3, #24
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
    }
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002002:	b580      	push	{r7, lr}
 8002004:	b08a      	sub	sp, #40	; 0x28
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	889b      	ldrh	r3, [r3, #4]
 8002022:	b21a      	sxth	r2, r3
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3301      	adds	r3, #1
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	440b      	add	r3, r1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21b      	sxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b21b      	sxth	r3, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3302      	adds	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	441a      	add	r2, r3
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f000 ff3a 	bl	8002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	3304      	adds	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4413      	add	r3, r2
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	429a      	cmp	r2, r3
 8002068:	d20c      	bcs.n	8002084 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	441a      	add	r2, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	440b      	add	r3, r1
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	3301      	adds	r3, #1
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	e7ec      	b.n	800205e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	4413      	add	r3, r2
 800208a:	3b01      	subs	r3, #1
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	3b01      	subs	r3, #1
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	441a      	add	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4413      	add	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	441a      	add	r2, r3
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 ff07 	bl	8002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	3304      	adds	r3, #4
 80020be:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	6a3a      	ldr	r2, [r7, #32]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d20c      	bcs.n	80020ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	441a      	add	r2, r3
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	3b01      	subs	r3, #1
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	440b      	add	r3, r1
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	3301      	adds	r3, #1
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	e7ec      	b.n	80020c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	3b01      	subs	r3, #1
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	441a      	add	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	441a      	add	r2, r3
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f000 fed4 	bl	8002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	3304      	adds	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	441a      	add	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3b01      	subs	r3, #1
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	440b      	add	r3, r1
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e7ec      	b.n	800212a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	3b01      	subs	r3, #1
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4413      	add	r3, r2
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3b01      	subs	r3, #1
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	441a      	add	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	440a      	add	r2, r1
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3301      	adds	r3, #1
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	440b      	add	r3, r1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4313      	orrs	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3302      	adds	r3, #2
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	440b      	add	r3, r1
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	3303      	adds	r3, #3
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	440b      	add	r3, r1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	061b      	lsls	r3, r3, #24
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	3304      	adds	r3, #4
 80021c6:	61bb      	str	r3, [r7, #24]
     return offset;
 80021c8:	69bb      	ldr	r3, [r7, #24]
    }
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	0800c6cc 	.word	0x0800c6cc

080021f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0800c6e8 	.word	0x0800c6e8

0800220c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd34 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	711a      	strb	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800222c:	609a      	str	r2, [r3, #8]
    {
    }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0800c880 	.word	0x0800c880
 800223c:	0800c6c8 	.word	0x0800c6c8

08002240 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4413      	add	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	7912      	ldrb	r2, [r2, #4]
 8002258:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fd ffb3 	bl	80001d0 <strlen>
 800226a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fe09 	bl	8002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	18d0      	adds	r0, r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4619      	mov	r1, r3
 800228e:	f007 fb07 	bl	80098a0 <memcpy>
      offset += length_msg;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
      return offset;
 800229a:	68fb      	ldr	r3, [r7, #12]
    }
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	3301      	adds	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	441a      	add	r2, r3
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fdf9 	bl	8002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3304      	adds	r3, #4
 80022da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d20c      	bcs.n	8002306 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	441a      	add	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	440b      	add	r3, r1
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e7ec      	b.n	80022e0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	3b01      	subs	r3, #1
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	3b01      	subs	r3, #1
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	441a      	add	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
     return offset;
 800232a:	693b      	ldr	r3, [r7, #16]
    }
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	0800c70c 	.word	0x0800c70c

08002350 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	0800c720 	.word	0x0800c720

0800236c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc84 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800c868 	.word	0x0800c868

080023b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	b2ca      	uxtb	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0a19      	lsrs	r1, r3, #8
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3301      	adds	r3, #1
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c19      	lsrs	r1, r3, #16
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	3302      	adds	r3, #2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0e19      	lsrs	r1, r3, #24
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	3303      	adds	r3, #3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	3304      	adds	r3, #4
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	429a      	cmp	r2, r3
 8002418:	d22b      	bcs.n	8002472 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	0a19      	lsrs	r1, r3, #8
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	3301      	adds	r3, #1
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	b2ca      	uxtb	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	0c19      	lsrs	r1, r3, #16
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3302      	adds	r3, #2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b2ca      	uxtb	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	0e19      	lsrs	r1, r3, #24
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3303      	adds	r3, #3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3304      	adds	r3, #4
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	3301      	adds	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	e7ce      	b.n	8002410 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6919      	ldr	r1, [r3, #16]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	0a19      	lsrs	r1, r3, #8
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3301      	adds	r3, #1
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4413      	add	r3, r2
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	0c19      	lsrs	r1, r3, #16
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	3302      	adds	r3, #2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	b2ca      	uxtb	r2, r1
 80024a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	0e19      	lsrs	r1, r3, #24
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	3303      	adds	r3, #3
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	3304      	adds	r3, #4
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d22b      	bcs.n	8002522 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0a19      	lsrs	r1, r3, #8
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3301      	adds	r3, #1
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	0c19      	lsrs	r1, r3, #16
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	3302      	adds	r3, #2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	b2ca      	uxtb	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0e19      	lsrs	r1, r3, #24
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	3303      	adds	r3, #3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	b2ca      	uxtb	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3304      	adds	r3, #4
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	e7ce      	b.n	80024c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69d9      	ldr	r1, [r3, #28]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	0a19      	lsrs	r1, r3, #8
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	0c19      	lsrs	r1, r3, #16
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3302      	adds	r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	0e19      	lsrs	r1, r3, #24
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3303      	adds	r3, #3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	b2ca      	uxtb	r2, r1
 8002564:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3304      	adds	r3, #4
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	429a      	cmp	r2, r3
 8002578:	d228      	bcs.n	80025cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe22 	bl	80001d0 <strlen>
 800258c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fc78 	bl	8002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3304      	adds	r3, #4
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	18d0      	adds	r0, r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f007 f972 	bl	80098a0 <memcpy>
      offset += length_stringsi;
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	4413      	add	r3, r2
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e7d1      	b.n	8002570 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025ce:	4618      	mov	r0, r3
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08e      	sub	sp, #56	; 0x38
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	3301      	adds	r3, #1
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	3302      	adds	r3, #2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	4313      	orrs	r3, r2
 8002610:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	3303      	adds	r3, #3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	4313      	orrs	r3, r2
 8002622:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	3304      	adds	r3, #4
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d90a      	bls.n	800264a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f007 fdae 	bl	800a1a0 <realloc>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265a:	429a      	cmp	r2, r3
 800265c:	d236      	bcs.n	80026cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440a      	add	r2, r1
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	3301      	adds	r3, #1
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	440b      	add	r3, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	3302      	adds	r3, #2
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	440b      	add	r3, r1
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	3303      	adds	r3, #3
 800269a:	6839      	ldr	r1, [r7, #0]
 800269c:	440b      	add	r3, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	3304      	adds	r3, #4
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	3301      	adds	r3, #1
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ca:	e7c3      	b.n	8002654 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	3301      	adds	r3, #1
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	3302      	adds	r3, #2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	3303      	adds	r3, #3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	3304      	adds	r3, #4
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	d90a      	bls.n	8002732 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f007 fd3a 	bl	800a1a0 <realloc>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	429a      	cmp	r2, r3
 8002744:	d236      	bcs.n	80027b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	440a      	add	r2, r1
 8002752:	7812      	ldrb	r2, [r2, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	3301      	adds	r3, #1
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	440b      	add	r3, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	3302      	adds	r3, #2
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	440b      	add	r3, r1
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	3303      	adds	r3, #3
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	440b      	add	r3, r1
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	3304      	adds	r3, #4
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	3214      	adds	r2, #20
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	3301      	adds	r3, #1
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	e7c3      	b.n	800273c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	3301      	adds	r3, #1
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	3302      	adds	r3, #2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	3303      	adds	r3, #3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f6:	3304      	adds	r3, #4
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	429a      	cmp	r2, r3
 8002802:	d90a      	bls.n	800281a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f007 fcc6 	bl	800a1a0 <realloc>
 8002814:	4602      	mov	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282a:	429a      	cmp	r2, r3
 800282c:	d23f      	bcs.n	80028ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	441a      	add	r2, r3
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fb44 	bl	8002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002842:	3304      	adds	r3, #4
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	429a      	cmp	r2, r3
 8002854:	d20c      	bcs.n	8002870 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	441a      	add	r2, r3
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3b01      	subs	r3, #1
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	440b      	add	r3, r1
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	3301      	adds	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	e7ec      	b.n	800284a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	3b01      	subs	r3, #1
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	3b01      	subs	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800288c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	3220      	adds	r2, #32
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	3301      	adds	r3, #1
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ac:	e7ba      	b.n	8002824 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80028b0:	4618      	mov	r0, r3
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	0800c804 	.word	0x0800c804

080028d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	0800c744 	.word	0x0800c744

080028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	611a      	str	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68d8      	ldr	r0, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6891      	ldr	r1, [r2, #8]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4798      	blx	r3
 800293c:	4603      	mov	r3, r0
  };
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
  }
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <_ZN13STM32HardwareC1Ev+0x34>)
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	200002dc 	.word	0x200002dc

080029bc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f804 	bl	80029d2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	4619      	mov	r1, r3
 80029e8:	f004 fd6c 	bl	80074c4 <HAL_UART_Receive_DMA>
    }
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
      int c = -1;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a00:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffa8 	bl	800295e <_ZN13STM32Hardware10getRdmaIndEv>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	429c      	cmp	r4, r3
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	791b      	ldrb	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002a44:	68fb      	ldr	r3, [r7, #12]
    }
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}
	...

08002a50 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d108      	bne.n	8002a74 <_ZN13STM32Hardware5flushEv+0x24>
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	f083 0301 	eor.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <_ZN13STM32Hardware5flushEv+0x24>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <_ZN13STM32Hardware5flushEv+0x26>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03f      	beq.n	8002afa <_ZN13STM32Hardware5flushEv+0xaa>
        mutex = true;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d031      	beq.n	8002af4 <_ZN13STM32Hardware5flushEv+0xa4>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d20a      	bcs.n	8002ab6 <_ZN13STM32Hardware5flushEv+0x66>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	e006      	b.n	8002ac4 <_ZN13STM32Hardware5flushEv+0x74>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	89fa      	ldrh	r2, [r7, #14]
 8002ada:	4619      	mov	r1, r3
 8002adc:	f004 fc62 	bl	80073a4 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
      }
    }
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200003f0 	.word	0x200003f0

08002b08 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1e:	bfa8      	it	ge
 8002b20:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b24:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b2c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	bf28      	it	cs
 8002b36:	4613      	movcs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f006 fea7 	bl	80098a0 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d00b      	beq.n	8002b86 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	18d1      	adds	r1, r2, r3
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	f006 fe8d 	bl	80098a0 <memcpy>
      }

      flush();
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff ff62 	bl	8002a50 <_ZN13STM32Hardware5flushEv>
    }
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	f001 fa52 	bl	8004044 <HAL_GetTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
      data("")
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f864 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <_ZN8std_msgs6StringC1Ev+0x28>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002bc6:	605a      	str	r2, [r3, #4]
    {
    }
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	0800c83c 	.word	0x0800c83c
 8002bd8:	0800c6c8 	.word	0x0800c6c8

08002bdc <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd faee 	bl	80001d0 <strlen>
 8002bf4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f944 	bl	8002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3304      	adds	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	18d0      	adds	r0, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	4619      	mov	r1, r3
 8002c18:	f006 fe42 	bl	80098a0 <memcpy>
      offset += length_data;
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c24:	68fb      	ldr	r3, [r7, #12]
    }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	441a      	add	r2, r3
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f93d 	bl	8002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	3304      	adds	r3, #4
 8002c52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d20c      	bcs.n	8002c7e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	441a      	add	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	440b      	add	r3, r1
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e7ec      	b.n	8002c58 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	3b01      	subs	r3, #1
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
     return offset;
 8002ca2:	693b      	ldr	r3, [r7, #16]
    }
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	0800c768 	.word	0x0800c768

08002cc8 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	0800c778 	.word	0x0800c778

08002ce4 <HAL_UART_TxCpltCallback>:
ros::Publisher press_pub("pressure", &str_msg);
ros::Publisher alt_pub("altitude", &str_msg);

char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <HAL_UART_TxCpltCallback+0x20>)
 8002cee:	f000 f9a1 	bl	8003034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff feab 	bl	8002a50 <_ZN13STM32Hardware5flushEv>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	200003f4 	.word	0x200003f4

08002d08 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <HAL_UART_RxCpltCallback+0x20>)
 8002d12:	f000 f98f 	bl	8003034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fe5a 	bl	80029d2 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200003f4 	.word	0x200003f4

08002d2c <setup>:
char Pressure1[10];
char Altitude1[10];


void setup(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0


  nh.initNode();
 8002d30:	4809      	ldr	r0, [pc, #36]	; (8002d58 <setup+0x2c>)
 8002d32:	f000 f98b 	bl	800304c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(temp_pub);
 8002d36:	4909      	ldr	r1, [pc, #36]	; (8002d5c <setup+0x30>)
 8002d38:	4807      	ldr	r0, [pc, #28]	; (8002d58 <setup+0x2c>)
 8002d3a:	f000 f9a4 	bl	8003086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(press_pub);
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <setup+0x34>)
 8002d40:	4805      	ldr	r0, [pc, #20]	; (8002d58 <setup+0x2c>)
 8002d42:	f000 f9a0 	bl	8003086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(alt_pub);
 8002d46:	4907      	ldr	r1, [pc, #28]	; (8002d64 <setup+0x38>)
 8002d48:	4803      	ldr	r0, [pc, #12]	; (8002d58 <setup+0x2c>)
 8002d4a:	f000 f99c 	bl	8003086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

  BMP180_Start();
 8002d4e:	f7fe fdc5 	bl	80018dc <_Z12BMP180_Startv>
}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200003f4 	.word	0x200003f4
 8002d5c:	20000d38 	.word	0x20000d38
 8002d60:	20000d4c 	.word	0x20000d4c
 8002d64:	20000d60 	.word	0x20000d60

08002d68 <_Z10publishMsgcPc>:


void publishMsg(char pub,char str[]){
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]

	  str_msg.data = str;
 8002d74:	4a10      	ldr	r2, [pc, #64]	; (8002db8 <_Z10publishMsgcPc+0x50>)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6053      	str	r3, [r2, #4]
	  if(pub=='t') temp_pub.publish(&str_msg);
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	2b74      	cmp	r3, #116	; 0x74
 8002d7e:	d104      	bne.n	8002d8a <_Z10publishMsgcPc+0x22>
 8002d80:	490d      	ldr	r1, [pc, #52]	; (8002db8 <_Z10publishMsgcPc+0x50>)
 8002d82:	480e      	ldr	r0, [pc, #56]	; (8002dbc <_Z10publishMsgcPc+0x54>)
 8002d84:	f7ff fdcb 	bl	800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8002d88:	e00e      	b.n	8002da8 <_Z10publishMsgcPc+0x40>
	  else if(pub=='p') press_pub.publish(&str_msg);
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	2b70      	cmp	r3, #112	; 0x70
 8002d8e:	d104      	bne.n	8002d9a <_Z10publishMsgcPc+0x32>
 8002d90:	4909      	ldr	r1, [pc, #36]	; (8002db8 <_Z10publishMsgcPc+0x50>)
 8002d92:	480b      	ldr	r0, [pc, #44]	; (8002dc0 <_Z10publishMsgcPc+0x58>)
 8002d94:	f7ff fdc3 	bl	800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8002d98:	e006      	b.n	8002da8 <_Z10publishMsgcPc+0x40>
	  else if(pub=='a') alt_pub.publish(&str_msg);
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	2b61      	cmp	r3, #97	; 0x61
 8002d9e:	d103      	bne.n	8002da8 <_Z10publishMsgcPc+0x40>
 8002da0:	4905      	ldr	r1, [pc, #20]	; (8002db8 <_Z10publishMsgcPc+0x50>)
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <_Z10publishMsgcPc+0x5c>)
 8002da4:	f7ff fdbb 	bl	800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 8002da8:	4807      	ldr	r0, [pc, #28]	; (8002dc8 <_Z10publishMsgcPc+0x60>)
 8002daa:	f000 f99c 	bl	80030e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000d30 	.word	0x20000d30
 8002dbc:	20000d38 	.word	0x20000d38
 8002dc0:	20000d4c 	.word	0x20000d4c
 8002dc4:	20000d60 	.word	0x20000d60
 8002dc8:	200003f4 	.word	0x200003f4

08002dcc <loop>:

void loop(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8002dd0:	2108      	movs	r1, #8
 8002dd2:	4826      	ldr	r0, [pc, #152]	; (8002e6c <loop+0xa0>)
 8002dd4:	f001 fe98 	bl	8004b08 <HAL_GPIO_TogglePin>


  Temperature = BMP180_GetTemp();
 8002dd8:	f7fe f9a8 	bl	800112c <_Z14BMP180_GetTempv>
 8002ddc:	eef0 7a40 	vmov.f32	s15, s0
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <loop+0xa4>)
 8002de2:	edc3 7a00 	vstr	s15, [r3]
  sprintf(Temperature1, "%.2f", Temperature);
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <loop+0xa4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fbac 	bl	8000548 <__aeabi_f2d>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	491f      	ldr	r1, [pc, #124]	; (8002e74 <loop+0xa8>)
 8002df6:	4820      	ldr	r0, [pc, #128]	; (8002e78 <loop+0xac>)
 8002df8:	f007 fa1e 	bl	800a238 <siprintf>

  Pressure = BMP180_GetPress (0);
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fe faa3 	bl	8001348 <_Z15BMP180_GetPressi>
 8002e02:	eef0 7a40 	vmov.f32	s15, s0
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <loop+0xb0>)
 8002e08:	edc3 7a00 	vstr	s15, [r3]
  sprintf(Pressure1, "%.2f", Pressure);
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <loop+0xb0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fd fb99 	bl	8000548 <__aeabi_f2d>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4916      	ldr	r1, [pc, #88]	; (8002e74 <loop+0xa8>)
 8002e1c:	4818      	ldr	r0, [pc, #96]	; (8002e80 <loop+0xb4>)
 8002e1e:	f007 fa0b 	bl	800a238 <siprintf>

  Altitude = BMP180_GetAlt(0);
 8002e22:	2000      	movs	r0, #0
 8002e24:	f7fe fd14 	bl	8001850 <_Z13BMP180_GetAlti>
 8002e28:	eef0 7a40 	vmov.f32	s15, s0
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <loop+0xb8>)
 8002e2e:	edc3 7a00 	vstr	s15, [r3]
  sprintf(Altitude1, "%.2f", Altitude);
 8002e32:	4b14      	ldr	r3, [pc, #80]	; (8002e84 <loop+0xb8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fd fb86 	bl	8000548 <__aeabi_f2d>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	460b      	mov	r3, r1
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <loop+0xa8>)
 8002e42:	4811      	ldr	r0, [pc, #68]	; (8002e88 <loop+0xbc>)
 8002e44:	f007 f9f8 	bl	800a238 <siprintf>



  //publishMsg('t',"The temperature is: ");
  publishMsg('t',Temperature1);
 8002e48:	490b      	ldr	r1, [pc, #44]	; (8002e78 <loop+0xac>)
 8002e4a:	2074      	movs	r0, #116	; 0x74
 8002e4c:	f7ff ff8c 	bl	8002d68 <_Z10publishMsgcPc>

  //publishMsg('p',"The pressure is: ");
  publishMsg('p',Pressure1);
 8002e50:	490b      	ldr	r1, [pc, #44]	; (8002e80 <loop+0xb4>)
 8002e52:	2070      	movs	r0, #112	; 0x70
 8002e54:	f7ff ff88 	bl	8002d68 <_Z10publishMsgcPc>

  //publishMsg('a',"The altitude is: ");
  publishMsg('a',Altitude1);
 8002e58:	490b      	ldr	r1, [pc, #44]	; (8002e88 <loop+0xbc>)
 8002e5a:	2061      	movs	r0, #97	; 0x61
 8002e5c:	f7ff ff84 	bl	8002d68 <_Z10publishMsgcPc>



  HAL_Delay(1000);
 8002e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e64:	f001 f8fa 	bl	800405c <HAL_Delay>
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	48000400 	.word	0x48000400
 8002e70:	20000d74 	.word	0x20000d74
 8002e74:	0800c79c 	.word	0x0800c79c
 8002e78:	20000d80 	.word	0x20000d80
 8002e7c:	20000d78 	.word	0x20000d78
 8002e80:	20000d8c 	.word	0x20000d8c
 8002e84:	20000d7c 	.word	0x20000d7c
 8002e88:	20000d98 	.word	0x20000d98

08002e8c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d80d      	bhi.n	8002ebc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	fa22 f103 	lsr.w	r1, r2, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	b2ca      	uxtb	r2, r1
 8002eb2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	60fb      	str	r3, [r7, #12]
 8002eba:	e7ee      	b.n	8002e9a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d811      	bhi.n	8002f06 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	440a      	add	r2, r1
 8002eec:	7812      	ldrb	r2, [r2, #0]
 8002eee:	4611      	mov	r1, r2
 8002ef0:	68fa      	ldr	r2, [r7, #12]
 8002ef2:	00d2      	lsls	r2, r2, #3
 8002ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3301      	adds	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	e7ea      	b.n	8002edc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8002f06:	bf00      	nop
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
	...

08002f14 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	0800c854 	.word	0x0800c854

08002f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ffe8 	bl	8002f14 <_ZN3ros15NodeHandleBase_C1Ev>
 8002f44:	4a3a      	ldr	r2, [pc, #232]	; (8003030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fd18 	bl	8002984 <_ZN13STM32HardwareC1Ev>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7ff fa02 	bl	800236c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b18      	cmp	r3, #24
 8002f70:	d80b      	bhi.n	8002f8a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	3301      	adds	r3, #1
 8002f86:	617b      	str	r3, [r7, #20]
 8002f88:	e7f0      	b.n	8002f6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	2b18      	cmp	r3, #24
 8002f92:	d80a      	bhi.n	8002faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e7f1      	b.n	8002f8e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb4:	d20a      	bcs.n	8002fcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	60fb      	str	r3, [r7, #12]
 8002fca:	e7f0      	b.n	8002fae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60bb      	str	r3, [r7, #8]
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd6:	d20a      	bcs.n	8002fee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	e7f0      	b.n	8002fd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0800c828 	.word	0x0800c828

08003034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
  }
 8003040:	4618      	mov	r0, r3
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff fcaf 	bl	80029bc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003086:	b480      	push	{r7}
 8003088:	b085      	sub	sp, #20
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
 800308e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b18      	cmp	r3, #24
 8003098:	dc1e      	bgt.n	80030d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d111      	bne.n	80030d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	60da      	str	r2, [r3, #12]
        return true;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e004      	b.n	80030da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3301      	adds	r3, #1
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	e7dd      	b.n	8003094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80030d8:	2300      	movs	r3, #0
  }
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fd4e 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 80030f8:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003108:	4293      	cmp	r3, r2
 800310a:	d903      	bls.n	8003114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	429a      	cmp	r2, r3
 8003128:	d903      	bls.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003138:	2b00      	cmp	r3, #0
 800313a:	d014      	beq.n	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3304      	adds	r3, #4
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fd27 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad2      	subs	r2, r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003152:	429a      	cmp	r2, r3
 8003154:	bf8c      	ite	hi
 8003156:	2301      	movhi	r3, #1
 8003158:	2300      	movls	r3, #0
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003160:	f06f 0301 	mvn.w	r3, #1
 8003164:	e194      	b.n	8003490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3304      	adds	r3, #4
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff fc42 	bl	80029f4 <_ZN13STM32Hardware4readEv>
 8003170:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f2c0 8174 	blt.w	8003462 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003190:	2b07      	cmp	r3, #7
 8003192:	d11e      	bne.n	80031d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	b2d1      	uxtb	r1, r2
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	460a      	mov	r2, r1
 80031ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80031b6:	1e5a      	subs	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1b4      	bne.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2208      	movs	r2, #8
 80031cc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80031d0:	e7af      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d128      	bne.n	800322e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2bff      	cmp	r3, #255	; 0xff
 80031e0:	d10d      	bne.n	80031fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f103 0214 	add.w	r2, r3, #20
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80031fc:	e799      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	3304      	adds	r3, #4
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff fcc6 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003212:	4293      	cmp	r3, r2
 8003214:	bf8c      	ite	hi
 8003216:	2301      	movhi	r3, #1
 8003218:	2300      	movls	r3, #0
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d088      	beq.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003228:	f06f 0301 	mvn.w	r3, #1
 800322c:	e130      	b.n	8003490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003234:	2b01      	cmp	r3, #1
 8003236:	d118      	bne.n	800326a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2bfe      	cmp	r3, #254	; 0xfe
 800323c:	d107      	bne.n	800324e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800324c:	e771      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800325c:	2b00      	cmp	r3, #0
 800325e:	f47f af68 	bne.w	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f918 	bl	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003268:	e763      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003270:	2b02      	cmp	r3, #2
 8003272:	d113      	bne.n	800329c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800329a:	e74a      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d110      	bne.n	80032c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	441a      	add	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032be:	1c5a      	adds	r2, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032c6:	e734      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d116      	bne.n	8003300 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80032d8:	425a      	negs	r2, r3
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	b2d2      	uxtb	r2, r2
 80032de:	bf58      	it	pl
 80032e0:	4253      	negpl	r3, r2
 80032e2:	2bff      	cmp	r3, #255	; 0xff
 80032e4:	d107      	bne.n	80032f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032f4:	e71d      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80032fe:	e718      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003306:	2b05      	cmp	r3, #5
 8003308:	d10f      	bne.n	800332a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003328:	e703      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003330:	2b06      	cmp	r3, #6
 8003332:	d117      	bne.n	8003364 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	021b      	lsls	r3, r3, #8
 800333e:	441a      	add	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2207      	movs	r2, #7
 800334a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f aeec 	bne.w	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2208      	movs	r2, #8
 800335e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003362:	e6e6      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800336a:	2b08      	cmp	r3, #8
 800336c:	f47f aee1 	bne.w	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800337e:	425a      	negs	r2, r3
 8003380:	b2db      	uxtb	r3, r3
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	bf58      	it	pl
 8003386:	4253      	negpl	r3, r2
 8003388:	2bff      	cmp	r3, #255	; 0xff
 800338a:	f47f aed2 	bne.w	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d110      	bne.n	80033ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f87d 	bl	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f898 	bl	80034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80033b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033b8:	e06a      	b.n	8003490 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80033c0:	2b0a      	cmp	r3, #10
 80033c2:	d107      	bne.n	80033d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f961 	bl	8003694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80033d2:	e6ae      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80033da:	2b06      	cmp	r3, #6
 80033dc:	d10e      	bne.n	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80033ea:	4619      	mov	r1, r3
 80033ec:	4610      	mov	r0, r2
 80033ee:	f7ff f8f2 	bl	80025d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80033fa:	e69a      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003402:	2b0b      	cmp	r3, #11
 8003404:	d104      	bne.n	8003410 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800340e:	e690      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003416:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f43f ae84 	beq.w	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003430:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f202 2222 	addw	r2, r2, #546	; 0x222
 800343a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003444:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800344e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800345c:	4611      	mov	r1, r2
 800345e:	4798      	blx	r3
    while (true)
 8003460:	e667      	b.n	8003132 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003462:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00f      	beq.n	800348e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800347c:	4293      	cmp	r3, r2
 800347e:	d906      	bls.n	800348e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 f809 	bl	8003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 800348e:	2300      	movs	r3, #0
  }
 8003490:	4618      	mov	r0, r3
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fe fbfd 	bl	8001ca4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f107 020c 	add.w	r2, r7, #12
 80034b4:	210a      	movs	r1, #10
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
    rt_time = hardware_.time();
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fb68 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 80034c4:	4602      	mov	r2, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b08b      	sub	sp, #44	; 0x2c
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80034dc:	f107 030c 	add.w	r3, r7, #12
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe fccf 	bl	8001e84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	2b18      	cmp	r3, #24
 80034ee:	dc63      	bgt.n	80035b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d056      	beq.n	80035b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	b29b      	uxth	r3, r3
 8003514:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4413      	add	r3, r2
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4608      	mov	r0, r1
 8003550:	4798      	blx	r3
 8003552:	4603      	mov	r3, r0
 8003554:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	6859      	ldr	r1, [r3, #4]
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4608      	mov	r0, r1
 800357e:	4798      	blx	r3
 8003580:	4603      	mov	r3, r0
 8003582:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003588:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681c      	ldr	r4, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003594:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff f9d1 	bl	8002946 <_ZN3ros9Publisher15getEndpointTypeEv>
 80035a4:	4601      	mov	r1, r0
 80035a6:	f107 030c 	add.w	r3, r7, #12
 80035aa:	461a      	mov	r2, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	3301      	adds	r3, #1
 80035b4:	627b      	str	r3, [r7, #36]	; 0x24
 80035b6:	e798      	b.n	80034ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	2b18      	cmp	r3, #24
 80035c0:	dc5f      	bgt.n	8003682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d053      	beq.n	800367a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035f8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3308      	adds	r3, #8
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4608      	mov	r0, r1
 8003614:	4798      	blx	r3
 8003616:	4603      	mov	r3, r0
 8003618:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800361e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800362e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	330c      	adds	r3, #12
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4608      	mov	r0, r1
 800363a:	4798      	blx	r3
 800363c:	4603      	mov	r3, r0
 800363e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003644:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681c      	ldr	r4, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800365c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3304      	adds	r3, #4
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4608      	mov	r0, r1
 800366c:	4798      	blx	r3
 800366e:	4601      	mov	r1, r0
 8003670:	f107 030c 	add.w	r3, r7, #12
 8003674:	461a      	mov	r2, r3
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367c:	3301      	adds	r3, #1
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
 8003680:	e79c      	b.n	80035bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800368a:	bf00      	nop
 800368c:	372c      	adds	r7, #44	; 0x2c
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
	...

08003694 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800369e:	f107 0308 	add.w	r3, r7, #8
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fafe 	bl	8001ca4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7ff fa71 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 80036b2:	4602      	mov	r2, r0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80036be:	f107 0308 	add.w	r3, r7, #8
 80036c2:	6839      	ldr	r1, [r7, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe fb5d 	bl	8001d84 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	4915      	ldr	r1, [pc, #84]	; (8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80036d0:	fba1 1303 	umull	r1, r3, r1, r3
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	4413      	add	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80036da:	6939      	ldr	r1, [r7, #16]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	4b11      	ldr	r3, [pc, #68]	; (8003724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80036e0:	fba3 0302 	umull	r0, r3, r3, r2
 80036e4:	099b      	lsrs	r3, r3, #6
 80036e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036ea:	fb00 f303 	mul.w	r3, r0, r3
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	440b      	add	r3, r1
 80036f8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80036fa:	f107 0308 	add.w	r3, r7, #8
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8a6 	bl	8003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff fa41 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003712:	4602      	mov	r2, r0
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800371a:	bf00      	nop
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	10624dd3 	.word	0x10624dd3
 8003728:	000f4240 	.word	0x000f4240

0800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b63      	cmp	r3, #99	; 0x63
 800373c:	dd09      	ble.n	8003752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003744:	f083 0301 	eor.w	r3, r3, #1
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800374e:	2300      	movs	r3, #0
 8003750:	e079      	b.n	8003846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 800375e:	3207      	adds	r2, #7
 8003760:	4611      	mov	r1, r2
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	4798      	blx	r3
 8003766:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	22ff      	movs	r2, #255	; 0xff
 800376c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	22fe      	movs	r2, #254	; 0xfe
 8003774:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	b29b      	uxth	r3, r3
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b29b      	uxth	r3, r3
 800378a:	b2da      	uxtb	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 800379e:	4413      	add	r3, r2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	43db      	mvns	r3, r3
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	b21b      	sxth	r3, r3
 80037ba:	121b      	asrs	r3, r3, #8
 80037bc:	b21b      	sxth	r3, r3
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80037ca:	2305      	movs	r3, #5
 80037cc:	61bb      	str	r3, [r7, #24]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	3306      	adds	r3, #6
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	dc0d      	bgt.n	80037f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	4413      	add	r3, r2
 80037de:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	461a      	mov	r2, r3
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	e7ec      	b.n	80037ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3307      	adds	r3, #7
 80037f8:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	425a      	negs	r2, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	bf58      	it	pl
 8003804:	4253      	negpl	r3, r2
 8003806:	b2da      	uxtb	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	1c59      	adds	r1, r3, #1
 800380c:	6179      	str	r1, [r7, #20]
 800380e:	43d2      	mvns	r2, r2
 8003810:	b2d1      	uxtb	r1, r2
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	460a      	mov	r2, r1
 8003818:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003822:	dc0a      	bgt.n	800383a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1d18      	adds	r0, r3, #4
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4619      	mov	r1, r3
 8003832:	f7ff f969 	bl	8002b08 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	e005      	b.n	8003846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800383a:	4905      	ldr	r1, [pc, #20]	; (8003850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f849 	bl	80038d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003842:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003846:	4618      	mov	r0, r3
 8003848:	3720      	adds	r7, #32
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	0800c7a4 	.word	0x0800c7a4

08003854 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f996 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003868:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	4915      	ldr	r1, [pc, #84]	; (80038c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 8003872:	fba1 1303 	umull	r1, r3, r1, r3
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	1e5a      	subs	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	6859      	ldr	r1, [r3, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 800388a:	fba3 0302 	umull	r0, r3, r3, r2
 800388e:	099b      	lsrs	r3, r3, #6
 8003890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003894:	fb00 f303 	mul.w	r3, r0, r3
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	4a0c      	ldr	r2, [pc, #48]	; (80038cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 800389c:	fb02 f303 	mul.w	r3, r2, r3
 80038a0:	1aca      	subs	r2, r1, r3
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80038a4:	4413      	add	r3, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80038b8:	4619      	mov	r1, r3
 80038ba:	4610      	mov	r0, r2
 80038bc:	f000 fb04 	bl	8003ec8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	10624dd3 	.word	0x10624dd3
 80038cc:	000f4240 	.word	0x000f4240
 80038d0:	3b9aca00 	.word	0x3b9aca00

080038d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	2103      	movs	r1, #3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f804 	bl	80038f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	460b      	mov	r3, r1
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fc82 	bl	800220c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003908:	7afb      	ldrb	r3, [r7, #11]
 800390a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f107 0214 	add.w	r2, r7, #20
 800391a:	2107      	movs	r1, #7
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	4798      	blx	r3
  }
 8003920:	bf00      	nop
 8003922:	3720      	adds	r7, #32
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <_Z41__static_initialization_and_destruction_0ii>:
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d11c      	bne.n	8003972 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800393e:	4293      	cmp	r3, r2
 8003940:	d117      	bne.n	8003972 <_Z41__static_initialization_and_destruction_0ii+0x4a>
ros::NodeHandle nh;
 8003942:	480e      	ldr	r0, [pc, #56]	; (800397c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8003944:	f7ff faf6 	bl	8002f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8003948:	480d      	ldr	r0, [pc, #52]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800394a:	f7ff f92f 	bl	8002bac <_ZN8std_msgs6StringC1Ev>
ros::Publisher temp_pub("temperature", &str_msg);
 800394e:	2300      	movs	r3, #0
 8003950:	4a0b      	ldr	r2, [pc, #44]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003952:	490c      	ldr	r1, [pc, #48]	; (8003984 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003954:	480c      	ldr	r0, [pc, #48]	; (8003988 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003956:	f7fe ffcb 	bl	80028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher press_pub("pressure", &str_msg);
 800395a:	2300      	movs	r3, #0
 800395c:	4a08      	ldr	r2, [pc, #32]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800395e:	490b      	ldr	r1, [pc, #44]	; (800398c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003960:	480b      	ldr	r0, [pc, #44]	; (8003990 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003962:	f7fe ffc5 	bl	80028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher alt_pub("altitude", &str_msg);
 8003966:	2300      	movs	r3, #0
 8003968:	4a05      	ldr	r2, [pc, #20]	; (8003980 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800396c:	480a      	ldr	r0, [pc, #40]	; (8003998 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800396e:	f7fe ffbf 	bl	80028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	200003f4 	.word	0x200003f4
 8003980:	20000d30 	.word	0x20000d30
 8003984:	0800c7e0 	.word	0x0800c7e0
 8003988:	20000d38 	.word	0x20000d38
 800398c:	0800c7ec 	.word	0x0800c7ec
 8003990:	20000d4c 	.word	0x20000d4c
 8003994:	0800c7f8 	.word	0x0800c7f8
 8003998:	20000d60 	.word	0x20000d60

0800399c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
    return configured_;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_GLOBAL__sub_I_nh>:
 80039b6:	b580      	push	{r7, lr}
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039be:	2001      	movs	r0, #1
 80039c0:	f7ff ffb2 	bl	8003928 <_Z41__static_initialization_and_destruction_0ii>
 80039c4:	bd80      	pop	{r7, pc}
	...

080039c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <HAL_MspInit+0x44>)
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	4a0e      	ldr	r2, [pc, #56]	; (8003a0c <HAL_MspInit+0x44>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	6613      	str	r3, [r2, #96]	; 0x60
 80039da:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_MspInit+0x44>)
 80039dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <HAL_MspInit+0x44>)
 80039e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ea:	4a08      	ldr	r2, [pc, #32]	; (8003a0c <HAL_MspInit+0x44>)
 80039ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f0:	6593      	str	r3, [r2, #88]	; 0x58
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <HAL_MspInit+0x44>)
 80039f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	603b      	str	r3, [r7, #0]
 80039fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039fe:	bf00      	nop
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0ac      	sub	sp, #176	; 0xb0
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	2288      	movs	r2, #136	; 0x88
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f005 ff43 	bl	80098bc <memset>
  if(hi2c->Instance==I2C1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a21      	ldr	r2, [pc, #132]	; (8003ac0 <HAL_I2C_MspInit+0xb0>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d13b      	bne.n	8003ab8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a40:	2340      	movs	r3, #64	; 0x40
 8003a42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003a44:	2300      	movs	r3, #0
 8003a46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f002 fcc3 	bl	80063d8 <HAL_RCCEx_PeriphCLKConfig>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003a58:	f7fe f8fe 	bl	8001c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_I2C_MspInit+0xb4>)
 8003a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a60:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <HAL_I2C_MspInit+0xb4>)
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a68:	4b16      	ldr	r3, [pc, #88]	; (8003ac4 <HAL_I2C_MspInit+0xb4>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a7c:	2312      	movs	r3, #18
 8003a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a98:	4619      	mov	r1, r3
 8003a9a:	480b      	ldr	r0, [pc, #44]	; (8003ac8 <HAL_I2C_MspInit+0xb8>)
 8003a9c:	f000 fe8a 	bl	80047b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003aa0:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_I2C_MspInit+0xb4>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	4a07      	ldr	r2, [pc, #28]	; (8003ac4 <HAL_I2C_MspInit+0xb4>)
 8003aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_I2C_MspInit+0xb4>)
 8003aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ab8:	bf00      	nop
 8003aba:	37b0      	adds	r7, #176	; 0xb0
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40005400 	.word	0x40005400
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	48000400 	.word	0x48000400

08003acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003adc:	d10b      	bne.n	8003af6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <HAL_TIM_Base_MspInit+0x38>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae2:	4a08      	ldr	r2, [pc, #32]	; (8003b04 <HAL_TIM_Base_MspInit+0x38>)
 8003ae4:	f043 0301 	orr.w	r3, r3, #1
 8003ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_TIM_Base_MspInit+0x38>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40021000 	.word	0x40021000

08003b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b0ac      	sub	sp, #176	; 0xb0
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	605a      	str	r2, [r3, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	60da      	str	r2, [r3, #12]
 8003b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2288      	movs	r2, #136	; 0x88
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f005 fec7 	bl	80098bc <memset>
  if(huart->Instance==USART2)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a4f      	ldr	r2, [pc, #316]	; (8003c70 <HAL_UART_MspInit+0x168>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	f040 8096 	bne.w	8003c66 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b42:	f107 0314 	add.w	r3, r7, #20
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 fc46 	bl	80063d8 <HAL_RCCEx_PeriphCLKConfig>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003b52:	f7fe f881 	bl	8001c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_UART_MspInit+0x16c>)
 8003b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b5a:	4a46      	ldr	r2, [pc, #280]	; (8003c74 <HAL_UART_MspInit+0x16c>)
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
 8003b62:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <HAL_UART_MspInit+0x16c>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6e:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_UART_MspInit+0x16c>)
 8003b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b72:	4a40      	ldr	r2, [pc, #256]	; (8003c74 <HAL_UART_MspInit+0x16c>)
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b7a:	4b3e      	ldr	r3, [pc, #248]	; (8003c74 <HAL_UART_MspInit+0x16c>)
 8003b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b86:	230c      	movs	r3, #12
 8003b88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003b9e:	2307      	movs	r3, #7
 8003ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ba4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bae:	f000 fe01 	bl	80047b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003bb2:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bb4:	4a31      	ldr	r2, [pc, #196]	; (8003c7c <HAL_UART_MspInit+0x174>)
 8003bb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8003bb8:	4b2f      	ldr	r3, [pc, #188]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bba:	2202      	movs	r2, #2
 8003bbc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003bca:	4b2b      	ldr	r3, [pc, #172]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd0:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bd6:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003bdc:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bde:	2220      	movs	r2, #32
 8003be0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003be2:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003be8:	4823      	ldr	r0, [pc, #140]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bea:	f000 fb6d 	bl	80042c8 <HAL_DMA_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8003bf4:	f7fe f830 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003bfc:	671a      	str	r2, [r3, #112]	; 0x70
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	; (8003c78 <HAL_UART_MspInit+0x170>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003c04:	4b1e      	ldr	r3, [pc, #120]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c06:	4a1f      	ldr	r2, [pc, #124]	; (8003c84 <HAL_UART_MspInit+0x17c>)
 8003c08:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c12:	2210      	movs	r2, #16
 8003c14:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c16:	4b1a      	ldr	r3, [pc, #104]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c1c:	4b18      	ldr	r3, [pc, #96]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c1e:	2280      	movs	r2, #128	; 0x80
 8003c20:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c28:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003c2e:	4b14      	ldr	r3, [pc, #80]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c34:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003c3a:	4811      	ldr	r0, [pc, #68]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c3c:	f000 fb44 	bl	80042c8 <HAL_DMA_Init>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8003c46:	f7fe f807 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c4e:	66da      	str	r2, [r3, #108]	; 0x6c
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <HAL_UART_MspInit+0x178>)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003c56:	2200      	movs	r2, #0
 8003c58:	2100      	movs	r1, #0
 8003c5a:	2026      	movs	r0, #38	; 0x26
 8003c5c:	f000 fafd 	bl	800425a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003c60:	2026      	movs	r0, #38	; 0x26
 8003c62:	f000 fb16 	bl	8004292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c66:	bf00      	nop
 8003c68:	37b0      	adds	r7, #176	; 0xb0
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40004400 	.word	0x40004400
 8003c74:	40021000 	.word	0x40021000
 8003c78:	20000360 	.word	0x20000360
 8003c7c:	4002006c 	.word	0x4002006c
 8003c80:	200003a8 	.word	0x200003a8
 8003c84:	40020080 	.word	0x40020080

08003c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <NMI_Handler+0x4>

08003c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c92:	e7fe      	b.n	8003c92 <HardFault_Handler+0x4>

08003c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c98:	e7fe      	b.n	8003c98 <MemManage_Handler+0x4>

08003c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c9e:	e7fe      	b.n	8003c9e <BusFault_Handler+0x4>

08003ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ca4:	e7fe      	b.n	8003ca4 <UsageFault_Handler+0x4>

08003ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003caa:	bf00      	nop
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cd4:	f000 f9a2 	bl	800401c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ce0:	4802      	ldr	r0, [pc, #8]	; (8003cec <DMA1_Channel6_IRQHandler+0x10>)
 8003ce2:	f000 fc88 	bl	80045f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003ce6:	bf00      	nop
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000360 	.word	0x20000360

08003cf0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003cf4:	4802      	ldr	r0, [pc, #8]	; (8003d00 <DMA1_Channel7_IRQHandler+0x10>)
 8003cf6:	f000 fc7e 	bl	80045f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	200003a8 	.word	0x200003a8

08003d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003d08:	4802      	ldr	r0, [pc, #8]	; (8003d14 <USART2_IRQHandler+0x10>)
 8003d0a:	f003 fc31 	bl	8007570 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	200002dc 	.word	0x200002dc

08003d18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
	return 1;
 8003d1c:	2301      	movs	r3, #1
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <_kill>:

int _kill(int pid, int sig)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d32:	f005 fd8b 	bl	800984c <__errno>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2216      	movs	r2, #22
 8003d3a:	601a      	str	r2, [r3, #0]
	return -1;
 8003d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <_exit>:

void _exit (int status)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ffe7 	bl	8003d28 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d5a:	e7fe      	b.n	8003d5a <_exit+0x12>

08003d5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b086      	sub	sp, #24
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e00a      	b.n	8003d84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d6e:	f3af 8000 	nop.w
 8003d72:	4601      	mov	r1, r0
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	60ba      	str	r2, [r7, #8]
 8003d7a:	b2ca      	uxtb	r2, r1
 8003d7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3301      	adds	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	dbf0      	blt.n	8003d6e <_read+0x12>
	}

return len;
 8003d8c:	687b      	ldr	r3, [r7, #4]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e009      	b.n	8003dbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	60ba      	str	r2, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3301      	adds	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	697a      	ldr	r2, [r7, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	dbf1      	blt.n	8003da8 <_write+0x12>
	}
	return len;
 8003dc4:	687b      	ldr	r3, [r7, #4]
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3718      	adds	r7, #24
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <_close>:

int _close(int file)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	return -1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
 8003dee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003df6:	605a      	str	r2, [r3, #4]
	return 0;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <_isatty>:

int _isatty(int file)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
	return 1;
 8003e0e:	2301      	movs	r3, #1
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
	return 0;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
	...

08003e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <_sbrk+0x5c>)
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <_sbrk+0x60>)
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <_sbrk+0x64>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <_sbrk+0x64>)
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <_sbrk+0x68>)
 8003e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e5a:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d207      	bcs.n	8003e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e68:	f005 fcf0 	bl	800984c <__errno>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	220c      	movs	r2, #12
 8003e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e76:	e009      	b.n	8003e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <_sbrk+0x64>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <_sbrk+0x64>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	4a05      	ldr	r2, [pc, #20]	; (8003e9c <_sbrk+0x64>)
 8003e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20018000 	.word	0x20018000
 8003e98:	00000400 	.word	0x00000400
 8003e9c:	20000da4 	.word	0x20000da4
 8003ea0:	20000dc0 	.word	0x20000dc0

08003ea4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <SystemInit+0x20>)
 8003eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eae:	4a05      	ldr	r2, [pc, #20]	; (8003ec4 <SystemInit+0x20>)
 8003eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	e000ed00 	.word	0xe000ed00

08003ec8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	0a5a      	lsrs	r2, r3, #9
 8003ed8:	490f      	ldr	r1, [pc, #60]	; (8003f18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003eda:	fba1 1202 	umull	r1, r2, r1, r2
 8003ede:	09d2      	lsrs	r2, r2, #7
 8003ee0:	490e      	ldr	r1, [pc, #56]	; (8003f1c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8003ee2:	fb01 f202 	mul.w	r2, r1, r2
 8003ee6:	1a9b      	subs	r3, r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0a5b      	lsrs	r3, r3, #9
 8003ef0:	4a09      	ldr	r2, [pc, #36]	; (8003f18 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8003ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef6:	09db      	lsrs	r3, r3, #7
 8003ef8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	441a      	add	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	601a      	str	r2, [r3, #0]
}
 8003f0c:	bf00      	nop
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr
 8003f18:	00044b83 	.word	0x00044b83
 8003f1c:	3b9aca00 	.word	0x3b9aca00

08003f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f24:	f7ff ffbe 	bl	8003ea4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f28:	480c      	ldr	r0, [pc, #48]	; (8003f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8003f2a:	490d      	ldr	r1, [pc, #52]	; (8003f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f2c:	4a0d      	ldr	r2, [pc, #52]	; (8003f64 <LoopForever+0xe>)
  movs r3, #0
 8003f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f30:	e002      	b.n	8003f38 <LoopCopyDataInit>

08003f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f36:	3304      	adds	r3, #4

08003f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f3c:	d3f9      	bcc.n	8003f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f3e:	4a0a      	ldr	r2, [pc, #40]	; (8003f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f40:	4c0a      	ldr	r4, [pc, #40]	; (8003f6c <LoopForever+0x16>)
  movs r3, #0
 8003f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f44:	e001      	b.n	8003f4a <LoopFillZerobss>

08003f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f48:	3204      	adds	r2, #4

08003f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f4c:	d3fb      	bcc.n	8003f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f4e:	f005 fc83 	bl	8009858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f52:	f7fd fd06 	bl	8001962 <main>

08003f56 <LoopForever>:

LoopForever:
    b LoopForever
 8003f56:	e7fe      	b.n	8003f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f60:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003f64:	0800cd40 	.word	0x0800cd40
  ldr r2, =_sbss
 8003f68:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003f6c:	20000dbc 	.word	0x20000dbc

08003f70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003f70:	e7fe      	b.n	8003f70 <ADC1_2_IRQHandler>

08003f72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f7c:	2003      	movs	r0, #3
 8003f7e:	f000 f961 	bl	8004244 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f82:	200f      	movs	r0, #15
 8003f84:	f000 f80e 	bl	8003fa4 <HAL_InitTick>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	71fb      	strb	r3, [r7, #7]
 8003f92:	e001      	b.n	8003f98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f94:	f7ff fd18 	bl	80039c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f98:	79fb      	ldrb	r3, [r7, #7]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
	...

08003fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <HAL_InitTick+0x6c>)
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d023      	beq.n	8004000 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003fb8:	4b16      	ldr	r3, [pc, #88]	; (8004014 <HAL_InitTick+0x70>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4b14      	ldr	r3, [pc, #80]	; (8004010 <HAL_InitTick+0x6c>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f96d 	bl	80042ae <HAL_SYSTICK_Config>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b0f      	cmp	r3, #15
 8003fde:	d809      	bhi.n	8003ff4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fe8:	f000 f937 	bl	800425a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <HAL_InitTick+0x74>)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e007      	b.n	8004004 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	e004      	b.n	8004004 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	e001      	b.n	8004004 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	20000008 	.word	0x20000008
 8004014:	20000000 	.word	0x20000000
 8004018:	20000004 	.word	0x20000004

0800401c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_IncTick+0x20>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	4b06      	ldr	r3, [pc, #24]	; (8004040 <HAL_IncTick+0x24>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4413      	add	r3, r2
 800402c:	4a04      	ldr	r2, [pc, #16]	; (8004040 <HAL_IncTick+0x24>)
 800402e:	6013      	str	r3, [r2, #0]
}
 8004030:	bf00      	nop
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	20000008 	.word	0x20000008
 8004040:	20000da8 	.word	0x20000da8

08004044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  return uwTick;
 8004048:	4b03      	ldr	r3, [pc, #12]	; (8004058 <HAL_GetTick+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	20000da8 	.word	0x20000da8

0800405c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004064:	f7ff ffee 	bl	8004044 <HAL_GetTick>
 8004068:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004074:	d005      	beq.n	8004082 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004076:	4b0a      	ldr	r3, [pc, #40]	; (80040a0 <HAL_Delay+0x44>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004082:	bf00      	nop
 8004084:	f7ff ffde 	bl	8004044 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	429a      	cmp	r2, r3
 8004092:	d8f7      	bhi.n	8004084 <HAL_Delay+0x28>
  {
  }
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000008 	.word	0x20000008

080040a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040b4:	4b0c      	ldr	r3, [pc, #48]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040ba:	68ba      	ldr	r2, [r7, #8]
 80040bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040c0:	4013      	ands	r3, r2
 80040c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040d6:	4a04      	ldr	r2, [pc, #16]	; (80040e8 <__NVIC_SetPriorityGrouping+0x44>)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	60d3      	str	r3, [r2, #12]
}
 80040dc:	bf00      	nop
 80040de:	3714      	adds	r7, #20
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000ed00 	.word	0xe000ed00

080040ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <__NVIC_GetPriorityGrouping+0x18>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	0a1b      	lsrs	r3, r3, #8
 80040f6:	f003 0307 	and.w	r3, r3, #7
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004116:	2b00      	cmp	r3, #0
 8004118:	db0b      	blt.n	8004132 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	f003 021f 	and.w	r2, r3, #31
 8004120:	4907      	ldr	r1, [pc, #28]	; (8004140 <__NVIC_EnableIRQ+0x38>)
 8004122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2001      	movs	r0, #1
 800412a:	fa00 f202 	lsl.w	r2, r0, r2
 800412e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000e100 	.word	0xe000e100

08004144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	6039      	str	r1, [r7, #0]
 800414e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	2b00      	cmp	r3, #0
 8004156:	db0a      	blt.n	800416e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	b2da      	uxtb	r2, r3
 800415c:	490c      	ldr	r1, [pc, #48]	; (8004190 <__NVIC_SetPriority+0x4c>)
 800415e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004162:	0112      	lsls	r2, r2, #4
 8004164:	b2d2      	uxtb	r2, r2
 8004166:	440b      	add	r3, r1
 8004168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800416c:	e00a      	b.n	8004184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4908      	ldr	r1, [pc, #32]	; (8004194 <__NVIC_SetPriority+0x50>)
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3b04      	subs	r3, #4
 800417c:	0112      	lsls	r2, r2, #4
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	440b      	add	r3, r1
 8004182:	761a      	strb	r2, [r3, #24]
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000e100 	.word	0xe000e100
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004198:	b480      	push	{r7}
 800419a:	b089      	sub	sp, #36	; 0x24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f1c3 0307 	rsb	r3, r3, #7
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	bf28      	it	cs
 80041b6:	2304      	movcs	r3, #4
 80041b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3304      	adds	r3, #4
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d902      	bls.n	80041c8 <NVIC_EncodePriority+0x30>
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3b03      	subs	r3, #3
 80041c6:	e000      	b.n	80041ca <NVIC_EncodePriority+0x32>
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	43da      	mvns	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	401a      	ands	r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	43d9      	mvns	r1, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f0:	4313      	orrs	r3, r2
         );
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3724      	adds	r7, #36	; 0x24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3b01      	subs	r3, #1
 800420c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004210:	d301      	bcc.n	8004216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004212:	2301      	movs	r3, #1
 8004214:	e00f      	b.n	8004236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <SysTick_Config+0x40>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3b01      	subs	r3, #1
 800421c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800421e:	210f      	movs	r1, #15
 8004220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004224:	f7ff ff8e 	bl	8004144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <SysTick_Config+0x40>)
 800422a:	2200      	movs	r2, #0
 800422c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800422e:	4b04      	ldr	r3, [pc, #16]	; (8004240 <SysTick_Config+0x40>)
 8004230:	2207      	movs	r2, #7
 8004232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	e000e010 	.word	0xe000e010

08004244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff29 	bl	80040a4 <__NVIC_SetPriorityGrouping>
}
 8004252:	bf00      	nop
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800425a:	b580      	push	{r7, lr}
 800425c:	b086      	sub	sp, #24
 800425e:	af00      	add	r7, sp, #0
 8004260:	4603      	mov	r3, r0
 8004262:	60b9      	str	r1, [r7, #8]
 8004264:	607a      	str	r2, [r7, #4]
 8004266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004268:	2300      	movs	r3, #0
 800426a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800426c:	f7ff ff3e 	bl	80040ec <__NVIC_GetPriorityGrouping>
 8004270:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	6978      	ldr	r0, [r7, #20]
 8004278:	f7ff ff8e 	bl	8004198 <NVIC_EncodePriority>
 800427c:	4602      	mov	r2, r0
 800427e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004282:	4611      	mov	r1, r2
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff5d 	bl	8004144 <__NVIC_SetPriority>
}
 800428a:	bf00      	nop
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	4603      	mov	r3, r0
 800429a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800429c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff ff31 	bl	8004108 <__NVIC_EnableIRQ>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b082      	sub	sp, #8
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ffa2 	bl	8004200 <SysTick_Config>
 80042bc:	4603      	mov	r3, r0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e098      	b.n	800440c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	461a      	mov	r2, r3
 80042e0:	4b4d      	ldr	r3, [pc, #308]	; (8004418 <HAL_DMA_Init+0x150>)
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d80f      	bhi.n	8004306 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	461a      	mov	r2, r3
 80042ec:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_DMA_Init+0x154>)
 80042ee:	4413      	add	r3, r2
 80042f0:	4a4b      	ldr	r2, [pc, #300]	; (8004420 <HAL_DMA_Init+0x158>)
 80042f2:	fba2 2303 	umull	r2, r3, r2, r3
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	009a      	lsls	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a48      	ldr	r2, [pc, #288]	; (8004424 <HAL_DMA_Init+0x15c>)
 8004302:	641a      	str	r2, [r3, #64]	; 0x40
 8004304:	e00e      	b.n	8004324 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	4b46      	ldr	r3, [pc, #280]	; (8004428 <HAL_DMA_Init+0x160>)
 800430e:	4413      	add	r3, r2
 8004310:	4a43      	ldr	r2, [pc, #268]	; (8004420 <HAL_DMA_Init+0x158>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	009a      	lsls	r2, r3, #2
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a42      	ldr	r2, [pc, #264]	; (800442c <HAL_DMA_Init+0x164>)
 8004322:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800433a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800433e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004348:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004354:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004360:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800437e:	d039      	beq.n	80043f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004384:	4a27      	ldr	r2, [pc, #156]	; (8004424 <HAL_DMA_Init+0x15c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d11a      	bne.n	80043c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800438a:	4b29      	ldr	r3, [pc, #164]	; (8004430 <HAL_DMA_Init+0x168>)
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004392:	f003 031c 	and.w	r3, r3, #28
 8004396:	210f      	movs	r1, #15
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	4924      	ldr	r1, [pc, #144]	; (8004430 <HAL_DMA_Init+0x168>)
 80043a0:	4013      	ands	r3, r2
 80043a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043a4:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_DMA_Init+0x168>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	f003 031c 	and.w	r3, r3, #28
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	491d      	ldr	r1, [pc, #116]	; (8004430 <HAL_DMA_Init+0x168>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
 80043be:	e019      	b.n	80043f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80043c0:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <HAL_DMA_Init+0x16c>)
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	f003 031c 	and.w	r3, r3, #28
 80043cc:	210f      	movs	r1, #15
 80043ce:	fa01 f303 	lsl.w	r3, r1, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	4917      	ldr	r1, [pc, #92]	; (8004434 <HAL_DMA_Init+0x16c>)
 80043d6:	4013      	ands	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_DMA_Init+0x16c>)
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6859      	ldr	r1, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f003 031c 	and.w	r3, r3, #28
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	4911      	ldr	r1, [pc, #68]	; (8004434 <HAL_DMA_Init+0x16c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	40020407 	.word	0x40020407
 800441c:	bffdfff8 	.word	0xbffdfff8
 8004420:	cccccccd 	.word	0xcccccccd
 8004424:	40020000 	.word	0x40020000
 8004428:	bffdfbf8 	.word	0xbffdfbf8
 800442c:	40020400 	.word	0x40020400
 8004430:	400200a8 	.word	0x400200a8
 8004434:	400204a8 	.word	0x400204a8

08004438 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004446:	2300      	movs	r3, #0
 8004448:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_DMA_Start_IT+0x20>
 8004454:	2302      	movs	r3, #2
 8004456:	e04b      	b.n	80044f0 <HAL_DMA_Start_IT+0xb8>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d13a      	bne.n	80044e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f95f 	bl	8004754 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f042 020e 	orr.w	r2, r2, #14
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e00f      	b.n	80044d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0204 	bic.w	r2, r2, #4
 80044be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 020a 	orr.w	r2, r2, #10
 80044ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e005      	b.n	80044ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80044ea:	2302      	movs	r3, #2
 80044ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80044ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004500:	2300      	movs	r3, #0
 8004502:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d008      	beq.n	8004522 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2204      	movs	r2, #4
 8004514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e022      	b.n	8004568 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f022 020e 	bic.w	r2, r2, #14
 8004530:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0201 	bic.w	r2, r2, #1
 8004540:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004546:	f003 021c 	and.w	r2, r3, #28
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	2101      	movs	r1, #1
 8004550:	fa01 f202 	lsl.w	r2, r1, r2
 8004554:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d005      	beq.n	8004598 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2204      	movs	r2, #4
 8004590:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e029      	b.n	80045ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020e 	bic.w	r2, r2, #14
 80045a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f003 021c 	and.w	r2, r3, #28
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	2101      	movs	r1, #1
 80045c6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d003      	beq.n	80045ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
    }
  }
  return status;
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f003 031c 	and.w	r3, r3, #28
 8004616:	2204      	movs	r2, #4
 8004618:	409a      	lsls	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	4013      	ands	r3, r2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d026      	beq.n	8004670 <HAL_DMA_IRQHandler+0x7a>
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d021      	beq.n	8004670 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d107      	bne.n	800464a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 0204 	bic.w	r2, r2, #4
 8004648:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f003 021c 	and.w	r2, r3, #28
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	2104      	movs	r1, #4
 8004658:	fa01 f202 	lsl.w	r2, r1, r2
 800465c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004662:	2b00      	cmp	r3, #0
 8004664:	d071      	beq.n	800474a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800466e:	e06c      	b.n	800474a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004674:	f003 031c 	and.w	r3, r3, #28
 8004678:	2202      	movs	r2, #2
 800467a:	409a      	lsls	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4013      	ands	r3, r2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d02e      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xec>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d029      	beq.n	80046e2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 020a 	bic.w	r2, r2, #10
 80046aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b8:	f003 021c 	and.w	r2, r3, #28
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2102      	movs	r1, #2
 80046c2:	fa01 f202 	lsl.w	r2, r1, r2
 80046c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d038      	beq.n	800474a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80046e0:	e033      	b.n	800474a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e6:	f003 031c 	and.w	r3, r3, #28
 80046ea:	2208      	movs	r2, #8
 80046ec:	409a      	lsls	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02a      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d025      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 020e 	bic.w	r2, r2, #14
 800470e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f003 021c 	and.w	r2, r3, #28
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471c:	2101      	movs	r1, #1
 800471e:	fa01 f202 	lsl.w	r2, r1, r2
 8004722:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d004      	beq.n	800474c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800474a:	bf00      	nop
 800474c:	bf00      	nop
}
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 021c 	and.w	r2, r3, #28
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	2101      	movs	r1, #1
 8004770:	fa01 f202 	lsl.w	r2, r1, r2
 8004774:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	2b10      	cmp	r3, #16
 8004784:	d108      	bne.n	8004798 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68ba      	ldr	r2, [r7, #8]
 8004794:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004796:	e007      	b.n	80047a8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	60da      	str	r2, [r3, #12]
}
 80047a8:	bf00      	nop
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c2:	e17f      	b.n	8004ac4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	2101      	movs	r1, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	fa01 f303 	lsl.w	r3, r1, r3
 80047d0:	4013      	ands	r3, r2
 80047d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8171 	beq.w	8004abe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d005      	beq.n	80047f4 <HAL_GPIO_Init+0x40>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d130      	bne.n	8004856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2203      	movs	r2, #3
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800482a:	2201      	movs	r2, #1
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	fa02 f303 	lsl.w	r3, r2, r3
 8004832:	43db      	mvns	r3, r3
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	4013      	ands	r3, r2
 8004838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	091b      	lsrs	r3, r3, #4
 8004840:	f003 0201 	and.w	r2, r3, #1
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b03      	cmp	r3, #3
 8004860:	d118      	bne.n	8004894 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004868:	2201      	movs	r2, #1
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	43db      	mvns	r3, r3
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	4013      	ands	r3, r2
 8004876:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	08db      	lsrs	r3, r3, #3
 800487e:	f003 0201 	and.w	r2, r3, #1
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f003 0303 	and.w	r3, r3, #3
 800489c:	2b03      	cmp	r3, #3
 800489e:	d017      	beq.n	80048d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4013      	ands	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d123      	bne.n	8004924 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	08da      	lsrs	r2, r3, #3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3208      	adds	r2, #8
 80048e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	220f      	movs	r2, #15
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	4013      	ands	r3, r2
 80048fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	08da      	lsrs	r2, r3, #3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	3208      	adds	r2, #8
 800491e:	6939      	ldr	r1, [r7, #16]
 8004920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	2203      	movs	r2, #3
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f003 0203 	and.w	r2, r3, #3
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80ac 	beq.w	8004abe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004966:	4b5f      	ldr	r3, [pc, #380]	; (8004ae4 <HAL_GPIO_Init+0x330>)
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	4a5e      	ldr	r2, [pc, #376]	; (8004ae4 <HAL_GPIO_Init+0x330>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6613      	str	r3, [r2, #96]	; 0x60
 8004972:	4b5c      	ldr	r3, [pc, #368]	; (8004ae4 <HAL_GPIO_Init+0x330>)
 8004974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800497e:	4a5a      	ldr	r2, [pc, #360]	; (8004ae8 <HAL_GPIO_Init+0x334>)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	089b      	lsrs	r3, r3, #2
 8004984:	3302      	adds	r3, #2
 8004986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	220f      	movs	r2, #15
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4013      	ands	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049a8:	d025      	beq.n	80049f6 <HAL_GPIO_Init+0x242>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a4f      	ldr	r2, [pc, #316]	; (8004aec <HAL_GPIO_Init+0x338>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01f      	beq.n	80049f2 <HAL_GPIO_Init+0x23e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a4e      	ldr	r2, [pc, #312]	; (8004af0 <HAL_GPIO_Init+0x33c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d019      	beq.n	80049ee <HAL_GPIO_Init+0x23a>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a4d      	ldr	r2, [pc, #308]	; (8004af4 <HAL_GPIO_Init+0x340>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_GPIO_Init+0x236>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a4c      	ldr	r2, [pc, #304]	; (8004af8 <HAL_GPIO_Init+0x344>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00d      	beq.n	80049e6 <HAL_GPIO_Init+0x232>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4b      	ldr	r2, [pc, #300]	; (8004afc <HAL_GPIO_Init+0x348>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <HAL_GPIO_Init+0x22e>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a4a      	ldr	r2, [pc, #296]	; (8004b00 <HAL_GPIO_Init+0x34c>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_GPIO_Init+0x22a>
 80049da:	2306      	movs	r3, #6
 80049dc:	e00c      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049de:	2307      	movs	r3, #7
 80049e0:	e00a      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049e2:	2305      	movs	r3, #5
 80049e4:	e008      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049e6:	2304      	movs	r3, #4
 80049e8:	e006      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049ea:	2303      	movs	r3, #3
 80049ec:	e004      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e002      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049f2:	2301      	movs	r3, #1
 80049f4:	e000      	b.n	80049f8 <HAL_GPIO_Init+0x244>
 80049f6:	2300      	movs	r3, #0
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	f002 0203 	and.w	r2, r2, #3
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	4093      	lsls	r3, r2
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004a08:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_GPIO_Init+0x334>)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	089b      	lsrs	r3, r3, #2
 8004a0e:	3302      	adds	r3, #2
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a16:	4b3b      	ldr	r3, [pc, #236]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	43db      	mvns	r3, r3
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4013      	ands	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d003      	beq.n	8004a3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a3a:	4a32      	ldr	r2, [pc, #200]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a40:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	43db      	mvns	r3, r3
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a64:	4a27      	ldr	r2, [pc, #156]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a6a:	4b26      	ldr	r3, [pc, #152]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	43db      	mvns	r3, r3
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4013      	ands	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a8e:	4a1d      	ldr	r2, [pc, #116]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	43db      	mvns	r3, r3
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ab8:	4a12      	ldr	r2, [pc, #72]	; (8004b04 <HAL_GPIO_Init+0x350>)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fa22 f303 	lsr.w	r3, r2, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f47f ae78 	bne.w	80047c4 <HAL_GPIO_Init+0x10>
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	48000400 	.word	0x48000400
 8004af0:	48000800 	.word	0x48000800
 8004af4:	48000c00 	.word	0x48000c00
 8004af8:	48001000 	.word	0x48001000
 8004afc:	48001400 	.word	0x48001400
 8004b00:	48001800 	.word	0x48001800
 8004b04:	40010400 	.word	0x40010400

08004b08 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	43d9      	mvns	r1, r3
 8004b26:	887b      	ldrh	r3, [r7, #2]
 8004b28:	400b      	ands	r3, r1
 8004b2a:	431a      	orrs	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	619a      	str	r2, [r3, #24]
}
 8004b30:	bf00      	nop
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e081      	b.n	8004c52 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d106      	bne.n	8004b68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fe ff54 	bl	8003a10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2224      	movs	r2, #36	; 0x24
 8004b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f022 0201 	bic.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d107      	bne.n	8004bb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689a      	ldr	r2, [r3, #8]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bb2:	609a      	str	r2, [r3, #8]
 8004bb4:	e006      	b.n	8004bc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d104      	bne.n	8004bd6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004be4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69d9      	ldr	r1, [r3, #28]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b088      	sub	sp, #32
 8004c60:	af02      	add	r7, sp, #8
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	4608      	mov	r0, r1
 8004c66:	4611      	mov	r1, r2
 8004c68:	461a      	mov	r2, r3
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	817b      	strh	r3, [r7, #10]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	813b      	strh	r3, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	f040 80f9 	bne.w	8004e76 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d002      	beq.n	8004c90 <HAL_I2C_Mem_Write+0x34>
 8004c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d105      	bne.n	8004c9c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0ed      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d101      	bne.n	8004caa <HAL_I2C_Mem_Write+0x4e>
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	e0e6      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004cb2:	f7ff f9c7 	bl	8004044 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2319      	movs	r3, #25
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fac3 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0d1      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2221      	movs	r2, #33	; 0x21
 8004cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2240      	movs	r2, #64	; 0x40
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6a3a      	ldr	r2, [r7, #32]
 8004cee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cfc:	88f8      	ldrh	r0, [r7, #6]
 8004cfe:	893a      	ldrh	r2, [r7, #8]
 8004d00:	8979      	ldrh	r1, [r7, #10]
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	9301      	str	r3, [sp, #4]
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	9300      	str	r3, [sp, #0]
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f9d3 	bl	80050b8 <I2C_RequestMemoryWrite>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d005      	beq.n	8004d24 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0a9      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2bff      	cmp	r3, #255	; 0xff
 8004d2c:	d90e      	bls.n	8004d4c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	22ff      	movs	r2, #255	; 0xff
 8004d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	8979      	ldrh	r1, [r7, #10]
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 fc2b 	bl	80055a0 <I2C_TransferConfig>
 8004d4a:	e00f      	b.n	8004d6c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	8979      	ldrh	r1, [r7, #10]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 fc1a 	bl	80055a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 faad 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e07b      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d034      	beq.n	8004e24 <HAL_I2C_Mem_Write+0x1c8>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d130      	bne.n	8004e24 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2180      	movs	r1, #128	; 0x80
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fa3f 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e04d      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2bff      	cmp	r3, #255	; 0xff
 8004de4:	d90e      	bls.n	8004e04 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	8979      	ldrh	r1, [r7, #10]
 8004df4:	2300      	movs	r3, #0
 8004df6:	9300      	str	r3, [sp, #0]
 8004df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 fbcf 	bl	80055a0 <I2C_TransferConfig>
 8004e02:	e00f      	b.n	8004e24 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e08:	b29a      	uxth	r2, r3
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e12:	b2da      	uxtb	r2, r3
 8004e14:	8979      	ldrh	r1, [r7, #10]
 8004e16:	2300      	movs	r3, #0
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fbbe 	bl	80055a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d19e      	bne.n	8004d6c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fa8c 	bl	8005350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e01a      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2220      	movs	r2, #32
 8004e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6859      	ldr	r1, [r3, #4]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <HAL_I2C_Mem_Write+0x224>)
 8004e56:	400b      	ands	r3, r1
 8004e58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	fe00e800 	.word	0xfe00e800

08004e84 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	461a      	mov	r2, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	817b      	strh	r3, [r7, #10]
 8004e96:	460b      	mov	r3, r1
 8004e98:	813b      	strh	r3, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b20      	cmp	r3, #32
 8004ea8:	f040 80fd 	bne.w	80050a6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eac:	6a3b      	ldr	r3, [r7, #32]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_I2C_Mem_Read+0x34>
 8004eb2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ebe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0f1      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d101      	bne.n	8004ed2 <HAL_I2C_Mem_Read+0x4e>
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e0ea      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eda:	f7ff f8b3 	bl	8004044 <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2319      	movs	r3, #25
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f9af 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e0d5      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2222      	movs	r2, #34	; 0x22
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2240      	movs	r2, #64	; 0x40
 8004f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a3a      	ldr	r2, [r7, #32]
 8004f16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f24:	88f8      	ldrh	r0, [r7, #6]
 8004f26:	893a      	ldrh	r2, [r7, #8]
 8004f28:	8979      	ldrh	r1, [r7, #10]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	9301      	str	r3, [sp, #4]
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	4603      	mov	r3, r0
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 f913 	bl	8005160 <I2C_RequestMemoryRead>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d005      	beq.n	8004f4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ad      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2bff      	cmp	r3, #255	; 0xff
 8004f54:	d90e      	bls.n	8004f74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22ff      	movs	r2, #255	; 0xff
 8004f5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	8979      	ldrh	r1, [r7, #10]
 8004f64:	4b52      	ldr	r3, [pc, #328]	; (80050b0 <HAL_I2C_Mem_Read+0x22c>)
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 fb17 	bl	80055a0 <I2C_TransferConfig>
 8004f72:	e00f      	b.n	8004f94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	8979      	ldrh	r1, [r7, #10]
 8004f86:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <HAL_I2C_Mem_Read+0x22c>)
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fb06 	bl	80055a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	9300      	str	r3, [sp, #0]
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2104      	movs	r1, #4
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 f956 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07c      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	b2d2      	uxtb	r2, r2
 8004fba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	1c5a      	adds	r2, r3, #1
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d034      	beq.n	8005054 <HAL_I2C_Mem_Read+0x1d0>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d130      	bne.n	8005054 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2180      	movs	r1, #128	; 0x80
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f927 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e04d      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005010:	b29b      	uxth	r3, r3
 8005012:	2bff      	cmp	r3, #255	; 0xff
 8005014:	d90e      	bls.n	8005034 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	22ff      	movs	r2, #255	; 0xff
 800501a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005020:	b2da      	uxtb	r2, r3
 8005022:	8979      	ldrh	r1, [r7, #10]
 8005024:	2300      	movs	r3, #0
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 fab7 	bl	80055a0 <I2C_TransferConfig>
 8005032:	e00f      	b.n	8005054 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005042:	b2da      	uxtb	r2, r3
 8005044:	8979      	ldrh	r1, [r7, #10]
 8005046:	2300      	movs	r3, #0
 8005048:	9300      	str	r3, [sp, #0]
 800504a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f000 faa6 	bl	80055a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d19a      	bne.n	8004f94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f974 	bl	8005350 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e01a      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2220      	movs	r2, #32
 8005078:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6859      	ldr	r1, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_I2C_Mem_Read+0x230>)
 8005086:	400b      	ands	r3, r1
 8005088:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2220      	movs	r2, #32
 800508e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80050a6:	2302      	movs	r3, #2
  }
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	80002400 	.word	0x80002400
 80050b4:	fe00e800 	.word	0xfe00e800

080050b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af02      	add	r7, sp, #8
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	4608      	mov	r0, r1
 80050c2:	4611      	mov	r1, r2
 80050c4:	461a      	mov	r2, r3
 80050c6:	4603      	mov	r3, r0
 80050c8:	817b      	strh	r3, [r7, #10]
 80050ca:	460b      	mov	r3, r1
 80050cc:	813b      	strh	r3, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	b2da      	uxtb	r2, r3
 80050d6:	8979      	ldrh	r1, [r7, #10]
 80050d8:	4b20      	ldr	r3, [pc, #128]	; (800515c <I2C_RequestMemoryWrite+0xa4>)
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 fa5d 	bl	80055a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050e6:	69fa      	ldr	r2, [r7, #28]
 80050e8:	69b9      	ldr	r1, [r7, #24]
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f8f0 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d001      	beq.n	80050fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e02c      	b.n	8005154 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050fa:	88fb      	ldrh	r3, [r7, #6]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d105      	bne.n	800510c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005100:	893b      	ldrh	r3, [r7, #8]
 8005102:	b2da      	uxtb	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	629a      	str	r2, [r3, #40]	; 0x28
 800510a:	e015      	b.n	8005138 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800510c:	893b      	ldrh	r3, [r7, #8]
 800510e:	0a1b      	lsrs	r3, r3, #8
 8005110:	b29b      	uxth	r3, r3
 8005112:	b2da      	uxtb	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	69b9      	ldr	r1, [r7, #24]
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f000 f8d6 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e012      	b.n	8005154 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800512e:	893b      	ldrh	r3, [r7, #8]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	9300      	str	r3, [sp, #0]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	2200      	movs	r2, #0
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f000 f884 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	80002000 	.word	0x80002000

08005160 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4603      	mov	r3, r0
 8005170:	817b      	strh	r3, [r7, #10]
 8005172:	460b      	mov	r3, r1
 8005174:	813b      	strh	r3, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	b2da      	uxtb	r2, r3
 800517e:	8979      	ldrh	r1, [r7, #10]
 8005180:	4b20      	ldr	r3, [pc, #128]	; (8005204 <I2C_RequestMemoryRead+0xa4>)
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fa0a 	bl	80055a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	69b9      	ldr	r1, [r7, #24]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f89d 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e02c      	b.n	80051fa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d105      	bne.n	80051b2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
 80051b0:	e015      	b.n	80051de <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80051b2:	893b      	ldrh	r3, [r7, #8]
 80051b4:	0a1b      	lsrs	r3, r3, #8
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051c0:	69fa      	ldr	r2, [r7, #28]
 80051c2:	69b9      	ldr	r1, [r7, #24]
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f883 	bl	80052d0 <I2C_WaitOnTXISFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e012      	b.n	80051fa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80051d4:	893b      	ldrh	r3, [r7, #8]
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2140      	movs	r1, #64	; 0x40
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f831 	bl	8005250 <I2C_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	80002000 	.word	0x80002000

08005208 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d103      	bne.n	8005226 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2200      	movs	r2, #0
 8005224:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b01      	cmp	r3, #1
 8005232:	d007      	beq.n	8005244 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699a      	ldr	r2, [r3, #24]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	619a      	str	r2, [r3, #24]
  }
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005260:	e022      	b.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005268:	d01e      	beq.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526a:	f7fe feeb 	bl	8004044 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	429a      	cmp	r2, r3
 8005278:	d302      	bcc.n	8005280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d113      	bne.n	80052a8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e00f      	b.n	80052c8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	4013      	ands	r3, r2
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	bf0c      	ite	eq
 80052b8:	2301      	moveq	r3, #1
 80052ba:	2300      	movne	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d0cd      	beq.n	8005262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052dc:	e02c      	b.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f870 	bl	80053c8 <I2C_IsErrorOccurred>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e02a      	b.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052f8:	d01e      	beq.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fa:	f7fe fea3 	bl	8004044 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	429a      	cmp	r2, r3
 8005308:	d302      	bcc.n	8005310 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d113      	bne.n	8005338 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005314:	f043 0220 	orr.w	r2, r3, #32
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e007      	b.n	8005348 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d1cb      	bne.n	80052de <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	3710      	adds	r7, #16
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800535c:	e028      	b.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 f830 	bl	80053c8 <I2C_IsErrorOccurred>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e026      	b.n	80053c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fe fe67 	bl	8004044 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d113      	bne.n	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e007      	b.n	80053c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d1cf      	bne.n	800535e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	; 0x28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d075      	beq.n	80054e0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2210      	movs	r2, #16
 80053fa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80053fc:	e056      	b.n	80054ac <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005404:	d052      	beq.n	80054ac <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7fe fe1d 	bl	8004044 <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_IsErrorOccurred+0x54>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d147      	bne.n	80054ac <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005426:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800542e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800543a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543e:	d12e      	bne.n	800549e <I2C_IsErrorOccurred+0xd6>
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005446:	d02a      	beq.n	800549e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005448:	7cfb      	ldrb	r3, [r7, #19]
 800544a:	2b20      	cmp	r3, #32
 800544c:	d027      	beq.n	800549e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800545e:	f7fe fdf1 	bl	8004044 <HAL_GetTick>
 8005462:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005464:	e01b      	b.n	800549e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005466:	f7fe fded 	bl	8004044 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	2b19      	cmp	r3, #25
 8005472:	d914      	bls.n	800549e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005478:	f043 0220 	orr.w	r2, r3, #32
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d1dc      	bne.n	8005466 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d003      	beq.n	80054c2 <I2C_IsErrorOccurred+0xfa>
 80054ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d09d      	beq.n	80053fe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80054c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d103      	bne.n	80054d2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2220      	movs	r2, #32
 80054d0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80054d2:	6a3b      	ldr	r3, [r7, #32]
 80054d4:	f043 0304 	orr.w	r3, r3, #4
 80054d8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005502:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00b      	beq.n	800552c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	f043 0308 	orr.w	r3, r3, #8
 800551a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f043 0302 	orr.w	r3, r3, #2
 800553c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800554e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005552:	2b00      	cmp	r3, #0
 8005554:	d01c      	beq.n	8005590 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005556:	68f8      	ldr	r0, [r7, #12]
 8005558:	f7ff fe56 	bl	8005208 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	4b0d      	ldr	r3, [pc, #52]	; (800559c <I2C_IsErrorOccurred+0x1d4>)
 8005568:	400b      	ands	r3, r1
 800556a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	431a      	orrs	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005594:	4618      	mov	r0, r3
 8005596:	3728      	adds	r7, #40	; 0x28
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	fe00e800 	.word	0xfe00e800

080055a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b087      	sub	sp, #28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	817b      	strh	r3, [r7, #10]
 80055ae:	4613      	mov	r3, r2
 80055b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055b2:	897b      	ldrh	r3, [r7, #10]
 80055b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055b8:	7a7b      	ldrb	r3, [r7, #9]
 80055ba:	041b      	lsls	r3, r3, #16
 80055bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055ce:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	0d5b      	lsrs	r3, r3, #21
 80055da:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <I2C_TransferConfig+0x60>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	43db      	mvns	r3, r3
 80055e4:	ea02 0103 	and.w	r1, r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80055f2:	bf00      	nop
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	03ff63ff 	.word	0x03ff63ff

08005604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b20      	cmp	r3, #32
 8005618:	d138      	bne.n	800568c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005620:	2b01      	cmp	r3, #1
 8005622:	d101      	bne.n	8005628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005624:	2302      	movs	r3, #2
 8005626:	e032      	b.n	800568e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2224      	movs	r2, #36	; 0x24
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f022 0201 	bic.w	r2, r2, #1
 8005646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6819      	ldr	r1, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0201 	orr.w	r2, r2, #1
 8005676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005688:	2300      	movs	r3, #0
 800568a:	e000      	b.n	800568e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800568c:	2302      	movs	r3, #2
  }
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d139      	bne.n	8005724 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e033      	b.n	8005726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2224      	movs	r2, #36	; 0x24
 80056ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 0201 	bic.w	r2, r2, #1
 80056dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80056ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	021b      	lsls	r3, r3, #8
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005734:	b480      	push	{r7}
 8005736:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005738:	4b04      	ldr	r3, [pc, #16]	; (800574c <HAL_PWREx_GetVoltageRange+0x18>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005740:	4618      	mov	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40007000 	.word	0x40007000

08005750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800575e:	d130      	bne.n	80057c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005760:	4b23      	ldr	r3, [pc, #140]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800576c:	d038      	beq.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800576e:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005776:	4a1e      	ldr	r2, [pc, #120]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800577c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800577e:	4b1d      	ldr	r3, [pc, #116]	; (80057f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2232      	movs	r2, #50	; 0x32
 8005784:	fb02 f303 	mul.w	r3, r2, r3
 8005788:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800578a:	fba2 2303 	umull	r2, r3, r2, r3
 800578e:	0c9b      	lsrs	r3, r3, #18
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005794:	e002      	b.n	800579c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	3b01      	subs	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057a8:	d102      	bne.n	80057b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1f2      	bne.n	8005796 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80057b0:	4b0f      	ldr	r3, [pc, #60]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d110      	bne.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e00f      	b.n	80057e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80057ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057ce:	d007      	beq.n	80057e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80057d0:	4b07      	ldr	r3, [pc, #28]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80057d8:	4a05      	ldr	r2, [pc, #20]	; (80057f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80057da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40007000 	.word	0x40007000
 80057f4:	20000000 	.word	0x20000000
 80057f8:	431bde83 	.word	0x431bde83

080057fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e3d8      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800580e:	4b97      	ldr	r3, [pc, #604]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005818:	4b94      	ldr	r3, [pc, #592]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0310 	and.w	r3, r3, #16
 800582a:	2b00      	cmp	r3, #0
 800582c:	f000 80e4 	beq.w	80059f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_RCC_OscConfig+0x4a>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b0c      	cmp	r3, #12
 800583a:	f040 808b 	bne.w	8005954 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2b01      	cmp	r3, #1
 8005842:	f040 8087 	bne.w	8005954 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005846:	4b89      	ldr	r3, [pc, #548]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_RCC_OscConfig+0x62>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e3b0      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1a      	ldr	r2, [r3, #32]
 8005862:	4b82      	ldr	r3, [pc, #520]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <HAL_RCC_OscConfig+0x7c>
 800586e:	4b7f      	ldr	r3, [pc, #508]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005876:	e005      	b.n	8005884 <HAL_RCC_OscConfig+0x88>
 8005878:	4b7c      	ldr	r3, [pc, #496]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	091b      	lsrs	r3, r3, #4
 8005880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005884:	4293      	cmp	r3, r2
 8005886:	d223      	bcs.n	80058d0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fd43 	bl	8006318 <RCC_SetFlashLatencyFromMSIRange>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d001      	beq.n	800589c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e391      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800589c:	4b73      	ldr	r3, [pc, #460]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a72      	ldr	r2, [pc, #456]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058a2:	f043 0308 	orr.w	r3, r3, #8
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	4b70      	ldr	r3, [pc, #448]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	496d      	ldr	r1, [pc, #436]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ba:	4b6c      	ldr	r3, [pc, #432]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	4968      	ldr	r1, [pc, #416]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	604b      	str	r3, [r1, #4]
 80058ce:	e025      	b.n	800591c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80058d0:	4b66      	ldr	r3, [pc, #408]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a65      	ldr	r2, [pc, #404]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058d6:	f043 0308 	orr.w	r3, r3, #8
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	4b63      	ldr	r3, [pc, #396]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	4960      	ldr	r1, [pc, #384]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058ee:	4b5f      	ldr	r3, [pc, #380]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	495b      	ldr	r1, [pc, #364]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d109      	bne.n	800591c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	4618      	mov	r0, r3
 800590e:	f000 fd03 	bl	8006318 <RCC_SetFlashLatencyFromMSIRange>
 8005912:	4603      	mov	r3, r0
 8005914:	2b00      	cmp	r3, #0
 8005916:	d001      	beq.n	800591c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e351      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800591c:	f000 fc38 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8005920:	4602      	mov	r2, r0
 8005922:	4b52      	ldr	r3, [pc, #328]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	091b      	lsrs	r3, r3, #4
 8005928:	f003 030f 	and.w	r3, r3, #15
 800592c:	4950      	ldr	r1, [pc, #320]	; (8005a70 <HAL_RCC_OscConfig+0x274>)
 800592e:	5ccb      	ldrb	r3, [r1, r3]
 8005930:	f003 031f 	and.w	r3, r3, #31
 8005934:	fa22 f303 	lsr.w	r3, r2, r3
 8005938:	4a4e      	ldr	r2, [pc, #312]	; (8005a74 <HAL_RCC_OscConfig+0x278>)
 800593a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800593c:	4b4e      	ldr	r3, [pc, #312]	; (8005a78 <HAL_RCC_OscConfig+0x27c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe fb2f 	bl	8003fa4 <HAL_InitTick>
 8005946:	4603      	mov	r3, r0
 8005948:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d052      	beq.n	80059f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005950:	7bfb      	ldrb	r3, [r7, #15]
 8005952:	e335      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d032      	beq.n	80059c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800595c:	4b43      	ldr	r3, [pc, #268]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a42      	ldr	r2, [pc, #264]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005968:	f7fe fb6c 	bl	8004044 <HAL_GetTick>
 800596c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800596e:	e008      	b.n	8005982 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005970:	f7fe fb68 	bl	8004044 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	2b02      	cmp	r3, #2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e31e      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005982:	4b3a      	ldr	r3, [pc, #232]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d0f0      	beq.n	8005970 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800598e:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a36      	ldr	r2, [pc, #216]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005994:	f043 0308 	orr.w	r3, r3, #8
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	4931      	ldr	r1, [pc, #196]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80059ac:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	492c      	ldr	r1, [pc, #176]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	604b      	str	r3, [r1, #4]
 80059c0:	e01a      	b.n	80059f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a29      	ldr	r2, [pc, #164]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80059c8:	f023 0301 	bic.w	r3, r3, #1
 80059cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80059ce:	f7fe fb39 	bl	8004044 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80059d6:	f7fe fb35 	bl	8004044 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e2eb      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80059e8:	4b20      	ldr	r3, [pc, #128]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <HAL_RCC_OscConfig+0x1da>
 80059f4:	e000      	b.n	80059f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80059f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d074      	beq.n	8005aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2b08      	cmp	r3, #8
 8005a08:	d005      	beq.n	8005a16 <HAL_RCC_OscConfig+0x21a>
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b0c      	cmp	r3, #12
 8005a0e:	d10e      	bne.n	8005a2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d10b      	bne.n	8005a2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a16:	4b15      	ldr	r3, [pc, #84]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d064      	beq.n	8005aec <HAL_RCC_OscConfig+0x2f0>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d160      	bne.n	8005aec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e2c8      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a36:	d106      	bne.n	8005a46 <HAL_RCC_OscConfig+0x24a>
 8005a38:	4b0c      	ldr	r3, [pc, #48]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a0b      	ldr	r2, [pc, #44]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	e026      	b.n	8005a94 <HAL_RCC_OscConfig+0x298>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a4e:	d115      	bne.n	8005a7c <HAL_RCC_OscConfig+0x280>
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a5a:	6013      	str	r3, [r2, #0]
 8005a5c:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a02      	ldr	r2, [pc, #8]	; (8005a6c <HAL_RCC_OscConfig+0x270>)
 8005a62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e014      	b.n	8005a94 <HAL_RCC_OscConfig+0x298>
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	0800c8d8 	.word	0x0800c8d8
 8005a74:	20000000 	.word	0x20000000
 8005a78:	20000004 	.word	0x20000004
 8005a7c:	4ba0      	ldr	r3, [pc, #640]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a9f      	ldr	r2, [pc, #636]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	4b9d      	ldr	r3, [pc, #628]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a9c      	ldr	r2, [pc, #624]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d013      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fe fad2 	bl	8004044 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005aa4:	f7fe face 	bl	8004044 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b64      	cmp	r3, #100	; 0x64
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e284      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ab6:	4b92      	ldr	r3, [pc, #584]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0f0      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x2a8>
 8005ac2:	e014      	b.n	8005aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac4:	f7fe fabe 	bl	8004044 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005acc:	f7fe faba 	bl	8004044 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b64      	cmp	r3, #100	; 0x64
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e270      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ade:	4b88      	ldr	r3, [pc, #544]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x2d0>
 8005aea:	e000      	b.n	8005aee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d060      	beq.n	8005bbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d005      	beq.n	8005b0c <HAL_RCC_OscConfig+0x310>
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	2b0c      	cmp	r3, #12
 8005b04:	d119      	bne.n	8005b3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d116      	bne.n	8005b3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b0c:	4b7c      	ldr	r3, [pc, #496]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_OscConfig+0x328>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e24d      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b24:	4b76      	ldr	r3, [pc, #472]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	061b      	lsls	r3, r3, #24
 8005b32:	4973      	ldr	r1, [pc, #460]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b38:	e040      	b.n	8005bbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d023      	beq.n	8005b8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b42:	4b6f      	ldr	r3, [pc, #444]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a6e      	ldr	r2, [pc, #440]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4e:	f7fe fa79 	bl	8004044 <HAL_GetTick>
 8005b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b56:	f7fe fa75 	bl	8004044 <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e22b      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b68:	4b65      	ldr	r3, [pc, #404]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b74:	4b62      	ldr	r3, [pc, #392]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	495f      	ldr	r1, [pc, #380]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]
 8005b88:	e018      	b.n	8005bbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a5c      	ldr	r2, [pc, #368]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b96:	f7fe fa55 	bl	8004044 <HAL_GetTick>
 8005b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b9c:	e008      	b.n	8005bb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9e:	f7fe fa51 	bl	8004044 <HAL_GetTick>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d901      	bls.n	8005bb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e207      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bb0:	4b53      	ldr	r3, [pc, #332]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1f0      	bne.n	8005b9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0308 	and.w	r3, r3, #8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d03c      	beq.n	8005c42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01c      	beq.n	8005c0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bd0:	4b4b      	ldr	r3, [pc, #300]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bd6:	4a4a      	ldr	r2, [pc, #296]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fe fa30 	bl	8004044 <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005be8:	f7fe fa2c 	bl	8004044 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d901      	bls.n	8005bfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e1e2      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bfa:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c00:	f003 0302 	and.w	r3, r3, #2
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ef      	beq.n	8005be8 <HAL_RCC_OscConfig+0x3ec>
 8005c08:	e01b      	b.n	8005c42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c0a:	4b3d      	ldr	r3, [pc, #244]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c10:	4a3b      	ldr	r2, [pc, #236]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c1a:	f7fe fa13 	bl	8004044 <HAL_GetTick>
 8005c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c20:	e008      	b.n	8005c34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c22:	f7fe fa0f 	bl	8004044 <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d901      	bls.n	8005c34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005c30:	2303      	movs	r3, #3
 8005c32:	e1c5      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c34:	4b32      	ldr	r3, [pc, #200]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1ef      	bne.n	8005c22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0304 	and.w	r3, r3, #4
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	f000 80a6 	beq.w	8005d9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c50:	2300      	movs	r3, #0
 8005c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c54:	4b2a      	ldr	r3, [pc, #168]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10d      	bne.n	8005c7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c60:	4b27      	ldr	r3, [pc, #156]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c64:	4a26      	ldr	r2, [pc, #152]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c74:	60bb      	str	r3, [r7, #8]
 8005c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c7c:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <HAL_RCC_OscConfig+0x508>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d118      	bne.n	8005cba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c88:	4b1e      	ldr	r3, [pc, #120]	; (8005d04 <HAL_RCC_OscConfig+0x508>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1d      	ldr	r2, [pc, #116]	; (8005d04 <HAL_RCC_OscConfig+0x508>)
 8005c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c94:	f7fe f9d6 	bl	8004044 <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c9c:	f7fe f9d2 	bl	8004044 <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e188      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cae:	4b15      	ldr	r3, [pc, #84]	; (8005d04 <HAL_RCC_OscConfig+0x508>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d108      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x4d8>
 8005cc2:	4b0f      	ldr	r3, [pc, #60]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	4a0d      	ldr	r2, [pc, #52]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005cca:	f043 0301 	orr.w	r3, r3, #1
 8005cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cd2:	e029      	b.n	8005d28 <HAL_RCC_OscConfig+0x52c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b05      	cmp	r3, #5
 8005cda:	d115      	bne.n	8005d08 <HAL_RCC_OscConfig+0x50c>
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce2:	4a07      	ldr	r2, [pc, #28]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005ce4:	f043 0304 	orr.w	r3, r3, #4
 8005ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf2:	4a03      	ldr	r2, [pc, #12]	; (8005d00 <HAL_RCC_OscConfig+0x504>)
 8005cf4:	f043 0301 	orr.w	r3, r3, #1
 8005cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005cfc:	e014      	b.n	8005d28 <HAL_RCC_OscConfig+0x52c>
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000
 8005d04:	40007000 	.word	0x40007000
 8005d08:	4b91      	ldr	r3, [pc, #580]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d0e:	4a90      	ldr	r2, [pc, #576]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d10:	f023 0301 	bic.w	r3, r3, #1
 8005d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005d18:	4b8d      	ldr	r3, [pc, #564]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d1e:	4a8c      	ldr	r2, [pc, #560]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d20:	f023 0304 	bic.w	r3, r3, #4
 8005d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d016      	beq.n	8005d5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fe f988 	bl	8004044 <HAL_GetTick>
 8005d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fe f984 	bl	8004044 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e138      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d4e:	4b80      	ldr	r3, [pc, #512]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0ed      	beq.n	8005d38 <HAL_RCC_OscConfig+0x53c>
 8005d5c:	e015      	b.n	8005d8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5e:	f7fe f971 	bl	8004044 <HAL_GetTick>
 8005d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d64:	e00a      	b.n	8005d7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d66:	f7fe f96d 	bl	8004044 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d901      	bls.n	8005d7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	e121      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005d7c:	4b74      	ldr	r3, [pc, #464]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1ed      	bne.n	8005d66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d8a:	7ffb      	ldrb	r3, [r7, #31]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d105      	bne.n	8005d9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d90:	4b6f      	ldr	r3, [pc, #444]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	4a6e      	ldr	r2, [pc, #440]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 810c 	beq.w	8005fbe <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	f040 80d4 	bne.w	8005f58 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005db0:	4b67      	ldr	r3, [pc, #412]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0203 	and.w	r2, r3, #3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d130      	bne.n	8005e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d127      	bne.n	8005e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d11f      	bne.n	8005e26 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005df0:	2a07      	cmp	r2, #7
 8005df2:	bf14      	ite	ne
 8005df4:	2201      	movne	r2, #1
 8005df6:	2200      	moveq	r2, #0
 8005df8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d113      	bne.n	8005e26 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d109      	bne.n	8005e26 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d06e      	beq.n	8005f04 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d069      	beq.n	8005f00 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005e2c:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005e38:	4b45      	ldr	r3, [pc, #276]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0bb      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005e48:	4b41      	ldr	r3, [pc, #260]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a40      	ldr	r2, [pc, #256]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e52:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005e54:	f7fe f8f6 	bl	8004044 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e5c:	f7fe f8f2 	bl	8004044 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e0a8      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e6e:	4b38      	ldr	r3, [pc, #224]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1f0      	bne.n	8005e5c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e7a:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005e7c:	68da      	ldr	r2, [r3, #12]
 8005e7e:	4b35      	ldr	r3, [pc, #212]	; (8005f54 <HAL_RCC_OscConfig+0x758>)
 8005e80:	4013      	ands	r3, r2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005e8a:	3a01      	subs	r2, #1
 8005e8c:	0112      	lsls	r2, r2, #4
 8005e8e:	4311      	orrs	r1, r2
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e94:	0212      	lsls	r2, r2, #8
 8005e96:	4311      	orrs	r1, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005e9c:	0852      	lsrs	r2, r2, #1
 8005e9e:	3a01      	subs	r2, #1
 8005ea0:	0552      	lsls	r2, r2, #21
 8005ea2:	4311      	orrs	r1, r2
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005ea8:	0852      	lsrs	r2, r2, #1
 8005eaa:	3a01      	subs	r2, #1
 8005eac:	0652      	lsls	r2, r2, #25
 8005eae:	4311      	orrs	r1, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005eb4:	0912      	lsrs	r2, r2, #4
 8005eb6:	0452      	lsls	r2, r2, #17
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	4925      	ldr	r1, [pc, #148]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005ec0:	4b23      	ldr	r3, [pc, #140]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a22      	ldr	r2, [pc, #136]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005eca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005ecc:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ed8:	f7fe f8b4 	bl	8004044 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fe f8b0 	bl	8004044 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e066      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ef2:	4b17      	ldr	r3, [pc, #92]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005efe:	e05e      	b.n	8005fbe <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e05d      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f04:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d156      	bne.n	8005fbe <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005f10:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f1c:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4a0b      	ldr	r2, [pc, #44]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f26:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f28:	f7fe f88c 	bl	8004044 <HAL_GetTick>
 8005f2c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f2e:	e008      	b.n	8005f42 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f30:	f7fe f888 	bl	8004044 <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e03e      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f42:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <HAL_RCC_OscConfig+0x754>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0f0      	beq.n	8005f30 <HAL_RCC_OscConfig+0x734>
 8005f4e:	e036      	b.n	8005fbe <HAL_RCC_OscConfig+0x7c2>
 8005f50:	40021000 	.word	0x40021000
 8005f54:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	2b0c      	cmp	r3, #12
 8005f5c:	d02d      	beq.n	8005fba <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f5e:	4b1a      	ldr	r3, [pc, #104]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a19      	ldr	r2, [pc, #100]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f64:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f68:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005f6a:	4b17      	ldr	r3, [pc, #92]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	4a13      	ldr	r2, [pc, #76]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f7c:	f023 0303 	bic.w	r3, r3, #3
 8005f80:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005f82:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	4a10      	ldr	r2, [pc, #64]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005f88:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005f8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f90:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f92:	f7fe f857 	bl	8004044 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9a:	f7fe f853 	bl	8004044 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e009      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fac:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <HAL_RCC_OscConfig+0x7cc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f0      	bne.n	8005f9a <HAL_RCC_OscConfig+0x79e>
 8005fb8:	e001      	b.n	8005fbe <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40021000 	.word	0x40021000

08005fcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d101      	bne.n	8005fe0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0c8      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fe0:	4b66      	ldr	r3, [pc, #408]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d910      	bls.n	8006010 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fee:	4b63      	ldr	r3, [pc, #396]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 0207 	bic.w	r2, r3, #7
 8005ff6:	4961      	ldr	r1, [pc, #388]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ffe:	4b5f      	ldr	r3, [pc, #380]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	683a      	ldr	r2, [r7, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	d001      	beq.n	8006010 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e0b0      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d04c      	beq.n	80060b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d107      	bne.n	8006034 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006024:	4b56      	ldr	r3, [pc, #344]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d121      	bne.n	8006074 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e09e      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	2b02      	cmp	r3, #2
 800603a:	d107      	bne.n	800604c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800603c:	4b50      	ldr	r3, [pc, #320]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d115      	bne.n	8006074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e092      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d107      	bne.n	8006064 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006054:	4b4a      	ldr	r3, [pc, #296]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	e086      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006064:	4b46      	ldr	r3, [pc, #280]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e07e      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006074:	4b42      	ldr	r3, [pc, #264]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f023 0203 	bic.w	r2, r3, #3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	493f      	ldr	r1, [pc, #252]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006086:	f7fd ffdd 	bl	8004044 <HAL_GetTick>
 800608a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608c:	e00a      	b.n	80060a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800608e:	f7fd ffd9 	bl	8004044 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f241 3288 	movw	r2, #5000	; 0x1388
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e066      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a4:	4b36      	ldr	r3, [pc, #216]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f003 020c 	and.w	r2, r3, #12
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d1eb      	bne.n	800608e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d008      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060c2:	4b2f      	ldr	r3, [pc, #188]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	492c      	ldr	r1, [pc, #176]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 80060d0:	4313      	orrs	r3, r2
 80060d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060d4:	4b29      	ldr	r3, [pc, #164]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d210      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b26      	ldr	r3, [pc, #152]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 0207 	bic.w	r2, r3, #7
 80060ea:	4924      	ldr	r1, [pc, #144]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b22      	ldr	r3, [pc, #136]	; (800617c <HAL_RCC_ClockConfig+0x1b0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0307 	and.w	r3, r3, #7
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e036      	b.n	8006172 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4918      	ldr	r1, [pc, #96]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612e:	4b14      	ldr	r3, [pc, #80]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	4910      	ldr	r1, [pc, #64]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006142:	f000 f825 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <HAL_RCC_ClockConfig+0x1b4>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490c      	ldr	r1, [pc, #48]	; (8006184 <HAL_RCC_ClockConfig+0x1b8>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	f003 031f 	and.w	r3, r3, #31
 800615a:	fa22 f303 	lsr.w	r3, r2, r3
 800615e:	4a0a      	ldr	r2, [pc, #40]	; (8006188 <HAL_RCC_ClockConfig+0x1bc>)
 8006160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006162:	4b0a      	ldr	r3, [pc, #40]	; (800618c <HAL_RCC_ClockConfig+0x1c0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4618      	mov	r0, r3
 8006168:	f7fd ff1c 	bl	8003fa4 <HAL_InitTick>
 800616c:	4603      	mov	r3, r0
 800616e:	72fb      	strb	r3, [r7, #11]

  return status;
 8006170:	7afb      	ldrb	r3, [r7, #11]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40022000 	.word	0x40022000
 8006180:	40021000 	.word	0x40021000
 8006184:	0800c8d8 	.word	0x0800c8d8
 8006188:	20000000 	.word	0x20000000
 800618c:	20000004 	.word	0x20000004

08006190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006190:	b480      	push	{r7}
 8006192:	b089      	sub	sp, #36	; 0x24
 8006194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800619e:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80061a8:	4b3b      	ldr	r3, [pc, #236]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x34>
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b0c      	cmp	r3, #12
 80061bc:	d121      	bne.n	8006202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d11e      	bne.n	8006202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80061c4:	4b34      	ldr	r3, [pc, #208]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d107      	bne.n	80061e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80061d0:	4b31      	ldr	r3, [pc, #196]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 80061d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d6:	0a1b      	lsrs	r3, r3, #8
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	61fb      	str	r3, [r7, #28]
 80061de:	e005      	b.n	80061ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80061e0:	4b2d      	ldr	r3, [pc, #180]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	091b      	lsrs	r3, r3, #4
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80061ec:	4a2b      	ldr	r2, [pc, #172]	; (800629c <HAL_RCC_GetSysClockFreq+0x10c>)
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10d      	bne.n	8006218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006200:	e00a      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	2b04      	cmp	r3, #4
 8006206:	d102      	bne.n	800620e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006208:	4b25      	ldr	r3, [pc, #148]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e004      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d101      	bne.n	8006218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006214:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8006216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	2b0c      	cmp	r3, #12
 800621c:	d134      	bne.n	8006288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800621e:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2b02      	cmp	r3, #2
 800622c:	d003      	beq.n	8006236 <HAL_RCC_GetSysClockFreq+0xa6>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b03      	cmp	r3, #3
 8006232:	d003      	beq.n	800623c <HAL_RCC_GetSysClockFreq+0xac>
 8006234:	e005      	b.n	8006242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8006238:	617b      	str	r3, [r7, #20]
      break;
 800623a:	e005      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800623c:	4b19      	ldr	r3, [pc, #100]	; (80062a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800623e:	617b      	str	r3, [r7, #20]
      break;
 8006240:	e002      	b.n	8006248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	617b      	str	r3, [r7, #20]
      break;
 8006246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 0307 	and.w	r3, r3, #7
 8006252:	3301      	adds	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	fb03 f202 	mul.w	r2, r3, r2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800626e:	4b0a      	ldr	r3, [pc, #40]	; (8006298 <HAL_RCC_GetSysClockFreq+0x108>)
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	0e5b      	lsrs	r3, r3, #25
 8006274:	f003 0303 	and.w	r3, r3, #3
 8006278:	3301      	adds	r3, #1
 800627a:	005b      	lsls	r3, r3, #1
 800627c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	fbb2 f3f3 	udiv	r3, r2, r3
 8006286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006288:	69bb      	ldr	r3, [r7, #24]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3724      	adds	r7, #36	; 0x24
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000
 800629c:	0800c8f0 	.word	0x0800c8f0
 80062a0:	00f42400 	.word	0x00f42400
 80062a4:	007a1200 	.word	0x007a1200

080062a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062ac:	4b03      	ldr	r3, [pc, #12]	; (80062bc <HAL_RCC_GetHCLKFreq+0x14>)
 80062ae:	681b      	ldr	r3, [r3, #0]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000000 	.word	0x20000000

080062c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80062c4:	f7ff fff0 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4904      	ldr	r1, [pc, #16]	; (80062e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40021000 	.word	0x40021000
 80062e8:	0800c8e8 	.word	0x0800c8e8

080062ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80062f0:	f7ff ffda 	bl	80062a8 <HAL_RCC_GetHCLKFreq>
 80062f4:	4602      	mov	r2, r0
 80062f6:	4b06      	ldr	r3, [pc, #24]	; (8006310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	0adb      	lsrs	r3, r3, #11
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	4904      	ldr	r1, [pc, #16]	; (8006314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006302:	5ccb      	ldrb	r3, [r1, r3]
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	bd80      	pop	{r7, pc}
 8006310:	40021000 	.word	0x40021000
 8006314:	0800c8e8 	.word	0x0800c8e8

08006318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006324:	4b2a      	ldr	r3, [pc, #168]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006330:	f7ff fa00 	bl	8005734 <HAL_PWREx_GetVoltageRange>
 8006334:	6178      	str	r0, [r7, #20]
 8006336:	e014      	b.n	8006362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006338:	4b25      	ldr	r3, [pc, #148]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800633a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800633c:	4a24      	ldr	r2, [pc, #144]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800633e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006342:	6593      	str	r3, [r2, #88]	; 0x58
 8006344:	4b22      	ldr	r3, [pc, #136]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800634c:	60fb      	str	r3, [r7, #12]
 800634e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006350:	f7ff f9f0 	bl	8005734 <HAL_PWREx_GetVoltageRange>
 8006354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006356:	4b1e      	ldr	r3, [pc, #120]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635a:	4a1d      	ldr	r2, [pc, #116]	; (80063d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800635c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006360:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006368:	d10b      	bne.n	8006382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2b80      	cmp	r3, #128	; 0x80
 800636e:	d919      	bls.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2ba0      	cmp	r3, #160	; 0xa0
 8006374:	d902      	bls.n	800637c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006376:	2302      	movs	r3, #2
 8006378:	613b      	str	r3, [r7, #16]
 800637a:	e013      	b.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800637c:	2301      	movs	r3, #1
 800637e:	613b      	str	r3, [r7, #16]
 8006380:	e010      	b.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2b80      	cmp	r3, #128	; 0x80
 8006386:	d902      	bls.n	800638e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006388:	2303      	movs	r3, #3
 800638a:	613b      	str	r3, [r7, #16]
 800638c:	e00a      	b.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b80      	cmp	r3, #128	; 0x80
 8006392:	d102      	bne.n	800639a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006394:	2302      	movs	r3, #2
 8006396:	613b      	str	r3, [r7, #16]
 8006398:	e004      	b.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b70      	cmp	r3, #112	; 0x70
 800639e:	d101      	bne.n	80063a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80063a0:	2301      	movs	r3, #1
 80063a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f023 0207 	bic.w	r2, r3, #7
 80063ac:	4909      	ldr	r1, [pc, #36]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80063b4:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d001      	beq.n	80063c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40021000 	.word	0x40021000
 80063d4:	40022000 	.word	0x40022000

080063d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80063e0:	2300      	movs	r3, #0
 80063e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80063e4:	2300      	movs	r3, #0
 80063e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d041      	beq.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80063fc:	d02a      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80063fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006402:	d824      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006404:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006408:	d008      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800640a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800640e:	d81e      	bhi.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00a      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006418:	d010      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800641a:	e018      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800641c:	4b86      	ldr	r3, [pc, #536]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	4a85      	ldr	r2, [pc, #532]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006426:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006428:	e015      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	3304      	adds	r3, #4
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fabb 	bl	80069ac <RCCEx_PLLSAI1_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800643a:	e00c      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3320      	adds	r3, #32
 8006440:	2100      	movs	r1, #0
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fba6 	bl	8006b94 <RCCEx_PLLSAI2_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800644c:	e003      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	74fb      	strb	r3, [r7, #19]
      break;
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006456:	7cfb      	ldrb	r3, [r7, #19]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800645c:	4b76      	ldr	r3, [pc, #472]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800645e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006462:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800646a:	4973      	ldr	r1, [pc, #460]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006472:	e001      	b.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d041      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006488:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800648c:	d02a      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800648e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006492:	d824      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006498:	d008      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800649a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800649e:	d81e      	bhi.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80064a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80064a8:	d010      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80064aa:	e018      	b.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80064ac:	4b62      	ldr	r3, [pc, #392]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4a61      	ldr	r2, [pc, #388]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064b8:	e015      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3304      	adds	r3, #4
 80064be:	2100      	movs	r1, #0
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fa73 	bl	80069ac <RCCEx_PLLSAI1_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064ca:	e00c      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	3320      	adds	r3, #32
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fb5e 	bl	8006b94 <RCCEx_PLLSAI2_Config>
 80064d8:	4603      	mov	r3, r0
 80064da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80064dc:	e003      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	74fb      	strb	r3, [r7, #19]
      break;
 80064e2:	e000      	b.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80064e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e6:	7cfb      	ldrb	r3, [r7, #19]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10b      	bne.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80064ec:	4b52      	ldr	r3, [pc, #328]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80064fa:	494f      	ldr	r1, [pc, #316]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006502:	e001      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006504:	7cfb      	ldrb	r3, [r7, #19]
 8006506:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80a0 	beq.w	8006656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006516:	2300      	movs	r3, #0
 8006518:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800651a:	4b47      	ldr	r3, [pc, #284]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006526:	2301      	movs	r3, #1
 8006528:	e000      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006530:	4b41      	ldr	r3, [pc, #260]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006534:	4a40      	ldr	r2, [pc, #256]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800653a:	6593      	str	r3, [r2, #88]	; 0x58
 800653c:	4b3e      	ldr	r3, [pc, #248]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800653e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006548:	2301      	movs	r3, #1
 800654a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800654c:	4b3b      	ldr	r3, [pc, #236]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a3a      	ldr	r2, [pc, #232]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006558:	f7fd fd74 	bl	8004044 <HAL_GetTick>
 800655c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800655e:	e009      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006560:	f7fd fd70 	bl	8004044 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d902      	bls.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	74fb      	strb	r3, [r7, #19]
        break;
 8006572:	e005      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0ef      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8006580:	7cfb      	ldrb	r3, [r7, #19]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d15c      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006586:	4b2c      	ldr	r3, [pc, #176]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006590:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d01f      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d019      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065a4:	4b24      	ldr	r3, [pc, #144]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065b0:	4b21      	ldr	r3, [pc, #132]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b6:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065c0:	4b1d      	ldr	r3, [pc, #116]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065c6:	4a1c      	ldr	r2, [pc, #112]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065d0:	4a19      	ldr	r2, [pc, #100]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d016      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e2:	f7fd fd2f 	bl	8004044 <HAL_GetTick>
 80065e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80065e8:	e00b      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80065ea:	f7fd fd2b 	bl	8004044 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d902      	bls.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	74fb      	strb	r3, [r7, #19]
            break;
 8006600:	e006      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006602:	4b0d      	ldr	r3, [pc, #52]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d0ec      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006610:	7cfb      	ldrb	r3, [r7, #19]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d10c      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006616:	4b08      	ldr	r3, [pc, #32]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006626:	4904      	ldr	r1, [pc, #16]	; (8006638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800662e:	e009      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006630:	7cfb      	ldrb	r3, [r7, #19]
 8006632:	74bb      	strb	r3, [r7, #18]
 8006634:	e006      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006636:	bf00      	nop
 8006638:	40021000 	.word	0x40021000
 800663c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	7cfb      	ldrb	r3, [r7, #19]
 8006642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006644:	7c7b      	ldrb	r3, [r7, #17]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d105      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664a:	4b9e      	ldr	r3, [pc, #632]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800664e:	4a9d      	ldr	r2, [pc, #628]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006654:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00a      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006662:	4b98      	ldr	r3, [pc, #608]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006668:	f023 0203 	bic.w	r2, r3, #3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	4994      	ldr	r1, [pc, #592]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00a      	beq.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006684:	4b8f      	ldr	r3, [pc, #572]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f023 020c 	bic.w	r2, r3, #12
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006692:	498c      	ldr	r1, [pc, #560]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006694:	4313      	orrs	r3, r2
 8006696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0304 	and.w	r3, r3, #4
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00a      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066a6:	4b87      	ldr	r3, [pc, #540]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	4983      	ldr	r1, [pc, #524]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0308 	and.w	r3, r3, #8
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d00a      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066c8:	4b7e      	ldr	r3, [pc, #504]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d6:	497b      	ldr	r1, [pc, #492]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0310 	and.w	r3, r3, #16
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80066ea:	4b76      	ldr	r3, [pc, #472]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f8:	4972      	ldr	r1, [pc, #456]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0320 	and.w	r3, r3, #32
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800670c:	4b6d      	ldr	r3, [pc, #436]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800670e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006712:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671a:	496a      	ldr	r1, [pc, #424]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671c:	4313      	orrs	r3, r2
 800671e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800672e:	4b65      	ldr	r3, [pc, #404]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006734:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	4961      	ldr	r1, [pc, #388]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800673e:	4313      	orrs	r3, r2
 8006740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006750:	4b5c      	ldr	r3, [pc, #368]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675e:	4959      	ldr	r1, [pc, #356]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006760:	4313      	orrs	r3, r2
 8006762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006772:	4b54      	ldr	r3, [pc, #336]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006780:	4950      	ldr	r1, [pc, #320]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006782:	4313      	orrs	r3, r2
 8006784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006794:	4b4b      	ldr	r3, [pc, #300]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800679a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	4948      	ldr	r1, [pc, #288]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067a4:	4313      	orrs	r3, r2
 80067a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067b6:	4b43      	ldr	r3, [pc, #268]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c4:	493f      	ldr	r1, [pc, #252]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d028      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067d8:	4b3a      	ldr	r3, [pc, #232]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e6:	4937      	ldr	r1, [pc, #220]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067f6:	d106      	bne.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f8:	4b32      	ldr	r3, [pc, #200]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	4a31      	ldr	r2, [pc, #196]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006802:	60d3      	str	r3, [r2, #12]
 8006804:	e011      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800680a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800680e:	d10c      	bne.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3304      	adds	r3, #4
 8006814:	2101      	movs	r1, #1
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f8c8 	bl	80069ac <RCCEx_PLLSAI1_Config>
 800681c:	4603      	mov	r3, r0
 800681e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006820:	7cfb      	ldrb	r3, [r7, #19]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006826:	7cfb      	ldrb	r3, [r7, #19]
 8006828:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006832:	2b00      	cmp	r3, #0
 8006834:	d028      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006836:	4b23      	ldr	r3, [pc, #140]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006844:	491f      	ldr	r1, [pc, #124]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006854:	d106      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006856:	4b1b      	ldr	r3, [pc, #108]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006858:	68db      	ldr	r3, [r3, #12]
 800685a:	4a1a      	ldr	r2, [pc, #104]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800685c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006860:	60d3      	str	r3, [r2, #12]
 8006862:	e011      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800686c:	d10c      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3304      	adds	r3, #4
 8006872:	2101      	movs	r1, #1
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f899 	bl	80069ac <RCCEx_PLLSAI1_Config>
 800687a:	4603      	mov	r3, r0
 800687c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800687e:	7cfb      	ldrb	r3, [r7, #19]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006884:	7cfb      	ldrb	r3, [r7, #19]
 8006886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d02b      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006894:	4b0b      	ldr	r3, [pc, #44]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068a2:	4908      	ldr	r1, [pc, #32]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068b2:	d109      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068b4:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	4a02      	ldr	r2, [pc, #8]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80068ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068be:	60d3      	str	r3, [r2, #12]
 80068c0:	e014      	b.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80068d0:	d10c      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	3304      	adds	r3, #4
 80068d6:	2101      	movs	r1, #1
 80068d8:	4618      	mov	r0, r3
 80068da:	f000 f867 	bl	80069ac <RCCEx_PLLSAI1_Config>
 80068de:	4603      	mov	r3, r0
 80068e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80068e2:	7cfb      	ldrb	r3, [r7, #19]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d02f      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068f8:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006906:	4928      	ldr	r1, [pc, #160]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006912:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006916:	d10d      	bne.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	3304      	adds	r3, #4
 800691c:	2102      	movs	r1, #2
 800691e:	4618      	mov	r0, r3
 8006920:	f000 f844 	bl	80069ac <RCCEx_PLLSAI1_Config>
 8006924:	4603      	mov	r3, r0
 8006926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006928:	7cfb      	ldrb	r3, [r7, #19]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d014      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800692e:	7cfb      	ldrb	r3, [r7, #19]
 8006930:	74bb      	strb	r3, [r7, #18]
 8006932:	e011      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006938:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800693c:	d10c      	bne.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3320      	adds	r3, #32
 8006942:	2102      	movs	r1, #2
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f925 	bl	8006b94 <RCCEx_PLLSAI2_Config>
 800694a:	4603      	mov	r3, r0
 800694c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800694e:	7cfb      	ldrb	r3, [r7, #19]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006954:	7cfb      	ldrb	r3, [r7, #19]
 8006956:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00a      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006964:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006972:	490d      	ldr	r1, [pc, #52]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006974:	4313      	orrs	r3, r2
 8006976:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800698c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006996:	4904      	ldr	r1, [pc, #16]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006998:	4313      	orrs	r3, r2
 800699a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800699e:	7cbb      	ldrb	r3, [r7, #18]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3718      	adds	r7, #24
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	40021000 	.word	0x40021000

080069ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80069ba:	4b75      	ldr	r3, [pc, #468]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d018      	beq.n	80069f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80069c6:	4b72      	ldr	r3, [pc, #456]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f003 0203 	and.w	r2, r3, #3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d10d      	bne.n	80069f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
       ||
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80069de:	4b6c      	ldr	r3, [pc, #432]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	091b      	lsrs	r3, r3, #4
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	1c5a      	adds	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
       ||
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d047      	beq.n	8006a82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	73fb      	strb	r3, [r7, #15]
 80069f6:	e044      	b.n	8006a82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b03      	cmp	r3, #3
 80069fe:	d018      	beq.n	8006a32 <RCCEx_PLLSAI1_Config+0x86>
 8006a00:	2b03      	cmp	r3, #3
 8006a02:	d825      	bhi.n	8006a50 <RCCEx_PLLSAI1_Config+0xa4>
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d002      	beq.n	8006a0e <RCCEx_PLLSAI1_Config+0x62>
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d009      	beq.n	8006a20 <RCCEx_PLLSAI1_Config+0x74>
 8006a0c:	e020      	b.n	8006a50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006a0e:	4b60      	ldr	r3, [pc, #384]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0302 	and.w	r3, r3, #2
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d11d      	bne.n	8006a56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a1e:	e01a      	b.n	8006a56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006a20:	4b5b      	ldr	r3, [pc, #364]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d116      	bne.n	8006a5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a30:	e013      	b.n	8006a5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006a32:	4b57      	ldr	r3, [pc, #348]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10f      	bne.n	8006a5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006a3e:	4b54      	ldr	r3, [pc, #336]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d109      	bne.n	8006a5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006a4e:	e006      	b.n	8006a5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	73fb      	strb	r3, [r7, #15]
      break;
 8006a54:	e004      	b.n	8006a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a56:	bf00      	nop
 8006a58:	e002      	b.n	8006a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10d      	bne.n	8006a82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006a66:	4b4a      	ldr	r3, [pc, #296]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6819      	ldr	r1, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	011b      	lsls	r3, r3, #4
 8006a7a:	430b      	orrs	r3, r1
 8006a7c:	4944      	ldr	r1, [pc, #272]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d17d      	bne.n	8006b84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006a88:	4b41      	ldr	r3, [pc, #260]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a40      	ldr	r2, [pc, #256]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a94:	f7fd fad6 	bl	8004044 <HAL_GetTick>
 8006a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006a9a:	e009      	b.n	8006ab0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a9c:	f7fd fad2 	bl	8004044 <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d902      	bls.n	8006ab0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	73fb      	strb	r3, [r7, #15]
        break;
 8006aae:	e005      	b.n	8006abc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006ab0:	4b37      	ldr	r3, [pc, #220]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1ef      	bne.n	8006a9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d160      	bne.n	8006b84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d111      	bne.n	8006aec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ac8:	4b31      	ldr	r3, [pc, #196]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	0211      	lsls	r1, r2, #8
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	68d2      	ldr	r2, [r2, #12]
 8006ade:	0912      	lsrs	r2, r2, #4
 8006ae0:	0452      	lsls	r2, r2, #17
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	492a      	ldr	r1, [pc, #168]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	610b      	str	r3, [r1, #16]
 8006aea:	e027      	b.n	8006b3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d112      	bne.n	8006b18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006af2:	4b27      	ldr	r3, [pc, #156]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006afa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6892      	ldr	r2, [r2, #8]
 8006b02:	0211      	lsls	r1, r2, #8
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6912      	ldr	r2, [r2, #16]
 8006b08:	0852      	lsrs	r2, r2, #1
 8006b0a:	3a01      	subs	r2, #1
 8006b0c:	0552      	lsls	r2, r2, #21
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	491f      	ldr	r1, [pc, #124]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b12:	4313      	orrs	r3, r2
 8006b14:	610b      	str	r3, [r1, #16]
 8006b16:	e011      	b.n	8006b3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006b18:	4b1d      	ldr	r3, [pc, #116]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006b20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6892      	ldr	r2, [r2, #8]
 8006b28:	0211      	lsls	r1, r2, #8
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	6952      	ldr	r2, [r2, #20]
 8006b2e:	0852      	lsrs	r2, r2, #1
 8006b30:	3a01      	subs	r2, #1
 8006b32:	0652      	lsls	r2, r2, #25
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4916      	ldr	r1, [pc, #88]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006b3c:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a13      	ldr	r2, [pc, #76]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b48:	f7fd fa7c 	bl	8004044 <HAL_GetTick>
 8006b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b4e:	e009      	b.n	8006b64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006b50:	f7fd fa78 	bl	8004044 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d902      	bls.n	8006b64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	73fb      	strb	r3, [r7, #15]
          break;
 8006b62:	e005      	b.n	8006b70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d0ef      	beq.n	8006b50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	4904      	ldr	r1, [pc, #16]	; (8006b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	40021000 	.word	0x40021000

08006b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ba2:	4b6a      	ldr	r3, [pc, #424]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d018      	beq.n	8006be0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006bae:	4b67      	ldr	r3, [pc, #412]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	f003 0203 	and.w	r2, r3, #3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d10d      	bne.n	8006bda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006bc6:	4b61      	ldr	r3, [pc, #388]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	091b      	lsrs	r3, r3, #4
 8006bcc:	f003 0307 	and.w	r3, r3, #7
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d047      	beq.n	8006c6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	73fb      	strb	r3, [r7, #15]
 8006bde:	e044      	b.n	8006c6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d018      	beq.n	8006c1a <RCCEx_PLLSAI2_Config+0x86>
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d825      	bhi.n	8006c38 <RCCEx_PLLSAI2_Config+0xa4>
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d002      	beq.n	8006bf6 <RCCEx_PLLSAI2_Config+0x62>
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d009      	beq.n	8006c08 <RCCEx_PLLSAI2_Config+0x74>
 8006bf4:	e020      	b.n	8006c38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d11d      	bne.n	8006c3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c06:	e01a      	b.n	8006c3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006c08:	4b50      	ldr	r3, [pc, #320]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d116      	bne.n	8006c42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c18:	e013      	b.n	8006c42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006c1a:	4b4c      	ldr	r3, [pc, #304]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10f      	bne.n	8006c46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006c26:	4b49      	ldr	r3, [pc, #292]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d109      	bne.n	8006c46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006c36:	e006      	b.n	8006c46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c3c:	e004      	b.n	8006c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c3e:	bf00      	nop
 8006c40:	e002      	b.n	8006c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c42:	bf00      	nop
 8006c44:	e000      	b.n	8006c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10d      	bne.n	8006c6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006c4e:	4b3f      	ldr	r3, [pc, #252]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	011b      	lsls	r3, r3, #4
 8006c62:	430b      	orrs	r3, r1
 8006c64:	4939      	ldr	r1, [pc, #228]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d167      	bne.n	8006d40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006c70:	4b36      	ldr	r3, [pc, #216]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a35      	ldr	r2, [pc, #212]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c7c:	f7fd f9e2 	bl	8004044 <HAL_GetTick>
 8006c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c82:	e009      	b.n	8006c98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c84:	f7fd f9de 	bl	8004044 <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d902      	bls.n	8006c98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	73fb      	strb	r3, [r7, #15]
        break;
 8006c96:	e005      	b.n	8006ca4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006c98:	4b2c      	ldr	r3, [pc, #176]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1ef      	bne.n	8006c84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d14a      	bne.n	8006d40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d111      	bne.n	8006cd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cb0:	4b26      	ldr	r3, [pc, #152]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6892      	ldr	r2, [r2, #8]
 8006cc0:	0211      	lsls	r1, r2, #8
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	68d2      	ldr	r2, [r2, #12]
 8006cc6:	0912      	lsrs	r2, r2, #4
 8006cc8:	0452      	lsls	r2, r2, #17
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	491f      	ldr	r1, [pc, #124]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	614b      	str	r3, [r1, #20]
 8006cd2:	e011      	b.n	8006cf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006cd4:	4b1d      	ldr	r3, [pc, #116]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006cdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	6892      	ldr	r2, [r2, #8]
 8006ce4:	0211      	lsls	r1, r2, #8
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6912      	ldr	r2, [r2, #16]
 8006cea:	0852      	lsrs	r2, r2, #1
 8006cec:	3a01      	subs	r2, #1
 8006cee:	0652      	lsls	r2, r2, #25
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	4916      	ldr	r1, [pc, #88]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006cf8:	4b14      	ldr	r3, [pc, #80]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a13      	ldr	r2, [pc, #76]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d04:	f7fd f99e 	bl	8004044 <HAL_GetTick>
 8006d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d0a:	e009      	b.n	8006d20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006d0c:	f7fd f99a 	bl	8004044 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d902      	bls.n	8006d20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8006d1e:	e005      	b.n	8006d2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0ef      	beq.n	8006d0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006d2c:	7bfb      	ldrb	r3, [r7, #15]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006d32:	4b06      	ldr	r3, [pc, #24]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d34:	695a      	ldr	r2, [r3, #20]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	695b      	ldr	r3, [r3, #20]
 8006d3a:	4904      	ldr	r1, [pc, #16]	; (8006d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3710      	adds	r7, #16
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40021000 	.word	0x40021000

08006d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d101      	bne.n	8006d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e049      	b.n	8006df6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d106      	bne.n	8006d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7fc fea8 	bl	8003acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2202      	movs	r2, #2
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f000 f8fe 	bl	8006f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_ConfigClockSource+0x1c>
 8006e16:	2302      	movs	r3, #2
 8006e18:	e0b6      	b.n	8006f88 <HAL_TIM_ConfigClockSource+0x18a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2202      	movs	r2, #2
 8006e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	d03e      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0xd8>
 8006e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e5c:	f200 8087 	bhi.w	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e64:	f000 8086 	beq.w	8006f74 <HAL_TIM_ConfigClockSource+0x176>
 8006e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e6c:	d87f      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e6e:	2b70      	cmp	r3, #112	; 0x70
 8006e70:	d01a      	beq.n	8006ea8 <HAL_TIM_ConfigClockSource+0xaa>
 8006e72:	2b70      	cmp	r3, #112	; 0x70
 8006e74:	d87b      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e76:	2b60      	cmp	r3, #96	; 0x60
 8006e78:	d050      	beq.n	8006f1c <HAL_TIM_ConfigClockSource+0x11e>
 8006e7a:	2b60      	cmp	r3, #96	; 0x60
 8006e7c:	d877      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e7e:	2b50      	cmp	r3, #80	; 0x50
 8006e80:	d03c      	beq.n	8006efc <HAL_TIM_ConfigClockSource+0xfe>
 8006e82:	2b50      	cmp	r3, #80	; 0x50
 8006e84:	d873      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d058      	beq.n	8006f3c <HAL_TIM_ConfigClockSource+0x13e>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d86f      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e8e:	2b30      	cmp	r3, #48	; 0x30
 8006e90:	d064      	beq.n	8006f5c <HAL_TIM_ConfigClockSource+0x15e>
 8006e92:	2b30      	cmp	r3, #48	; 0x30
 8006e94:	d86b      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d060      	beq.n	8006f5c <HAL_TIM_ConfigClockSource+0x15e>
 8006e9a:	2b20      	cmp	r3, #32
 8006e9c:	d867      	bhi.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d05c      	beq.n	8006f5c <HAL_TIM_ConfigClockSource+0x15e>
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d05a      	beq.n	8006f5c <HAL_TIM_ConfigClockSource+0x15e>
 8006ea6:	e062      	b.n	8006f6e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	6899      	ldr	r1, [r3, #8]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685a      	ldr	r2, [r3, #4]
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f000 f97e 	bl	80071b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006eca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	609a      	str	r2, [r3, #8]
      break;
 8006ed4:	e04f      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6899      	ldr	r1, [r3, #8]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f000 f967 	bl	80071b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	689a      	ldr	r2, [r3, #8]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ef8:	609a      	str	r2, [r3, #8]
      break;
 8006efa:	e03c      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6818      	ldr	r0, [r3, #0]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	f000 f8db 	bl	80070c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2150      	movs	r1, #80	; 0x50
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 f934 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006f1a:	e02c      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6818      	ldr	r0, [r3, #0]
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	6859      	ldr	r1, [r3, #4]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f000 f8fa 	bl	8007122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2160      	movs	r1, #96	; 0x60
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 f924 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006f3a:	e01c      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	6859      	ldr	r1, [r3, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	f000 f8bb 	bl	80070c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2140      	movs	r1, #64	; 0x40
 8006f54:	4618      	mov	r0, r3
 8006f56:	f000 f914 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006f5a:	e00c      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f000 f90b 	bl	8007182 <TIM_ITRx_SetConfig>
      break;
 8006f6c:	e003      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	73fb      	strb	r3, [r7, #15]
      break;
 8006f72:	e000      	b.n	8006f76 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006f74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a40      	ldr	r2, [pc, #256]	; (80070a4 <TIM_Base_SetConfig+0x114>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d013      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fae:	d00f      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3d      	ldr	r2, [pc, #244]	; (80070a8 <TIM_Base_SetConfig+0x118>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00b      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a3c      	ldr	r2, [pc, #240]	; (80070ac <TIM_Base_SetConfig+0x11c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d007      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a3b      	ldr	r2, [pc, #236]	; (80070b0 <TIM_Base_SetConfig+0x120>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d003      	beq.n	8006fd0 <TIM_Base_SetConfig+0x40>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	4a3a      	ldr	r2, [pc, #232]	; (80070b4 <TIM_Base_SetConfig+0x124>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d108      	bne.n	8006fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2f      	ldr	r2, [pc, #188]	; (80070a4 <TIM_Base_SetConfig+0x114>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01f      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff0:	d01b      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a2c      	ldr	r2, [pc, #176]	; (80070a8 <TIM_Base_SetConfig+0x118>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d017      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a2b      	ldr	r2, [pc, #172]	; (80070ac <TIM_Base_SetConfig+0x11c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a2a      	ldr	r2, [pc, #168]	; (80070b0 <TIM_Base_SetConfig+0x120>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00f      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a29      	ldr	r2, [pc, #164]	; (80070b4 <TIM_Base_SetConfig+0x124>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00b      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a28      	ldr	r2, [pc, #160]	; (80070b8 <TIM_Base_SetConfig+0x128>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a27      	ldr	r2, [pc, #156]	; (80070bc <TIM_Base_SetConfig+0x12c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_Base_SetConfig+0x9a>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a26      	ldr	r2, [pc, #152]	; (80070c0 <TIM_Base_SetConfig+0x130>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d108      	bne.n	800703c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a10      	ldr	r2, [pc, #64]	; (80070a4 <TIM_Base_SetConfig+0x114>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d00f      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <TIM_Base_SetConfig+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d00b      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <TIM_Base_SetConfig+0x128>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d007      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a10      	ldr	r2, [pc, #64]	; (80070bc <TIM_Base_SetConfig+0x12c>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d003      	beq.n	8007088 <TIM_Base_SetConfig+0xf8>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a0f      	ldr	r2, [pc, #60]	; (80070c0 <TIM_Base_SetConfig+0x130>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d103      	bne.n	8007090 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	691a      	ldr	r2, [r3, #16]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	615a      	str	r2, [r3, #20]
}
 8007096:	bf00      	nop
 8007098:	3714      	adds	r7, #20
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	40014400 	.word	0x40014400
 80070c0:	40014800 	.word	0x40014800

080070c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 030a 	bic.w	r3, r3, #10
 8007100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f023 0210 	bic.w	r2, r3, #16
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6a1b      	ldr	r3, [r3, #32]
 8007144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800714c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	031b      	lsls	r3, r3, #12
 8007152:	697a      	ldr	r2, [r7, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800715e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	621a      	str	r2, [r3, #32]
}
 8007176:	bf00      	nop
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	f043 0307 	orr.w	r3, r3, #7
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	609a      	str	r2, [r3, #8]
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	021a      	lsls	r2, r3, #8
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	431a      	orrs	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	697a      	ldr	r2, [r7, #20]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	609a      	str	r2, [r3, #8]
}
 80071ec:	bf00      	nop
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800720c:	2302      	movs	r3, #2
 800720e:	e068      	b.n	80072e2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a2e      	ldr	r2, [pc, #184]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2d      	ldr	r2, [pc, #180]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d108      	bne.n	8007256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800724a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	4313      	orrs	r3, r2
 8007254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d01d      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007282:	d018      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d013      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a1a      	ldr	r2, [pc, #104]	; (80072fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d00e      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a18      	ldr	r2, [pc, #96]	; (8007300 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d009      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a13      	ldr	r2, [pc, #76]	; (80072f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a14      	ldr	r2, [pc, #80]	; (8007304 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10c      	bne.n	80072d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68ba      	ldr	r2, [r7, #8]
 80072ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	40012c00 	.word	0x40012c00
 80072f4:	40013400 	.word	0x40013400
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40000800 	.word	0x40000800
 8007300:	40000c00 	.word	0x40000c00
 8007304:	40014000 	.word	0x40014000

08007308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e040      	b.n	800739c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800731e:	2b00      	cmp	r3, #0
 8007320:	d106      	bne.n	8007330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fc fbec 	bl	8003b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2224      	movs	r2, #36	; 0x24
 8007334:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0201 	bic.w	r2, r2, #1
 8007344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fc1e 	bl	8007b88 <UART_SetConfig>
 800734c:	4603      	mov	r3, r0
 800734e:	2b01      	cmp	r3, #1
 8007350:	d101      	bne.n	8007356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e022      	b.n	800739c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d002      	beq.n	8007364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 feca 	bl	80080f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685a      	ldr	r2, [r3, #4]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 ff51 	bl	800823c <UART_CheckIdleState>
 800739a:	4603      	mov	r3, r0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08a      	sub	sp, #40	; 0x28
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d178      	bne.n	80074ac <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_UART_Transmit_DMA+0x22>
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e071      	b.n	80074ae <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d101      	bne.n	80073d8 <HAL_UART_Transmit_DMA+0x34>
 80073d4:	2302      	movs	r3, #2
 80073d6:	e06a      	b.n	80074ae <HAL_UART_Transmit_DMA+0x10a>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2201      	movs	r2, #1
 80073dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	88fa      	ldrh	r2, [r7, #6]
 80073ea:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	88fa      	ldrh	r2, [r7, #6]
 80073f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2221      	movs	r2, #33	; 0x21
 8007402:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d02b      	beq.n	8007464 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007410:	4a29      	ldr	r2, [pc, #164]	; (80074b8 <HAL_UART_Transmit_DMA+0x114>)
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007418:	4a28      	ldr	r2, [pc, #160]	; (80074bc <HAL_UART_Transmit_DMA+0x118>)
 800741a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007420:	4a27      	ldr	r2, [pc, #156]	; (80074c0 <HAL_UART_Transmit_DMA+0x11c>)
 8007422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007428:	2200      	movs	r2, #0
 800742a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007434:	4619      	mov	r1, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3328      	adds	r3, #40	; 0x28
 800743c:	461a      	mov	r2, r3
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	f7fc fffa 	bl	8004438 <HAL_DMA_Start_IT>
 8007444:	4603      	mov	r3, r0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00c      	beq.n	8007464 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2210      	movs	r2, #16
 800744e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2220      	movs	r2, #32
 800745e:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e024      	b.n	80074ae <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2240      	movs	r2, #64	; 0x40
 800746a:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3308      	adds	r3, #8
 800747a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	613b      	str	r3, [r7, #16]
   return(result);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3308      	adds	r3, #8
 8007492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007494:	623a      	str	r2, [r7, #32]
 8007496:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	69f9      	ldr	r1, [r7, #28]
 800749a:	6a3a      	ldr	r2, [r7, #32]
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e5      	bne.n	8007474 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	e000      	b.n	80074ae <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80074ac:	2302      	movs	r3, #2
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	; 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	080086b7 	.word	0x080086b7
 80074bc:	08008751 	.word	0x08008751
 80074c0:	080088c9 	.word	0x080088c9

080074c4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b08a      	sub	sp, #40	; 0x28
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	4613      	mov	r3, r2
 80074d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d142      	bne.n	8007560 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d002      	beq.n	80074e6 <HAL_UART_Receive_DMA+0x22>
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e03b      	b.n	8007562 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_UART_Receive_DMA+0x34>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e034      	b.n	8007562 <HAL_UART_Receive_DMA+0x9e>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a18      	ldr	r2, [pc, #96]	; (800756c <HAL_UART_Receive_DMA+0xa8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d01f      	beq.n	8007550 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d018      	beq.n	8007550 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	613b      	str	r3, [r7, #16]
   return(result);
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007532:	627b      	str	r3, [r7, #36]	; 0x24
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	623b      	str	r3, [r7, #32]
 800753e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	69f9      	ldr	r1, [r7, #28]
 8007542:	6a3a      	ldr	r2, [r7, #32]
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	61bb      	str	r3, [r7, #24]
   return(result);
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e6      	bne.n	800751e <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007550:	88fb      	ldrh	r3, [r7, #6]
 8007552:	461a      	mov	r2, r3
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f000 ff7e 	bl	8008458 <UART_Start_Receive_DMA>
 800755c:	4603      	mov	r3, r0
 800755e:	e000      	b.n	8007562 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007560:	2302      	movs	r3, #2
  }
}
 8007562:	4618      	mov	r0, r3
 8007564:	3728      	adds	r7, #40	; 0x28
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40008000 	.word	0x40008000

08007570 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b0ba      	sub	sp, #232	; 0xe8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007596:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800759a:	f640 030f 	movw	r3, #2063	; 0x80f
 800759e:	4013      	ands	r3, r2
 80075a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80075a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d115      	bne.n	80075d8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80075ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b0:	f003 0320 	and.w	r3, r3, #32
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00f      	beq.n	80075d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d009      	beq.n	80075d8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 82a6 	beq.w	8007b1a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	4798      	blx	r3
      }
      return;
 80075d6:	e2a0      	b.n	8007b1a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80075d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 8117 	beq.w	8007810 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80075e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80075ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80075f2:	4b85      	ldr	r3, [pc, #532]	; (8007808 <HAL_UART_IRQHandler+0x298>)
 80075f4:	4013      	ands	r3, r2
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f000 810a 	beq.w	8007810 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d011      	beq.n	800762c <HAL_UART_IRQHandler+0xbc>
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800760c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2201      	movs	r2, #1
 800761a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007622:	f043 0201 	orr.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d011      	beq.n	800765c <HAL_UART_IRQHandler+0xec>
 8007638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2202      	movs	r2, #2
 800764a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007652:	f043 0204 	orr.w	r2, r3, #4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007660:	f003 0304 	and.w	r3, r3, #4
 8007664:	2b00      	cmp	r3, #0
 8007666:	d011      	beq.n	800768c <HAL_UART_IRQHandler+0x11c>
 8007668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00b      	beq.n	800768c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2204      	movs	r2, #4
 800767a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007682:	f043 0202 	orr.w	r2, r3, #2
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800768c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007690:	f003 0308 	and.w	r3, r3, #8
 8007694:	2b00      	cmp	r3, #0
 8007696:	d017      	beq.n	80076c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d105      	bne.n	80076b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80076a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00b      	beq.n	80076c8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2208      	movs	r2, #8
 80076b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076be:	f043 0208 	orr.w	r2, r3, #8
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80076c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d012      	beq.n	80076fa <HAL_UART_IRQHandler+0x18a>
 80076d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d00c      	beq.n	80076fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80076e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076f0:	f043 0220 	orr.w	r2, r3, #32
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 820c 	beq.w	8007b1e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800770a:	f003 0320 	and.w	r3, r3, #32
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00d      	beq.n	800772e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007734:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b40      	cmp	r3, #64	; 0x40
 8007744:	d005      	beq.n	8007752 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800774a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04f      	beq.n	80077f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 ff4c 	bl	80085f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d141      	bne.n	80077ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3308      	adds	r3, #8
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007770:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007774:	e853 3f00 	ldrex	r3, [r3]
 8007778:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800777c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007792:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007796:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800779e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1d9      	bne.n	8007766 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d013      	beq.n	80077e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	4a13      	ldr	r2, [pc, #76]	; (800780c <HAL_UART_IRQHandler+0x29c>)
 80077c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fc fed4 	bl	8004574 <HAL_DMA_Abort_IT>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d017      	beq.n	8007802 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e0:	e00f      	b.n	8007802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f9ba 	bl	8007b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e8:	e00b      	b.n	8007802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f9b6 	bl	8007b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	e007      	b.n	8007802 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f9b2 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007800:	e18d      	b.n	8007b1e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007802:	bf00      	nop
    return;
 8007804:	e18b      	b.n	8007b1e <HAL_UART_IRQHandler+0x5ae>
 8007806:	bf00      	nop
 8007808:	04000120 	.word	0x04000120
 800780c:	08008945 	.word	0x08008945

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007814:	2b01      	cmp	r3, #1
 8007816:	f040 8146 	bne.w	8007aa6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800781a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781e:	f003 0310 	and.w	r3, r3, #16
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 813f 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	f000 8138 	beq.w	8007aa6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2210      	movs	r2, #16
 800783c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007848:	2b40      	cmp	r3, #64	; 0x40
 800784a:	f040 80b4 	bne.w	80079b6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800785a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 815f 	beq.w	8007b22 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800786a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800786e:	429a      	cmp	r2, r3
 8007870:	f080 8157 	bcs.w	8007b22 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800787a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 8085 	bne.w	800799a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800789c:	e853 3f00 	ldrex	r3, [r3]
 80078a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078ca:	e841 2300 	strex	r3, r2, [r1]
 80078ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1da      	bne.n	8007890 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80078ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3308      	adds	r3, #8
 80078fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80078fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007902:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007904:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e1      	bne.n	80078da <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800793a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800793c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007940:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007962:	e853 3f00 	ldrex	r3, [r3]
 8007966:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800796a:	f023 0310 	bic.w	r3, r3, #16
 800796e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800797c:	65bb      	str	r3, [r7, #88]	; 0x58
 800797e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007982:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800798a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e4      	bne.n	800795a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007994:	4618      	mov	r0, r3
 8007996:	f7fc fdaf 	bl	80044f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f8de 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079b4:	e0b5      	b.n	8007b22 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80a7 	beq.w	8007b26 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80079d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 80a2 	beq.w	8007b26 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a04:	647b      	str	r3, [r7, #68]	; 0x44
 8007a06:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a0c:	e841 2300 	strex	r3, r2, [r1]
 8007a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e4      	bne.n	80079e2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	e853 3f00 	ldrex	r3, [r3]
 8007a26:	623b      	str	r3, [r7, #32]
   return(result);
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	f023 0301 	bic.w	r3, r3, #1
 8007a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a3c:	633a      	str	r2, [r7, #48]	; 0x30
 8007a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e3      	bne.n	8007a18 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	e853 3f00 	ldrex	r3, [r3]
 8007a6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f023 0310 	bic.w	r3, r3, #16
 8007a76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a84:	61fb      	str	r3, [r7, #28]
 8007a86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a88:	69b9      	ldr	r1, [r7, #24]
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	e841 2300 	strex	r3, r2, [r1]
 8007a90:	617b      	str	r3, [r7, #20]
   return(result);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1e4      	bne.n	8007a62 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f866 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007aa4:	e03f      	b.n	8007b26 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00e      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x560>
 8007ab2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d008      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ac6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 ff7b 	bl	80089c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ace:	e02d      	b.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00e      	beq.n	8007afa <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d008      	beq.n	8007afa <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d01c      	beq.n	8007b2a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	4798      	blx	r3
    }
    return;
 8007af8:	e017      	b.n	8007b2a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d012      	beq.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
 8007b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00c      	beq.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 ff2c 	bl	8008970 <UART_EndTransmit_IT>
    return;
 8007b18:	e008      	b.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b1a:	bf00      	nop
 8007b1c:	e006      	b.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b1e:	bf00      	nop
 8007b20:	e004      	b.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b22:	bf00      	nop
 8007b24:	e002      	b.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007b26:	bf00      	nop
 8007b28:	e000      	b.n	8007b2c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007b2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007b2c:	37e8      	adds	r7, #232	; 0xe8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop

08007b34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b50:	bf00      	nop
 8007b52:	370c      	adds	r7, #12
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr

08007b5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	460b      	mov	r3, r1
 8007b7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b8c:	b08a      	sub	sp, #40	; 0x28
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	4ba4      	ldr	r3, [pc, #656]	; (8007e48 <UART_SetConfig+0x2c0>)
 8007bb8:	4013      	ands	r3, r2
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6812      	ldr	r2, [r2, #0]
 8007bbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007bc0:	430b      	orrs	r3, r1
 8007bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	68da      	ldr	r2, [r3, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a99      	ldr	r2, [pc, #612]	; (8007e4c <UART_SetConfig+0x2c4>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c04:	430a      	orrs	r2, r1
 8007c06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a90      	ldr	r2, [pc, #576]	; (8007e50 <UART_SetConfig+0x2c8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d126      	bne.n	8007c60 <UART_SetConfig+0xd8>
 8007c12:	4b90      	ldr	r3, [pc, #576]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	2b03      	cmp	r3, #3
 8007c1e:	d81b      	bhi.n	8007c58 <UART_SetConfig+0xd0>
 8007c20:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <UART_SetConfig+0xa0>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	2301      	movs	r3, #1
 8007c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c3e:	e116      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007c40:	2302      	movs	r3, #2
 8007c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c46:	e112      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4e:	e10e      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c56:	e10a      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5e:	e106      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a7c      	ldr	r2, [pc, #496]	; (8007e58 <UART_SetConfig+0x2d0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d138      	bne.n	8007cdc <UART_SetConfig+0x154>
 8007c6a:	4b7a      	ldr	r3, [pc, #488]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	f003 030c 	and.w	r3, r3, #12
 8007c74:	2b0c      	cmp	r3, #12
 8007c76:	d82d      	bhi.n	8007cd4 <UART_SetConfig+0x14c>
 8007c78:	a201      	add	r2, pc, #4	; (adr r2, 8007c80 <UART_SetConfig+0xf8>)
 8007c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c7e:	bf00      	nop
 8007c80:	08007cb5 	.word	0x08007cb5
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007cd5 	.word	0x08007cd5
 8007c8c:	08007cd5 	.word	0x08007cd5
 8007c90:	08007cc5 	.word	0x08007cc5
 8007c94:	08007cd5 	.word	0x08007cd5
 8007c98:	08007cd5 	.word	0x08007cd5
 8007c9c:	08007cd5 	.word	0x08007cd5
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007ccd 	.word	0x08007ccd
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cba:	e0d8      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007cbc:	2302      	movs	r3, #2
 8007cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc2:	e0d4      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007cc4:	2304      	movs	r3, #4
 8007cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cca:	e0d0      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007ccc:	2308      	movs	r3, #8
 8007cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cd2:	e0cc      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cda:	e0c8      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a5e      	ldr	r2, [pc, #376]	; (8007e5c <UART_SetConfig+0x2d4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d125      	bne.n	8007d32 <UART_SetConfig+0x1aa>
 8007ce6:	4b5b      	ldr	r3, [pc, #364]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007cf0:	2b30      	cmp	r3, #48	; 0x30
 8007cf2:	d016      	beq.n	8007d22 <UART_SetConfig+0x19a>
 8007cf4:	2b30      	cmp	r3, #48	; 0x30
 8007cf6:	d818      	bhi.n	8007d2a <UART_SetConfig+0x1a2>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d00a      	beq.n	8007d12 <UART_SetConfig+0x18a>
 8007cfc:	2b20      	cmp	r3, #32
 8007cfe:	d814      	bhi.n	8007d2a <UART_SetConfig+0x1a2>
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d002      	beq.n	8007d0a <UART_SetConfig+0x182>
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d008      	beq.n	8007d1a <UART_SetConfig+0x192>
 8007d08:	e00f      	b.n	8007d2a <UART_SetConfig+0x1a2>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d10:	e0ad      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d12:	2302      	movs	r3, #2
 8007d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d18:	e0a9      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d1a:	2304      	movs	r3, #4
 8007d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d20:	e0a5      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d22:	2308      	movs	r3, #8
 8007d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d28:	e0a1      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d2a:	2310      	movs	r3, #16
 8007d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d30:	e09d      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a4a      	ldr	r2, [pc, #296]	; (8007e60 <UART_SetConfig+0x2d8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d125      	bne.n	8007d88 <UART_SetConfig+0x200>
 8007d3c:	4b45      	ldr	r3, [pc, #276]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007d46:	2bc0      	cmp	r3, #192	; 0xc0
 8007d48:	d016      	beq.n	8007d78 <UART_SetConfig+0x1f0>
 8007d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007d4c:	d818      	bhi.n	8007d80 <UART_SetConfig+0x1f8>
 8007d4e:	2b80      	cmp	r3, #128	; 0x80
 8007d50:	d00a      	beq.n	8007d68 <UART_SetConfig+0x1e0>
 8007d52:	2b80      	cmp	r3, #128	; 0x80
 8007d54:	d814      	bhi.n	8007d80 <UART_SetConfig+0x1f8>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <UART_SetConfig+0x1d8>
 8007d5a:	2b40      	cmp	r3, #64	; 0x40
 8007d5c:	d008      	beq.n	8007d70 <UART_SetConfig+0x1e8>
 8007d5e:	e00f      	b.n	8007d80 <UART_SetConfig+0x1f8>
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d66:	e082      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6e:	e07e      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d76:	e07a      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d7e:	e076      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d86:	e072      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a35      	ldr	r2, [pc, #212]	; (8007e64 <UART_SetConfig+0x2dc>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d12a      	bne.n	8007de8 <UART_SetConfig+0x260>
 8007d92:	4b30      	ldr	r3, [pc, #192]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da0:	d01a      	beq.n	8007dd8 <UART_SetConfig+0x250>
 8007da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007da6:	d81b      	bhi.n	8007de0 <UART_SetConfig+0x258>
 8007da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dac:	d00c      	beq.n	8007dc8 <UART_SetConfig+0x240>
 8007dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007db2:	d815      	bhi.n	8007de0 <UART_SetConfig+0x258>
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d003      	beq.n	8007dc0 <UART_SetConfig+0x238>
 8007db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbc:	d008      	beq.n	8007dd0 <UART_SetConfig+0x248>
 8007dbe:	e00f      	b.n	8007de0 <UART_SetConfig+0x258>
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc6:	e052      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dce:	e04e      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007dd0:	2304      	movs	r3, #4
 8007dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd6:	e04a      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007dd8:	2308      	movs	r3, #8
 8007dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dde:	e046      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007de0:	2310      	movs	r3, #16
 8007de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007de6:	e042      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a17      	ldr	r2, [pc, #92]	; (8007e4c <UART_SetConfig+0x2c4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d13a      	bne.n	8007e68 <UART_SetConfig+0x2e0>
 8007df2:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <UART_SetConfig+0x2cc>)
 8007df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e00:	d01a      	beq.n	8007e38 <UART_SetConfig+0x2b0>
 8007e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007e06:	d81b      	bhi.n	8007e40 <UART_SetConfig+0x2b8>
 8007e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e0c:	d00c      	beq.n	8007e28 <UART_SetConfig+0x2a0>
 8007e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e12:	d815      	bhi.n	8007e40 <UART_SetConfig+0x2b8>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <UART_SetConfig+0x298>
 8007e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e1c:	d008      	beq.n	8007e30 <UART_SetConfig+0x2a8>
 8007e1e:	e00f      	b.n	8007e40 <UART_SetConfig+0x2b8>
 8007e20:	2300      	movs	r3, #0
 8007e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e26:	e022      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007e28:	2302      	movs	r3, #2
 8007e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e2e:	e01e      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007e30:	2304      	movs	r3, #4
 8007e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e36:	e01a      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007e38:	2308      	movs	r3, #8
 8007e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e3e:	e016      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007e40:	2310      	movs	r3, #16
 8007e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e46:	e012      	b.n	8007e6e <UART_SetConfig+0x2e6>
 8007e48:	efff69f3 	.word	0xefff69f3
 8007e4c:	40008000 	.word	0x40008000
 8007e50:	40013800 	.word	0x40013800
 8007e54:	40021000 	.word	0x40021000
 8007e58:	40004400 	.word	0x40004400
 8007e5c:	40004800 	.word	0x40004800
 8007e60:	40004c00 	.word	0x40004c00
 8007e64:	40005000 	.word	0x40005000
 8007e68:	2310      	movs	r3, #16
 8007e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a9f      	ldr	r2, [pc, #636]	; (80080f0 <UART_SetConfig+0x568>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d17a      	bne.n	8007f6e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e7c:	2b08      	cmp	r3, #8
 8007e7e:	d824      	bhi.n	8007eca <UART_SetConfig+0x342>
 8007e80:	a201      	add	r2, pc, #4	; (adr r2, 8007e88 <UART_SetConfig+0x300>)
 8007e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e86:	bf00      	nop
 8007e88:	08007ead 	.word	0x08007ead
 8007e8c:	08007ecb 	.word	0x08007ecb
 8007e90:	08007eb5 	.word	0x08007eb5
 8007e94:	08007ecb 	.word	0x08007ecb
 8007e98:	08007ebb 	.word	0x08007ebb
 8007e9c:	08007ecb 	.word	0x08007ecb
 8007ea0:	08007ecb 	.word	0x08007ecb
 8007ea4:	08007ecb 	.word	0x08007ecb
 8007ea8:	08007ec3 	.word	0x08007ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007eac:	f7fe fa08 	bl	80062c0 <HAL_RCC_GetPCLK1Freq>
 8007eb0:	61f8      	str	r0, [r7, #28]
        break;
 8007eb2:	e010      	b.n	8007ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb4:	4b8f      	ldr	r3, [pc, #572]	; (80080f4 <UART_SetConfig+0x56c>)
 8007eb6:	61fb      	str	r3, [r7, #28]
        break;
 8007eb8:	e00d      	b.n	8007ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eba:	f7fe f969 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8007ebe:	61f8      	str	r0, [r7, #28]
        break;
 8007ec0:	e009      	b.n	8007ed6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec6:	61fb      	str	r3, [r7, #28]
        break;
 8007ec8:	e005      	b.n	8007ed6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	f000 80fb 	beq.w	80080d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	685a      	ldr	r2, [r3, #4]
 8007ee2:	4613      	mov	r3, r2
 8007ee4:	005b      	lsls	r3, r3, #1
 8007ee6:	4413      	add	r3, r2
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d305      	bcc.n	8007efa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d903      	bls.n	8007f02 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f00:	e0e8      	b.n	80080d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	2200      	movs	r2, #0
 8007f06:	461c      	mov	r4, r3
 8007f08:	4615      	mov	r5, r2
 8007f0a:	f04f 0200 	mov.w	r2, #0
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	022b      	lsls	r3, r5, #8
 8007f14:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007f18:	0222      	lsls	r2, r4, #8
 8007f1a:	68f9      	ldr	r1, [r7, #12]
 8007f1c:	6849      	ldr	r1, [r1, #4]
 8007f1e:	0849      	lsrs	r1, r1, #1
 8007f20:	2000      	movs	r0, #0
 8007f22:	4688      	mov	r8, r1
 8007f24:	4681      	mov	r9, r0
 8007f26:	eb12 0a08 	adds.w	sl, r2, r8
 8007f2a:	eb43 0b09 	adc.w	fp, r3, r9
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	603b      	str	r3, [r7, #0]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f3c:	4650      	mov	r0, sl
 8007f3e:	4659      	mov	r1, fp
 8007f40:	f7f8 fea2 	bl	8000c88 <__aeabi_uldivmod>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4613      	mov	r3, r2
 8007f4a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f52:	d308      	bcc.n	8007f66 <UART_SetConfig+0x3de>
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f5a:	d204      	bcs.n	8007f66 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	60da      	str	r2, [r3, #12]
 8007f64:	e0b6      	b.n	80080d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f6c:	e0b2      	b.n	80080d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	69db      	ldr	r3, [r3, #28]
 8007f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f76:	d15e      	bne.n	8008036 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d828      	bhi.n	8007fd2 <UART_SetConfig+0x44a>
 8007f80:	a201      	add	r2, pc, #4	; (adr r2, 8007f88 <UART_SetConfig+0x400>)
 8007f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f86:	bf00      	nop
 8007f88:	08007fad 	.word	0x08007fad
 8007f8c:	08007fb5 	.word	0x08007fb5
 8007f90:	08007fbd 	.word	0x08007fbd
 8007f94:	08007fd3 	.word	0x08007fd3
 8007f98:	08007fc3 	.word	0x08007fc3
 8007f9c:	08007fd3 	.word	0x08007fd3
 8007fa0:	08007fd3 	.word	0x08007fd3
 8007fa4:	08007fd3 	.word	0x08007fd3
 8007fa8:	08007fcb 	.word	0x08007fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fac:	f7fe f988 	bl	80062c0 <HAL_RCC_GetPCLK1Freq>
 8007fb0:	61f8      	str	r0, [r7, #28]
        break;
 8007fb2:	e014      	b.n	8007fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fb4:	f7fe f99a 	bl	80062ec <HAL_RCC_GetPCLK2Freq>
 8007fb8:	61f8      	str	r0, [r7, #28]
        break;
 8007fba:	e010      	b.n	8007fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fbc:	4b4d      	ldr	r3, [pc, #308]	; (80080f4 <UART_SetConfig+0x56c>)
 8007fbe:	61fb      	str	r3, [r7, #28]
        break;
 8007fc0:	e00d      	b.n	8007fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fc2:	f7fe f8e5 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8007fc6:	61f8      	str	r0, [r7, #28]
        break;
 8007fc8:	e009      	b.n	8007fde <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fce:	61fb      	str	r3, [r7, #28]
        break;
 8007fd0:	e005      	b.n	8007fde <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007fde:	69fb      	ldr	r3, [r7, #28]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d077      	beq.n	80080d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	005a      	lsls	r2, r3, #1
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	441a      	add	r2, r3
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	2b0f      	cmp	r3, #15
 8007ffe:	d916      	bls.n	800802e <UART_SetConfig+0x4a6>
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008006:	d212      	bcs.n	800802e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	b29b      	uxth	r3, r3
 800800c:	f023 030f 	bic.w	r3, r3, #15
 8008010:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	b29b      	uxth	r3, r3
 8008018:	f003 0307 	and.w	r3, r3, #7
 800801c:	b29a      	uxth	r2, r3
 800801e:	8afb      	ldrh	r3, [r7, #22]
 8008020:	4313      	orrs	r3, r2
 8008022:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	8afa      	ldrh	r2, [r7, #22]
 800802a:	60da      	str	r2, [r3, #12]
 800802c:	e052      	b.n	80080d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008034:	e04e      	b.n	80080d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800803a:	2b08      	cmp	r3, #8
 800803c:	d827      	bhi.n	800808e <UART_SetConfig+0x506>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <UART_SetConfig+0x4bc>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	0800808f 	.word	0x0800808f
 8008054:	0800807f 	.word	0x0800807f
 8008058:	0800808f 	.word	0x0800808f
 800805c:	0800808f 	.word	0x0800808f
 8008060:	0800808f 	.word	0x0800808f
 8008064:	08008087 	.word	0x08008087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008068:	f7fe f92a 	bl	80062c0 <HAL_RCC_GetPCLK1Freq>
 800806c:	61f8      	str	r0, [r7, #28]
        break;
 800806e:	e014      	b.n	800809a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008070:	f7fe f93c 	bl	80062ec <HAL_RCC_GetPCLK2Freq>
 8008074:	61f8      	str	r0, [r7, #28]
        break;
 8008076:	e010      	b.n	800809a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <UART_SetConfig+0x56c>)
 800807a:	61fb      	str	r3, [r7, #28]
        break;
 800807c:	e00d      	b.n	800809a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807e:	f7fe f887 	bl	8006190 <HAL_RCC_GetSysClockFreq>
 8008082:	61f8      	str	r0, [r7, #28]
        break;
 8008084:	e009      	b.n	800809a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800808a:	61fb      	str	r3, [r7, #28]
        break;
 800808c:	e005      	b.n	800809a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008098:	bf00      	nop
    }

    if (pclk != 0U)
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d019      	beq.n	80080d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	085a      	lsrs	r2, r3, #1
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	441a      	add	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b0f      	cmp	r3, #15
 80080b8:	d909      	bls.n	80080ce <UART_SetConfig+0x546>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080c0:	d205      	bcs.n	80080ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60da      	str	r2, [r3, #12]
 80080cc:	e002      	b.n	80080d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2200      	movs	r2, #0
 80080d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80080e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3728      	adds	r7, #40	; 0x28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ee:	bf00      	nop
 80080f0:	40008000 	.word	0x40008000
 80080f4:	00f42400 	.word	0x00f42400

080080f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	430a      	orrs	r2, r1
 8008120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	430a      	orrs	r2, r1
 8008142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	f003 0308 	and.w	r3, r3, #8
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	430a      	orrs	r2, r1
 8008186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	f003 0310 	and.w	r3, r3, #16
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	430a      	orrs	r2, r1
 80081a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d01a      	beq.n	800820e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	430a      	orrs	r2, r1
 80081ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081f6:	d10a      	bne.n	800820e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	430a      	orrs	r2, r1
 800820c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00a      	beq.n	8008230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	605a      	str	r2, [r3, #4]
  }
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af02      	add	r7, sp, #8
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800824c:	f7fb fefa 	bl	8004044 <HAL_GetTick>
 8008250:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0308 	and.w	r3, r3, #8
 800825c:	2b08      	cmp	r3, #8
 800825e:	d10e      	bne.n	800827e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008264:	9300      	str	r3, [sp, #0]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f82d 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e023      	b.n	80082c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b04      	cmp	r3, #4
 800828a:	d10e      	bne.n	80082aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800828c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008290:	9300      	str	r3, [sp, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f817 	bl	80082ce <UART_WaitOnFlagUntilTimeout>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e00d      	b.n	80082c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2220      	movs	r2, #32
 80082ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b09c      	sub	sp, #112	; 0x70
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	603b      	str	r3, [r7, #0]
 80082da:	4613      	mov	r3, r2
 80082dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082de:	e0a5      	b.n	800842c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082e6:	f000 80a1 	beq.w	800842c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ea:	f7fb feab 	bl	8004044 <HAL_GetTick>
 80082ee:	4602      	mov	r2, r0
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	1ad3      	subs	r3, r2, r3
 80082f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d302      	bcc.n	8008300 <UART_WaitOnFlagUntilTimeout+0x32>
 80082fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d13e      	bne.n	800837e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008308:	e853 3f00 	ldrex	r3, [r3]
 800830c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800830e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008314:	667b      	str	r3, [r7, #100]	; 0x64
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	461a      	mov	r2, r3
 800831c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800831e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008320:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008322:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008324:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008326:	e841 2300 	strex	r3, r2, [r1]
 800832a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800832c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e6      	bne.n	8008300 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3308      	adds	r3, #8
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833c:	e853 3f00 	ldrex	r3, [r3]
 8008340:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	663b      	str	r3, [r7, #96]	; 0x60
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008352:	64ba      	str	r2, [r7, #72]	; 0x48
 8008354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008356:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008358:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835a:	e841 2300 	strex	r3, r2, [r1]
 800835e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008362:	2b00      	cmp	r3, #0
 8008364:	d1e5      	bne.n	8008332 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2220      	movs	r2, #32
 800836a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e067      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0304 	and.w	r3, r3, #4
 8008388:	2b00      	cmp	r3, #0
 800838a:	d04f      	beq.n	800842c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800839a:	d147      	bne.n	800842c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80083ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	461a      	mov	r2, r3
 80083c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
 80083c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80083ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80083d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e6      	bne.n	80083a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3308      	adds	r3, #8
 80083de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	613b      	str	r3, [r7, #16]
   return(result);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f023 0301 	bic.w	r3, r3, #1
 80083ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3308      	adds	r3, #8
 80083f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80083f8:	623a      	str	r2, [r7, #32]
 80083fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	69f9      	ldr	r1, [r7, #28]
 80083fe:	6a3a      	ldr	r2, [r7, #32]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	61bb      	str	r3, [r7, #24]
   return(result);
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e5      	bne.n	80083d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2220      	movs	r2, #32
 8008410:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2220      	movs	r2, #32
 8008416:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2220      	movs	r2, #32
 800841c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e010      	b.n	800844e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69da      	ldr	r2, [r3, #28]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	4013      	ands	r3, r2
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	429a      	cmp	r2, r3
 800843a:	bf0c      	ite	eq
 800843c:	2301      	moveq	r3, #1
 800843e:	2300      	movne	r3, #0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	461a      	mov	r2, r3
 8008444:	79fb      	ldrb	r3, [r7, #7]
 8008446:	429a      	cmp	r2, r3
 8008448:	f43f af4a 	beq.w	80082e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3770      	adds	r7, #112	; 0x70
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b096      	sub	sp, #88	; 0x58
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2222      	movs	r2, #34	; 0x22
 8008480:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008486:	2b00      	cmp	r3, #0
 8008488:	d02b      	beq.n	80084e2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848e:	4a42      	ldr	r2, [pc, #264]	; (8008598 <UART_Start_Receive_DMA+0x140>)
 8008490:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008496:	4a41      	ldr	r2, [pc, #260]	; (800859c <UART_Start_Receive_DMA+0x144>)
 8008498:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849e:	4a40      	ldr	r2, [pc, #256]	; (80085a0 <UART_Start_Receive_DMA+0x148>)
 80084a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	2200      	movs	r2, #0
 80084a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	3324      	adds	r3, #36	; 0x24
 80084b4:	4619      	mov	r1, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ba:	461a      	mov	r2, r3
 80084bc:	88fb      	ldrh	r3, [r7, #6]
 80084be:	f7fb ffbb 	bl	8004438 <HAL_DMA_Start_IT>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00c      	beq.n	80084e2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2210      	movs	r2, #16
 80084cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2220      	movs	r2, #32
 80084dc:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e055      	b.n	800858e <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d018      	beq.n	8008524 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008506:	657b      	str	r3, [r7, #84]	; 0x54
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	461a      	mov	r2, r3
 800850e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008510:	64bb      	str	r3, [r7, #72]	; 0x48
 8008512:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800851e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e6      	bne.n	80084f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	f043 0301 	orr.w	r3, r3, #1
 800853a:	653b      	str	r3, [r7, #80]	; 0x50
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	3308      	adds	r3, #8
 8008542:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008544:	637a      	str	r2, [r7, #52]	; 0x34
 8008546:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008548:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800854a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854c:	e841 2300 	strex	r3, r2, [r1]
 8008550:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d1e5      	bne.n	8008524 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3308      	adds	r3, #8
 800855e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	613b      	str	r3, [r7, #16]
   return(result);
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3308      	adds	r3, #8
 8008576:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008578:	623a      	str	r2, [r7, #32]
 800857a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	69f9      	ldr	r1, [r7, #28]
 800857e:	6a3a      	ldr	r2, [r7, #32]
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	61bb      	str	r3, [r7, #24]
   return(result);
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e5      	bne.n	8008558 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3758      	adds	r7, #88	; 0x58
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	0800876d 	.word	0x0800876d
 800859c:	08008891 	.word	0x08008891
 80085a0:	080088c9 	.word	0x080088c9

080085a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b089      	sub	sp, #36	; 0x24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	e853 3f00 	ldrex	r3, [r3]
 80085b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80085c0:	61fb      	str	r3, [r7, #28]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	61bb      	str	r3, [r7, #24]
 80085cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	6979      	ldr	r1, [r7, #20]
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	e841 2300 	strex	r3, r2, [r1]
 80085d6:	613b      	str	r3, [r7, #16]
   return(result);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1e6      	bne.n	80085ac <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2220      	movs	r2, #32
 80085e2:	679a      	str	r2, [r3, #120]	; 0x78
}
 80085e4:	bf00      	nop
 80085e6:	3724      	adds	r7, #36	; 0x24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b095      	sub	sp, #84	; 0x54
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800860c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008616:	643b      	str	r3, [r7, #64]	; 0x40
 8008618:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800861a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800861c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800861e:	e841 2300 	strex	r3, r2, [r1]
 8008622:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1e6      	bne.n	80085f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	3308      	adds	r3, #8
 8008630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6a3b      	ldr	r3, [r7, #32]
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	61fb      	str	r3, [r7, #28]
   return(result);
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	f023 0301 	bic.w	r3, r3, #1
 8008640:	64bb      	str	r3, [r7, #72]	; 0x48
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	3308      	adds	r3, #8
 8008648:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800864a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800864c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e5      	bne.n	800862a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008662:	2b01      	cmp	r3, #1
 8008664:	d118      	bne.n	8008698 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	e853 3f00 	ldrex	r3, [r3]
 8008672:	60bb      	str	r3, [r7, #8]
   return(result);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0310 	bic.w	r3, r3, #16
 800867a:	647b      	str	r3, [r7, #68]	; 0x44
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	461a      	mov	r2, r3
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	61bb      	str	r3, [r7, #24]
 8008686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	6979      	ldr	r1, [r7, #20]
 800868a:	69ba      	ldr	r2, [r7, #24]
 800868c:	e841 2300 	strex	r3, r2, [r1]
 8008690:	613b      	str	r3, [r7, #16]
   return(result);
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1e6      	bne.n	8008666 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2220      	movs	r2, #32
 800869c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086aa:	bf00      	nop
 80086ac:	3754      	adds	r7, #84	; 0x54
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b090      	sub	sp, #64	; 0x40
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0320 	and.w	r3, r3, #32
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d137      	bne.n	8008742 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80086d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	3308      	adds	r3, #8
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	623b      	str	r3, [r7, #32]
   return(result);
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80086f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3308      	adds	r3, #8
 80086f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086fa:	633a      	str	r2, [r7, #48]	; 0x30
 80086fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008702:	e841 2300 	strex	r3, r2, [r1]
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1e5      	bne.n	80086da <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800870e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	60fb      	str	r3, [r7, #12]
   return(result);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008722:	637b      	str	r3, [r7, #52]	; 0x34
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	69b9      	ldr	r1, [r7, #24]
 8008732:	69fa      	ldr	r2, [r7, #28]
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	617b      	str	r3, [r7, #20]
   return(result);
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008740:	e002      	b.n	8008748 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008742:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008744:	f7fa face 	bl	8002ce4 <HAL_UART_TxCpltCallback>
}
 8008748:	bf00      	nop
 800874a:	3740      	adds	r7, #64	; 0x40
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800875e:	68f8      	ldr	r0, [r7, #12]
 8008760:	f7ff f9e8 	bl	8007b34 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b09c      	sub	sp, #112	; 0x70
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0320 	and.w	r3, r3, #32
 8008784:	2b00      	cmp	r3, #0
 8008786:	d170      	bne.n	800886a <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8008788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800878a:	2200      	movs	r2, #0
 800878c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800879e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80087a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e6      	bne.n	8008790 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	3308      	adds	r3, #8
 80087c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087cc:	e853 3f00 	ldrex	r3, [r3]
 80087d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d4:	f023 0301 	bic.w	r3, r3, #1
 80087d8:	667b      	str	r3, [r7, #100]	; 0x64
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087e2:	647a      	str	r2, [r7, #68]	; 0x44
 80087e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ea:	e841 2300 	strex	r3, r2, [r1]
 80087ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d1e5      	bne.n	80087c2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008800:	e853 3f00 	ldrex	r3, [r3]
 8008804:	623b      	str	r3, [r7, #32]
   return(result);
 8008806:	6a3b      	ldr	r3, [r7, #32]
 8008808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800880c:	663b      	str	r3, [r7, #96]	; 0x60
 800880e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008816:	633a      	str	r2, [r7, #48]	; 0x30
 8008818:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800881c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800881e:	e841 2300 	strex	r3, r2, [r1]
 8008822:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1e5      	bne.n	80087f6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800882a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800882c:	2220      	movs	r2, #32
 800882e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008834:	2b01      	cmp	r3, #1
 8008836:	d118      	bne.n	800886a <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	60fb      	str	r3, [r7, #12]
   return(result);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f023 0310 	bic.w	r3, r3, #16
 800884c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800884e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008856:	61fb      	str	r3, [r7, #28]
 8008858:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	69b9      	ldr	r1, [r7, #24]
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	617b      	str	r3, [r7, #20]
   return(result);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e6      	bne.n	8008838 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800886a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800886c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800886e:	2b01      	cmp	r3, #1
 8008870:	d107      	bne.n	8008882 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008872:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008878:	4619      	mov	r1, r3
 800887a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800887c:	f7ff f978 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008880:	e002      	b.n	8008888 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8008882:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008884:	f7fa fa40 	bl	8002d08 <HAL_UART_RxCpltCallback>
}
 8008888:	bf00      	nop
 800888a:	3770      	adds	r7, #112	; 0x70
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d109      	bne.n	80088ba <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	4619      	mov	r1, r3
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff f95c 	bl	8007b70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088b8:	e002      	b.n	80088c0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff f944 	bl	8007b48 <HAL_UART_RxHalfCpltCallback>
}
 80088c0:	bf00      	nop
 80088c2:	3710      	adds	r7, #16
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088da:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ec:	2b80      	cmp	r3, #128	; 0x80
 80088ee:	d109      	bne.n	8008904 <UART_DMAError+0x3c>
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	2b21      	cmp	r3, #33	; 0x21
 80088f4:	d106      	bne.n	8008904 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	f7ff fe50 	bl	80085a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890e:	2b40      	cmp	r3, #64	; 0x40
 8008910:	d109      	bne.n	8008926 <UART_DMAError+0x5e>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2b22      	cmp	r3, #34	; 0x22
 8008916:	d106      	bne.n	8008926 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	2200      	movs	r2, #0
 800891c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008920:	6978      	ldr	r0, [r7, #20]
 8008922:	f7ff fe65 	bl	80085f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800892c:	f043 0210 	orr.w	r2, r3, #16
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008936:	6978      	ldr	r0, [r7, #20]
 8008938:	f7ff f910 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800893c:	bf00      	nop
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f7ff f8fa 	bl	8007b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008968:	bf00      	nop
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	e853 3f00 	ldrex	r3, [r3]
 8008984:	60bb      	str	r3, [r7, #8]
   return(result);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800898c:	61fb      	str	r3, [r7, #28]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	461a      	mov	r2, r3
 8008994:	69fb      	ldr	r3, [r7, #28]
 8008996:	61bb      	str	r3, [r7, #24]
 8008998:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	e841 2300 	strex	r3, r2, [r1]
 80089a2:	613b      	str	r3, [r7, #16]
   return(result);
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d1e6      	bne.n	8008978 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7fa f994 	bl	8002ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089bc:	bf00      	nop
 80089be:	3720      	adds	r7, #32
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <__cxa_pure_virtual>:
 80089d8:	b508      	push	{r3, lr}
 80089da:	f000 f80d 	bl	80089f8 <_ZSt9terminatev>

080089de <_ZN10__cxxabiv111__terminateEPFvvE>:
 80089de:	b508      	push	{r3, lr}
 80089e0:	4780      	blx	r0
 80089e2:	f000 ff2b 	bl	800983c <abort>
	...

080089e8 <_ZSt13get_terminatev>:
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <_ZSt13get_terminatev+0xc>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	f3bf 8f5b 	dmb	ish
 80089f0:	4770      	bx	lr
 80089f2:	bf00      	nop
 80089f4:	2000000c 	.word	0x2000000c

080089f8 <_ZSt9terminatev>:
 80089f8:	b508      	push	{r3, lr}
 80089fa:	f7ff fff5 	bl	80089e8 <_ZSt13get_terminatev>
 80089fe:	f7ff ffee 	bl	80089de <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08008a04 <pow>:
 8008a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a06:	ed2d 8b02 	vpush	{d8}
 8008a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8008a0e:	eef0 8a60 	vmov.f32	s17, s1
 8008a12:	ec55 4b11 	vmov	r4, r5, d1
 8008a16:	f000 f867 	bl	8008ae8 <__ieee754_pow>
 8008a1a:	4622      	mov	r2, r4
 8008a1c:	462b      	mov	r3, r5
 8008a1e:	4620      	mov	r0, r4
 8008a20:	4629      	mov	r1, r5
 8008a22:	ec57 6b10 	vmov	r6, r7, d0
 8008a26:	f7f8 f881 	bl	8000b2c <__aeabi_dcmpun>
 8008a2a:	2800      	cmp	r0, #0
 8008a2c:	d13b      	bne.n	8008aa6 <pow+0xa2>
 8008a2e:	ec51 0b18 	vmov	r0, r1, d8
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	f7f8 f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a3a:	b1b8      	cbz	r0, 8008a6c <pow+0x68>
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	4620      	mov	r0, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f8 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d146      	bne.n	8008ada <pow+0xd6>
 8008a4c:	ec45 4b10 	vmov	d0, r4, r5
 8008a50:	f000 fe63 	bl	800971a <finite>
 8008a54:	b338      	cbz	r0, 8008aa6 <pow+0xa2>
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f8 f83d 	bl	8000adc <__aeabi_dcmplt>
 8008a62:	b300      	cbz	r0, 8008aa6 <pow+0xa2>
 8008a64:	f000 fef2 	bl	800984c <__errno>
 8008a68:	2322      	movs	r3, #34	; 0x22
 8008a6a:	e01b      	b.n	8008aa4 <pow+0xa0>
 8008a6c:	ec47 6b10 	vmov	d0, r6, r7
 8008a70:	f000 fe53 	bl	800971a <finite>
 8008a74:	b9e0      	cbnz	r0, 8008ab0 <pow+0xac>
 8008a76:	eeb0 0a48 	vmov.f32	s0, s16
 8008a7a:	eef0 0a68 	vmov.f32	s1, s17
 8008a7e:	f000 fe4c 	bl	800971a <finite>
 8008a82:	b1a8      	cbz	r0, 8008ab0 <pow+0xac>
 8008a84:	ec45 4b10 	vmov	d0, r4, r5
 8008a88:	f000 fe47 	bl	800971a <finite>
 8008a8c:	b180      	cbz	r0, 8008ab0 <pow+0xac>
 8008a8e:	4632      	mov	r2, r6
 8008a90:	463b      	mov	r3, r7
 8008a92:	4630      	mov	r0, r6
 8008a94:	4639      	mov	r1, r7
 8008a96:	f7f8 f849 	bl	8000b2c <__aeabi_dcmpun>
 8008a9a:	2800      	cmp	r0, #0
 8008a9c:	d0e2      	beq.n	8008a64 <pow+0x60>
 8008a9e:	f000 fed5 	bl	800984c <__errno>
 8008aa2:	2321      	movs	r3, #33	; 0x21
 8008aa4:	6003      	str	r3, [r0, #0]
 8008aa6:	ecbd 8b02 	vpop	{d8}
 8008aaa:	ec47 6b10 	vmov	d0, r6, r7
 8008aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	4639      	mov	r1, r7
 8008ab8:	f7f8 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d0f2      	beq.n	8008aa6 <pow+0xa2>
 8008ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ac4:	eef0 0a68 	vmov.f32	s1, s17
 8008ac8:	f000 fe27 	bl	800971a <finite>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d0ea      	beq.n	8008aa6 <pow+0xa2>
 8008ad0:	ec45 4b10 	vmov	d0, r4, r5
 8008ad4:	f000 fe21 	bl	800971a <finite>
 8008ad8:	e7c3      	b.n	8008a62 <pow+0x5e>
 8008ada:	4f01      	ldr	r7, [pc, #4]	; (8008ae0 <pow+0xdc>)
 8008adc:	2600      	movs	r6, #0
 8008ade:	e7e2      	b.n	8008aa6 <pow+0xa2>
 8008ae0:	3ff00000 	.word	0x3ff00000
 8008ae4:	00000000 	.word	0x00000000

08008ae8 <__ieee754_pow>:
 8008ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aec:	ed2d 8b06 	vpush	{d8-d10}
 8008af0:	b089      	sub	sp, #36	; 0x24
 8008af2:	ed8d 1b00 	vstr	d1, [sp]
 8008af6:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008afa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008afe:	ea58 0102 	orrs.w	r1, r8, r2
 8008b02:	ec57 6b10 	vmov	r6, r7, d0
 8008b06:	d115      	bne.n	8008b34 <__ieee754_pow+0x4c>
 8008b08:	19b3      	adds	r3, r6, r6
 8008b0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008b0e:	4152      	adcs	r2, r2
 8008b10:	4299      	cmp	r1, r3
 8008b12:	4b89      	ldr	r3, [pc, #548]	; (8008d38 <__ieee754_pow+0x250>)
 8008b14:	4193      	sbcs	r3, r2
 8008b16:	f080 84d2 	bcs.w	80094be <__ieee754_pow+0x9d6>
 8008b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b1e:	4630      	mov	r0, r6
 8008b20:	4639      	mov	r1, r7
 8008b22:	f7f7 fbb3 	bl	800028c <__adddf3>
 8008b26:	ec41 0b10 	vmov	d0, r0, r1
 8008b2a:	b009      	add	sp, #36	; 0x24
 8008b2c:	ecbd 8b06 	vpop	{d8-d10}
 8008b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b34:	4b81      	ldr	r3, [pc, #516]	; (8008d3c <__ieee754_pow+0x254>)
 8008b36:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008b3a:	429c      	cmp	r4, r3
 8008b3c:	ee10 aa10 	vmov	sl, s0
 8008b40:	463d      	mov	r5, r7
 8008b42:	dc06      	bgt.n	8008b52 <__ieee754_pow+0x6a>
 8008b44:	d101      	bne.n	8008b4a <__ieee754_pow+0x62>
 8008b46:	2e00      	cmp	r6, #0
 8008b48:	d1e7      	bne.n	8008b1a <__ieee754_pow+0x32>
 8008b4a:	4598      	cmp	r8, r3
 8008b4c:	dc01      	bgt.n	8008b52 <__ieee754_pow+0x6a>
 8008b4e:	d10f      	bne.n	8008b70 <__ieee754_pow+0x88>
 8008b50:	b172      	cbz	r2, 8008b70 <__ieee754_pow+0x88>
 8008b52:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8008b56:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8008b5a:	ea55 050a 	orrs.w	r5, r5, sl
 8008b5e:	d1dc      	bne.n	8008b1a <__ieee754_pow+0x32>
 8008b60:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b64:	18db      	adds	r3, r3, r3
 8008b66:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8008b6a:	4152      	adcs	r2, r2
 8008b6c:	429d      	cmp	r5, r3
 8008b6e:	e7d0      	b.n	8008b12 <__ieee754_pow+0x2a>
 8008b70:	2d00      	cmp	r5, #0
 8008b72:	da3b      	bge.n	8008bec <__ieee754_pow+0x104>
 8008b74:	4b72      	ldr	r3, [pc, #456]	; (8008d40 <__ieee754_pow+0x258>)
 8008b76:	4598      	cmp	r8, r3
 8008b78:	dc51      	bgt.n	8008c1e <__ieee754_pow+0x136>
 8008b7a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8008b7e:	4598      	cmp	r8, r3
 8008b80:	f340 84ac 	ble.w	80094dc <__ieee754_pow+0x9f4>
 8008b84:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008b88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008b8c:	2b14      	cmp	r3, #20
 8008b8e:	dd0f      	ble.n	8008bb0 <__ieee754_pow+0xc8>
 8008b90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8008b94:	fa22 f103 	lsr.w	r1, r2, r3
 8008b98:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	f040 849d 	bne.w	80094dc <__ieee754_pow+0x9f4>
 8008ba2:	f001 0101 	and.w	r1, r1, #1
 8008ba6:	f1c1 0302 	rsb	r3, r1, #2
 8008baa:	9304      	str	r3, [sp, #16]
 8008bac:	b182      	cbz	r2, 8008bd0 <__ieee754_pow+0xe8>
 8008bae:	e05f      	b.n	8008c70 <__ieee754_pow+0x188>
 8008bb0:	2a00      	cmp	r2, #0
 8008bb2:	d15b      	bne.n	8008c6c <__ieee754_pow+0x184>
 8008bb4:	f1c3 0314 	rsb	r3, r3, #20
 8008bb8:	fa48 f103 	asr.w	r1, r8, r3
 8008bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc0:	4543      	cmp	r3, r8
 8008bc2:	f040 8488 	bne.w	80094d6 <__ieee754_pow+0x9ee>
 8008bc6:	f001 0101 	and.w	r1, r1, #1
 8008bca:	f1c1 0302 	rsb	r3, r1, #2
 8008bce:	9304      	str	r3, [sp, #16]
 8008bd0:	4b5c      	ldr	r3, [pc, #368]	; (8008d44 <__ieee754_pow+0x25c>)
 8008bd2:	4598      	cmp	r8, r3
 8008bd4:	d132      	bne.n	8008c3c <__ieee754_pow+0x154>
 8008bd6:	f1b9 0f00 	cmp.w	r9, #0
 8008bda:	f280 8478 	bge.w	80094ce <__ieee754_pow+0x9e6>
 8008bde:	4959      	ldr	r1, [pc, #356]	; (8008d44 <__ieee754_pow+0x25c>)
 8008be0:	4632      	mov	r2, r6
 8008be2:	463b      	mov	r3, r7
 8008be4:	2000      	movs	r0, #0
 8008be6:	f7f7 fe31 	bl	800084c <__aeabi_ddiv>
 8008bea:	e79c      	b.n	8008b26 <__ieee754_pow+0x3e>
 8008bec:	2300      	movs	r3, #0
 8008bee:	9304      	str	r3, [sp, #16]
 8008bf0:	2a00      	cmp	r2, #0
 8008bf2:	d13d      	bne.n	8008c70 <__ieee754_pow+0x188>
 8008bf4:	4b51      	ldr	r3, [pc, #324]	; (8008d3c <__ieee754_pow+0x254>)
 8008bf6:	4598      	cmp	r8, r3
 8008bf8:	d1ea      	bne.n	8008bd0 <__ieee754_pow+0xe8>
 8008bfa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008bfe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008c02:	ea53 030a 	orrs.w	r3, r3, sl
 8008c06:	f000 845a 	beq.w	80094be <__ieee754_pow+0x9d6>
 8008c0a:	4b4f      	ldr	r3, [pc, #316]	; (8008d48 <__ieee754_pow+0x260>)
 8008c0c:	429c      	cmp	r4, r3
 8008c0e:	dd08      	ble.n	8008c22 <__ieee754_pow+0x13a>
 8008c10:	f1b9 0f00 	cmp.w	r9, #0
 8008c14:	f2c0 8457 	blt.w	80094c6 <__ieee754_pow+0x9de>
 8008c18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c1c:	e783      	b.n	8008b26 <__ieee754_pow+0x3e>
 8008c1e:	2302      	movs	r3, #2
 8008c20:	e7e5      	b.n	8008bee <__ieee754_pow+0x106>
 8008c22:	f1b9 0f00 	cmp.w	r9, #0
 8008c26:	f04f 0000 	mov.w	r0, #0
 8008c2a:	f04f 0100 	mov.w	r1, #0
 8008c2e:	f6bf af7a 	bge.w	8008b26 <__ieee754_pow+0x3e>
 8008c32:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008c36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008c3a:	e774      	b.n	8008b26 <__ieee754_pow+0x3e>
 8008c3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008c40:	d106      	bne.n	8008c50 <__ieee754_pow+0x168>
 8008c42:	4632      	mov	r2, r6
 8008c44:	463b      	mov	r3, r7
 8008c46:	4630      	mov	r0, r6
 8008c48:	4639      	mov	r1, r7
 8008c4a:	f7f7 fcd5 	bl	80005f8 <__aeabi_dmul>
 8008c4e:	e76a      	b.n	8008b26 <__ieee754_pow+0x3e>
 8008c50:	4b3e      	ldr	r3, [pc, #248]	; (8008d4c <__ieee754_pow+0x264>)
 8008c52:	4599      	cmp	r9, r3
 8008c54:	d10c      	bne.n	8008c70 <__ieee754_pow+0x188>
 8008c56:	2d00      	cmp	r5, #0
 8008c58:	db0a      	blt.n	8008c70 <__ieee754_pow+0x188>
 8008c5a:	ec47 6b10 	vmov	d0, r6, r7
 8008c5e:	b009      	add	sp, #36	; 0x24
 8008c60:	ecbd 8b06 	vpop	{d8-d10}
 8008c64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c68:	f000 bc6c 	b.w	8009544 <__ieee754_sqrt>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9304      	str	r3, [sp, #16]
 8008c70:	ec47 6b10 	vmov	d0, r6, r7
 8008c74:	f000 fd48 	bl	8009708 <fabs>
 8008c78:	ec51 0b10 	vmov	r0, r1, d0
 8008c7c:	f1ba 0f00 	cmp.w	sl, #0
 8008c80:	d129      	bne.n	8008cd6 <__ieee754_pow+0x1ee>
 8008c82:	b124      	cbz	r4, 8008c8e <__ieee754_pow+0x1a6>
 8008c84:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <__ieee754_pow+0x25c>)
 8008c86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d123      	bne.n	8008cd6 <__ieee754_pow+0x1ee>
 8008c8e:	f1b9 0f00 	cmp.w	r9, #0
 8008c92:	da05      	bge.n	8008ca0 <__ieee754_pow+0x1b8>
 8008c94:	4602      	mov	r2, r0
 8008c96:	460b      	mov	r3, r1
 8008c98:	2000      	movs	r0, #0
 8008c9a:	492a      	ldr	r1, [pc, #168]	; (8008d44 <__ieee754_pow+0x25c>)
 8008c9c:	f7f7 fdd6 	bl	800084c <__aeabi_ddiv>
 8008ca0:	2d00      	cmp	r5, #0
 8008ca2:	f6bf af40 	bge.w	8008b26 <__ieee754_pow+0x3e>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008cac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008cb0:	4323      	orrs	r3, r4
 8008cb2:	d108      	bne.n	8008cc6 <__ieee754_pow+0x1de>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4619      	mov	r1, r3
 8008cbc:	f7f7 fae4 	bl	8000288 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	e78f      	b.n	8008be6 <__ieee754_pow+0xfe>
 8008cc6:	9b04      	ldr	r3, [sp, #16]
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	f47f af2c 	bne.w	8008b26 <__ieee754_pow+0x3e>
 8008cce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	e727      	b.n	8008b26 <__ieee754_pow+0x3e>
 8008cd6:	0feb      	lsrs	r3, r5, #31
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	9306      	str	r3, [sp, #24]
 8008cdc:	9a06      	ldr	r2, [sp, #24]
 8008cde:	9b04      	ldr	r3, [sp, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	d102      	bne.n	8008cea <__ieee754_pow+0x202>
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	463b      	mov	r3, r7
 8008ce8:	e7e6      	b.n	8008cb8 <__ieee754_pow+0x1d0>
 8008cea:	4b19      	ldr	r3, [pc, #100]	; (8008d50 <__ieee754_pow+0x268>)
 8008cec:	4598      	cmp	r8, r3
 8008cee:	f340 80fb 	ble.w	8008ee8 <__ieee754_pow+0x400>
 8008cf2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008cf6:	4598      	cmp	r8, r3
 8008cf8:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <__ieee754_pow+0x260>)
 8008cfa:	dd0c      	ble.n	8008d16 <__ieee754_pow+0x22e>
 8008cfc:	429c      	cmp	r4, r3
 8008cfe:	dc0f      	bgt.n	8008d20 <__ieee754_pow+0x238>
 8008d00:	f1b9 0f00 	cmp.w	r9, #0
 8008d04:	da0f      	bge.n	8008d26 <__ieee754_pow+0x23e>
 8008d06:	2000      	movs	r0, #0
 8008d08:	b009      	add	sp, #36	; 0x24
 8008d0a:	ecbd 8b06 	vpop	{d8-d10}
 8008d0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d12:	f000 bcf0 	b.w	80096f6 <__math_oflow>
 8008d16:	429c      	cmp	r4, r3
 8008d18:	dbf2      	blt.n	8008d00 <__ieee754_pow+0x218>
 8008d1a:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <__ieee754_pow+0x25c>)
 8008d1c:	429c      	cmp	r4, r3
 8008d1e:	dd19      	ble.n	8008d54 <__ieee754_pow+0x26c>
 8008d20:	f1b9 0f00 	cmp.w	r9, #0
 8008d24:	dcef      	bgt.n	8008d06 <__ieee754_pow+0x21e>
 8008d26:	2000      	movs	r0, #0
 8008d28:	b009      	add	sp, #36	; 0x24
 8008d2a:	ecbd 8b06 	vpop	{d8-d10}
 8008d2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d32:	f000 bcd7 	b.w	80096e4 <__math_uflow>
 8008d36:	bf00      	nop
 8008d38:	fff00000 	.word	0xfff00000
 8008d3c:	7ff00000 	.word	0x7ff00000
 8008d40:	433fffff 	.word	0x433fffff
 8008d44:	3ff00000 	.word	0x3ff00000
 8008d48:	3fefffff 	.word	0x3fefffff
 8008d4c:	3fe00000 	.word	0x3fe00000
 8008d50:	41e00000 	.word	0x41e00000
 8008d54:	4b60      	ldr	r3, [pc, #384]	; (8008ed8 <__ieee754_pow+0x3f0>)
 8008d56:	2200      	movs	r2, #0
 8008d58:	f7f7 fa96 	bl	8000288 <__aeabi_dsub>
 8008d5c:	a354      	add	r3, pc, #336	; (adr r3, 8008eb0 <__ieee754_pow+0x3c8>)
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	4604      	mov	r4, r0
 8008d64:	460d      	mov	r5, r1
 8008d66:	f7f7 fc47 	bl	80005f8 <__aeabi_dmul>
 8008d6a:	a353      	add	r3, pc, #332	; (adr r3, 8008eb8 <__ieee754_pow+0x3d0>)
 8008d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d70:	4606      	mov	r6, r0
 8008d72:	460f      	mov	r7, r1
 8008d74:	4620      	mov	r0, r4
 8008d76:	4629      	mov	r1, r5
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	4b57      	ldr	r3, [pc, #348]	; (8008edc <__ieee754_pow+0x3f4>)
 8008d7e:	4682      	mov	sl, r0
 8008d80:	468b      	mov	fp, r1
 8008d82:	2200      	movs	r2, #0
 8008d84:	4620      	mov	r0, r4
 8008d86:	4629      	mov	r1, r5
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	a14b      	add	r1, pc, #300	; (adr r1, 8008ec0 <__ieee754_pow+0x3d8>)
 8008d92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d96:	f7f7 fa77 	bl	8000288 <__aeabi_dsub>
 8008d9a:	4622      	mov	r2, r4
 8008d9c:	462b      	mov	r3, r5
 8008d9e:	f7f7 fc2b 	bl	80005f8 <__aeabi_dmul>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	2000      	movs	r0, #0
 8008da8:	494d      	ldr	r1, [pc, #308]	; (8008ee0 <__ieee754_pow+0x3f8>)
 8008daa:	f7f7 fa6d 	bl	8000288 <__aeabi_dsub>
 8008dae:	4622      	mov	r2, r4
 8008db0:	4680      	mov	r8, r0
 8008db2:	4689      	mov	r9, r1
 8008db4:	462b      	mov	r3, r5
 8008db6:	4620      	mov	r0, r4
 8008db8:	4629      	mov	r1, r5
 8008dba:	f7f7 fc1d 	bl	80005f8 <__aeabi_dmul>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	4649      	mov	r1, r9
 8008dc6:	f7f7 fc17 	bl	80005f8 <__aeabi_dmul>
 8008dca:	a33f      	add	r3, pc, #252	; (adr r3, 8008ec8 <__ieee754_pow+0x3e0>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 fc12 	bl	80005f8 <__aeabi_dmul>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4650      	mov	r0, sl
 8008dda:	4659      	mov	r1, fp
 8008ddc:	f7f7 fa54 	bl	8000288 <__aeabi_dsub>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4680      	mov	r8, r0
 8008de6:	4689      	mov	r9, r1
 8008de8:	4630      	mov	r0, r6
 8008dea:	4639      	mov	r1, r7
 8008dec:	f7f7 fa4e 	bl	800028c <__adddf3>
 8008df0:	2000      	movs	r0, #0
 8008df2:	4632      	mov	r2, r6
 8008df4:	463b      	mov	r3, r7
 8008df6:	4604      	mov	r4, r0
 8008df8:	460d      	mov	r5, r1
 8008dfa:	f7f7 fa45 	bl	8000288 <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4640      	mov	r0, r8
 8008e04:	4649      	mov	r1, r9
 8008e06:	f7f7 fa3f 	bl	8000288 <__aeabi_dsub>
 8008e0a:	9b04      	ldr	r3, [sp, #16]
 8008e0c:	9a06      	ldr	r2, [sp, #24]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	4313      	orrs	r3, r2
 8008e12:	4682      	mov	sl, r0
 8008e14:	468b      	mov	fp, r1
 8008e16:	f040 81e7 	bne.w	80091e8 <__ieee754_pow+0x700>
 8008e1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008ed0 <__ieee754_pow+0x3e8>
 8008e1e:	eeb0 8a47 	vmov.f32	s16, s14
 8008e22:	eef0 8a67 	vmov.f32	s17, s15
 8008e26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008e2a:	2600      	movs	r6, #0
 8008e2c:	4632      	mov	r2, r6
 8008e2e:	463b      	mov	r3, r7
 8008e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e34:	f7f7 fa28 	bl	8000288 <__aeabi_dsub>
 8008e38:	4622      	mov	r2, r4
 8008e3a:	462b      	mov	r3, r5
 8008e3c:	f7f7 fbdc 	bl	80005f8 <__aeabi_dmul>
 8008e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e44:	4680      	mov	r8, r0
 8008e46:	4689      	mov	r9, r1
 8008e48:	4650      	mov	r0, sl
 8008e4a:	4659      	mov	r1, fp
 8008e4c:	f7f7 fbd4 	bl	80005f8 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4640      	mov	r0, r8
 8008e56:	4649      	mov	r1, r9
 8008e58:	f7f7 fa18 	bl	800028c <__adddf3>
 8008e5c:	4632      	mov	r2, r6
 8008e5e:	463b      	mov	r3, r7
 8008e60:	4680      	mov	r8, r0
 8008e62:	4689      	mov	r9, r1
 8008e64:	4620      	mov	r0, r4
 8008e66:	4629      	mov	r1, r5
 8008e68:	f7f7 fbc6 	bl	80005f8 <__aeabi_dmul>
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4604      	mov	r4, r0
 8008e70:	460d      	mov	r5, r1
 8008e72:	4602      	mov	r2, r0
 8008e74:	4649      	mov	r1, r9
 8008e76:	4640      	mov	r0, r8
 8008e78:	f7f7 fa08 	bl	800028c <__adddf3>
 8008e7c:	4b19      	ldr	r3, [pc, #100]	; (8008ee4 <__ieee754_pow+0x3fc>)
 8008e7e:	4299      	cmp	r1, r3
 8008e80:	ec45 4b19 	vmov	d9, r4, r5
 8008e84:	4606      	mov	r6, r0
 8008e86:	460f      	mov	r7, r1
 8008e88:	468b      	mov	fp, r1
 8008e8a:	f340 82f1 	ble.w	8009470 <__ieee754_pow+0x988>
 8008e8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008e92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008e96:	4303      	orrs	r3, r0
 8008e98:	f000 81e4 	beq.w	8009264 <__ieee754_pow+0x77c>
 8008e9c:	ec51 0b18 	vmov	r0, r1, d8
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f7f7 fe1a 	bl	8000adc <__aeabi_dcmplt>
 8008ea8:	3800      	subs	r0, #0
 8008eaa:	bf18      	it	ne
 8008eac:	2001      	movne	r0, #1
 8008eae:	e72b      	b.n	8008d08 <__ieee754_pow+0x220>
 8008eb0:	60000000 	.word	0x60000000
 8008eb4:	3ff71547 	.word	0x3ff71547
 8008eb8:	f85ddf44 	.word	0xf85ddf44
 8008ebc:	3e54ae0b 	.word	0x3e54ae0b
 8008ec0:	55555555 	.word	0x55555555
 8008ec4:	3fd55555 	.word	0x3fd55555
 8008ec8:	652b82fe 	.word	0x652b82fe
 8008ecc:	3ff71547 	.word	0x3ff71547
 8008ed0:	00000000 	.word	0x00000000
 8008ed4:	bff00000 	.word	0xbff00000
 8008ed8:	3ff00000 	.word	0x3ff00000
 8008edc:	3fd00000 	.word	0x3fd00000
 8008ee0:	3fe00000 	.word	0x3fe00000
 8008ee4:	408fffff 	.word	0x408fffff
 8008ee8:	4bd5      	ldr	r3, [pc, #852]	; (8009240 <__ieee754_pow+0x758>)
 8008eea:	402b      	ands	r3, r5
 8008eec:	2200      	movs	r2, #0
 8008eee:	b92b      	cbnz	r3, 8008efc <__ieee754_pow+0x414>
 8008ef0:	4bd4      	ldr	r3, [pc, #848]	; (8009244 <__ieee754_pow+0x75c>)
 8008ef2:	f7f7 fb81 	bl	80005f8 <__aeabi_dmul>
 8008ef6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008efa:	460c      	mov	r4, r1
 8008efc:	1523      	asrs	r3, r4, #20
 8008efe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008f02:	4413      	add	r3, r2
 8008f04:	9305      	str	r3, [sp, #20]
 8008f06:	4bd0      	ldr	r3, [pc, #832]	; (8009248 <__ieee754_pow+0x760>)
 8008f08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008f10:	429c      	cmp	r4, r3
 8008f12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008f16:	dd08      	ble.n	8008f2a <__ieee754_pow+0x442>
 8008f18:	4bcc      	ldr	r3, [pc, #816]	; (800924c <__ieee754_pow+0x764>)
 8008f1a:	429c      	cmp	r4, r3
 8008f1c:	f340 8162 	ble.w	80091e4 <__ieee754_pow+0x6fc>
 8008f20:	9b05      	ldr	r3, [sp, #20]
 8008f22:	3301      	adds	r3, #1
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008f2a:	2400      	movs	r4, #0
 8008f2c:	00e3      	lsls	r3, r4, #3
 8008f2e:	9307      	str	r3, [sp, #28]
 8008f30:	4bc7      	ldr	r3, [pc, #796]	; (8009250 <__ieee754_pow+0x768>)
 8008f32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008f36:	ed93 7b00 	vldr	d7, [r3]
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	ec53 2b17 	vmov	r2, r3, d7
 8008f40:	eeb0 9a47 	vmov.f32	s18, s14
 8008f44:	eef0 9a67 	vmov.f32	s19, s15
 8008f48:	4682      	mov	sl, r0
 8008f4a:	f7f7 f99d 	bl	8000288 <__aeabi_dsub>
 8008f4e:	4652      	mov	r2, sl
 8008f50:	4606      	mov	r6, r0
 8008f52:	460f      	mov	r7, r1
 8008f54:	462b      	mov	r3, r5
 8008f56:	ec51 0b19 	vmov	r0, r1, d9
 8008f5a:	f7f7 f997 	bl	800028c <__adddf3>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	2000      	movs	r0, #0
 8008f64:	49bb      	ldr	r1, [pc, #748]	; (8009254 <__ieee754_pow+0x76c>)
 8008f66:	f7f7 fc71 	bl	800084c <__aeabi_ddiv>
 8008f6a:	ec41 0b1a 	vmov	d10, r0, r1
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4630      	mov	r0, r6
 8008f74:	4639      	mov	r1, r7
 8008f76:	f7f7 fb3f 	bl	80005f8 <__aeabi_dmul>
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f80:	9302      	str	r3, [sp, #8]
 8008f82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f86:	46ab      	mov	fp, r5
 8008f88:	106d      	asrs	r5, r5, #1
 8008f8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008f8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008f92:	ec41 0b18 	vmov	d8, r0, r1
 8008f96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4640      	mov	r0, r8
 8008f9e:	4649      	mov	r1, r9
 8008fa0:	4614      	mov	r4, r2
 8008fa2:	461d      	mov	r5, r3
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4630      	mov	r0, r6
 8008fae:	4639      	mov	r1, r7
 8008fb0:	f7f7 f96a 	bl	8000288 <__aeabi_dsub>
 8008fb4:	ec53 2b19 	vmov	r2, r3, d9
 8008fb8:	4606      	mov	r6, r0
 8008fba:	460f      	mov	r7, r1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f962 	bl	8000288 <__aeabi_dsub>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4650      	mov	r0, sl
 8008fca:	4659      	mov	r1, fp
 8008fcc:	f7f7 f95c 	bl	8000288 <__aeabi_dsub>
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	f7f7 fb10 	bl	80005f8 <__aeabi_dmul>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	460b      	mov	r3, r1
 8008fdc:	4630      	mov	r0, r6
 8008fde:	4639      	mov	r1, r7
 8008fe0:	f7f7 f952 	bl	8000288 <__aeabi_dsub>
 8008fe4:	ec53 2b1a 	vmov	r2, r3, d10
 8008fe8:	f7f7 fb06 	bl	80005f8 <__aeabi_dmul>
 8008fec:	ec53 2b18 	vmov	r2, r3, d8
 8008ff0:	ec41 0b19 	vmov	d9, r0, r1
 8008ff4:	ec51 0b18 	vmov	r0, r1, d8
 8008ff8:	f7f7 fafe 	bl	80005f8 <__aeabi_dmul>
 8008ffc:	a37c      	add	r3, pc, #496	; (adr r3, 80091f0 <__ieee754_pow+0x708>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	4604      	mov	r4, r0
 8009004:	460d      	mov	r5, r1
 8009006:	f7f7 faf7 	bl	80005f8 <__aeabi_dmul>
 800900a:	a37b      	add	r3, pc, #492	; (adr r3, 80091f8 <__ieee754_pow+0x710>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	f7f7 f93c 	bl	800028c <__adddf3>
 8009014:	4622      	mov	r2, r4
 8009016:	462b      	mov	r3, r5
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	a378      	add	r3, pc, #480	; (adr r3, 8009200 <__ieee754_pow+0x718>)
 800901e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009022:	f7f7 f933 	bl	800028c <__adddf3>
 8009026:	4622      	mov	r2, r4
 8009028:	462b      	mov	r3, r5
 800902a:	f7f7 fae5 	bl	80005f8 <__aeabi_dmul>
 800902e:	a376      	add	r3, pc, #472	; (adr r3, 8009208 <__ieee754_pow+0x720>)
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f7f7 f92a 	bl	800028c <__adddf3>
 8009038:	4622      	mov	r2, r4
 800903a:	462b      	mov	r3, r5
 800903c:	f7f7 fadc 	bl	80005f8 <__aeabi_dmul>
 8009040:	a373      	add	r3, pc, #460	; (adr r3, 8009210 <__ieee754_pow+0x728>)
 8009042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009046:	f7f7 f921 	bl	800028c <__adddf3>
 800904a:	4622      	mov	r2, r4
 800904c:	462b      	mov	r3, r5
 800904e:	f7f7 fad3 	bl	80005f8 <__aeabi_dmul>
 8009052:	a371      	add	r3, pc, #452	; (adr r3, 8009218 <__ieee754_pow+0x730>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 f918 	bl	800028c <__adddf3>
 800905c:	4622      	mov	r2, r4
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	462b      	mov	r3, r5
 8009064:	4620      	mov	r0, r4
 8009066:	4629      	mov	r1, r5
 8009068:	f7f7 fac6 	bl	80005f8 <__aeabi_dmul>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4630      	mov	r0, r6
 8009072:	4639      	mov	r1, r7
 8009074:	f7f7 fac0 	bl	80005f8 <__aeabi_dmul>
 8009078:	4642      	mov	r2, r8
 800907a:	4604      	mov	r4, r0
 800907c:	460d      	mov	r5, r1
 800907e:	464b      	mov	r3, r9
 8009080:	ec51 0b18 	vmov	r0, r1, d8
 8009084:	f7f7 f902 	bl	800028c <__adddf3>
 8009088:	ec53 2b19 	vmov	r2, r3, d9
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	f7f7 f8fa 	bl	800028c <__adddf3>
 8009098:	4642      	mov	r2, r8
 800909a:	4682      	mov	sl, r0
 800909c:	468b      	mov	fp, r1
 800909e:	464b      	mov	r3, r9
 80090a0:	4640      	mov	r0, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	f7f7 faa8 	bl	80005f8 <__aeabi_dmul>
 80090a8:	4b6b      	ldr	r3, [pc, #428]	; (8009258 <__ieee754_pow+0x770>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	4606      	mov	r6, r0
 80090ae:	460f      	mov	r7, r1
 80090b0:	f7f7 f8ec 	bl	800028c <__adddf3>
 80090b4:	4652      	mov	r2, sl
 80090b6:	465b      	mov	r3, fp
 80090b8:	f7f7 f8e8 	bl	800028c <__adddf3>
 80090bc:	2000      	movs	r0, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	460d      	mov	r5, r1
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4640      	mov	r0, r8
 80090c8:	4649      	mov	r1, r9
 80090ca:	f7f7 fa95 	bl	80005f8 <__aeabi_dmul>
 80090ce:	4b62      	ldr	r3, [pc, #392]	; (8009258 <__ieee754_pow+0x770>)
 80090d0:	4680      	mov	r8, r0
 80090d2:	4689      	mov	r9, r1
 80090d4:	2200      	movs	r2, #0
 80090d6:	4620      	mov	r0, r4
 80090d8:	4629      	mov	r1, r5
 80090da:	f7f7 f8d5 	bl	8000288 <__aeabi_dsub>
 80090de:	4632      	mov	r2, r6
 80090e0:	463b      	mov	r3, r7
 80090e2:	f7f7 f8d1 	bl	8000288 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4650      	mov	r0, sl
 80090ec:	4659      	mov	r1, fp
 80090ee:	f7f7 f8cb 	bl	8000288 <__aeabi_dsub>
 80090f2:	ec53 2b18 	vmov	r2, r3, d8
 80090f6:	f7f7 fa7f 	bl	80005f8 <__aeabi_dmul>
 80090fa:	4622      	mov	r2, r4
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	462b      	mov	r3, r5
 8009102:	ec51 0b19 	vmov	r0, r1, d9
 8009106:	f7f7 fa77 	bl	80005f8 <__aeabi_dmul>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	4630      	mov	r0, r6
 8009110:	4639      	mov	r1, r7
 8009112:	f7f7 f8bb 	bl	800028c <__adddf3>
 8009116:	4606      	mov	r6, r0
 8009118:	460f      	mov	r7, r1
 800911a:	4602      	mov	r2, r0
 800911c:	460b      	mov	r3, r1
 800911e:	4640      	mov	r0, r8
 8009120:	4649      	mov	r1, r9
 8009122:	f7f7 f8b3 	bl	800028c <__adddf3>
 8009126:	a33e      	add	r3, pc, #248	; (adr r3, 8009220 <__ieee754_pow+0x738>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	2000      	movs	r0, #0
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	f7f7 fa61 	bl	80005f8 <__aeabi_dmul>
 8009136:	4642      	mov	r2, r8
 8009138:	ec41 0b18 	vmov	d8, r0, r1
 800913c:	464b      	mov	r3, r9
 800913e:	4620      	mov	r0, r4
 8009140:	4629      	mov	r1, r5
 8009142:	f7f7 f8a1 	bl	8000288 <__aeabi_dsub>
 8009146:	4602      	mov	r2, r0
 8009148:	460b      	mov	r3, r1
 800914a:	4630      	mov	r0, r6
 800914c:	4639      	mov	r1, r7
 800914e:	f7f7 f89b 	bl	8000288 <__aeabi_dsub>
 8009152:	a335      	add	r3, pc, #212	; (adr r3, 8009228 <__ieee754_pow+0x740>)
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f7f7 fa4e 	bl	80005f8 <__aeabi_dmul>
 800915c:	a334      	add	r3, pc, #208	; (adr r3, 8009230 <__ieee754_pow+0x748>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	4606      	mov	r6, r0
 8009164:	460f      	mov	r7, r1
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fa45 	bl	80005f8 <__aeabi_dmul>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4630      	mov	r0, r6
 8009174:	4639      	mov	r1, r7
 8009176:	f7f7 f889 	bl	800028c <__adddf3>
 800917a:	9a07      	ldr	r2, [sp, #28]
 800917c:	4b37      	ldr	r3, [pc, #220]	; (800925c <__ieee754_pow+0x774>)
 800917e:	4413      	add	r3, r2
 8009180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009184:	f7f7 f882 	bl	800028c <__adddf3>
 8009188:	4682      	mov	sl, r0
 800918a:	9805      	ldr	r0, [sp, #20]
 800918c:	468b      	mov	fp, r1
 800918e:	f7f7 f9c9 	bl	8000524 <__aeabi_i2d>
 8009192:	9a07      	ldr	r2, [sp, #28]
 8009194:	4b32      	ldr	r3, [pc, #200]	; (8009260 <__ieee754_pow+0x778>)
 8009196:	4413      	add	r3, r2
 8009198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800919c:	4606      	mov	r6, r0
 800919e:	460f      	mov	r7, r1
 80091a0:	4652      	mov	r2, sl
 80091a2:	465b      	mov	r3, fp
 80091a4:	ec51 0b18 	vmov	r0, r1, d8
 80091a8:	f7f7 f870 	bl	800028c <__adddf3>
 80091ac:	4642      	mov	r2, r8
 80091ae:	464b      	mov	r3, r9
 80091b0:	f7f7 f86c 	bl	800028c <__adddf3>
 80091b4:	4632      	mov	r2, r6
 80091b6:	463b      	mov	r3, r7
 80091b8:	f7f7 f868 	bl	800028c <__adddf3>
 80091bc:	2000      	movs	r0, #0
 80091be:	4632      	mov	r2, r6
 80091c0:	463b      	mov	r3, r7
 80091c2:	4604      	mov	r4, r0
 80091c4:	460d      	mov	r5, r1
 80091c6:	f7f7 f85f 	bl	8000288 <__aeabi_dsub>
 80091ca:	4642      	mov	r2, r8
 80091cc:	464b      	mov	r3, r9
 80091ce:	f7f7 f85b 	bl	8000288 <__aeabi_dsub>
 80091d2:	ec53 2b18 	vmov	r2, r3, d8
 80091d6:	f7f7 f857 	bl	8000288 <__aeabi_dsub>
 80091da:	4602      	mov	r2, r0
 80091dc:	460b      	mov	r3, r1
 80091de:	4650      	mov	r0, sl
 80091e0:	4659      	mov	r1, fp
 80091e2:	e610      	b.n	8008e06 <__ieee754_pow+0x31e>
 80091e4:	2401      	movs	r4, #1
 80091e6:	e6a1      	b.n	8008f2c <__ieee754_pow+0x444>
 80091e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009238 <__ieee754_pow+0x750>
 80091ec:	e617      	b.n	8008e1e <__ieee754_pow+0x336>
 80091ee:	bf00      	nop
 80091f0:	4a454eef 	.word	0x4a454eef
 80091f4:	3fca7e28 	.word	0x3fca7e28
 80091f8:	93c9db65 	.word	0x93c9db65
 80091fc:	3fcd864a 	.word	0x3fcd864a
 8009200:	a91d4101 	.word	0xa91d4101
 8009204:	3fd17460 	.word	0x3fd17460
 8009208:	518f264d 	.word	0x518f264d
 800920c:	3fd55555 	.word	0x3fd55555
 8009210:	db6fabff 	.word	0xdb6fabff
 8009214:	3fdb6db6 	.word	0x3fdb6db6
 8009218:	33333303 	.word	0x33333303
 800921c:	3fe33333 	.word	0x3fe33333
 8009220:	e0000000 	.word	0xe0000000
 8009224:	3feec709 	.word	0x3feec709
 8009228:	dc3a03fd 	.word	0xdc3a03fd
 800922c:	3feec709 	.word	0x3feec709
 8009230:	145b01f5 	.word	0x145b01f5
 8009234:	be3e2fe0 	.word	0xbe3e2fe0
 8009238:	00000000 	.word	0x00000000
 800923c:	3ff00000 	.word	0x3ff00000
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	43400000 	.word	0x43400000
 8009248:	0003988e 	.word	0x0003988e
 800924c:	000bb679 	.word	0x000bb679
 8009250:	0800c920 	.word	0x0800c920
 8009254:	3ff00000 	.word	0x3ff00000
 8009258:	40080000 	.word	0x40080000
 800925c:	0800c940 	.word	0x0800c940
 8009260:	0800c930 	.word	0x0800c930
 8009264:	a3b5      	add	r3, pc, #724	; (adr r3, 800953c <__ieee754_pow+0xa54>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	4640      	mov	r0, r8
 800926c:	4649      	mov	r1, r9
 800926e:	f7f7 f80d 	bl	800028c <__adddf3>
 8009272:	4622      	mov	r2, r4
 8009274:	ec41 0b1a 	vmov	d10, r0, r1
 8009278:	462b      	mov	r3, r5
 800927a:	4630      	mov	r0, r6
 800927c:	4639      	mov	r1, r7
 800927e:	f7f7 f803 	bl	8000288 <__aeabi_dsub>
 8009282:	4602      	mov	r2, r0
 8009284:	460b      	mov	r3, r1
 8009286:	ec51 0b1a 	vmov	r0, r1, d10
 800928a:	f7f7 fc45 	bl	8000b18 <__aeabi_dcmpgt>
 800928e:	2800      	cmp	r0, #0
 8009290:	f47f ae04 	bne.w	8008e9c <__ieee754_pow+0x3b4>
 8009294:	4aa4      	ldr	r2, [pc, #656]	; (8009528 <__ieee754_pow+0xa40>)
 8009296:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800929a:	4293      	cmp	r3, r2
 800929c:	f340 8108 	ble.w	80094b0 <__ieee754_pow+0x9c8>
 80092a0:	151b      	asrs	r3, r3, #20
 80092a2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80092a6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80092aa:	fa4a f303 	asr.w	r3, sl, r3
 80092ae:	445b      	add	r3, fp
 80092b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80092b4:	4e9d      	ldr	r6, [pc, #628]	; (800952c <__ieee754_pow+0xa44>)
 80092b6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80092ba:	4116      	asrs	r6, r2
 80092bc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80092c0:	2000      	movs	r0, #0
 80092c2:	ea23 0106 	bic.w	r1, r3, r6
 80092c6:	f1c2 0214 	rsb	r2, r2, #20
 80092ca:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80092ce:	fa4a fa02 	asr.w	sl, sl, r2
 80092d2:	f1bb 0f00 	cmp.w	fp, #0
 80092d6:	4602      	mov	r2, r0
 80092d8:	460b      	mov	r3, r1
 80092da:	4620      	mov	r0, r4
 80092dc:	4629      	mov	r1, r5
 80092de:	bfb8      	it	lt
 80092e0:	f1ca 0a00 	rsblt	sl, sl, #0
 80092e4:	f7f6 ffd0 	bl	8000288 <__aeabi_dsub>
 80092e8:	ec41 0b19 	vmov	d9, r0, r1
 80092ec:	4642      	mov	r2, r8
 80092ee:	464b      	mov	r3, r9
 80092f0:	ec51 0b19 	vmov	r0, r1, d9
 80092f4:	f7f6 ffca 	bl	800028c <__adddf3>
 80092f8:	a37b      	add	r3, pc, #492	; (adr r3, 80094e8 <__ieee754_pow+0xa00>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	2000      	movs	r0, #0
 8009300:	4604      	mov	r4, r0
 8009302:	460d      	mov	r5, r1
 8009304:	f7f7 f978 	bl	80005f8 <__aeabi_dmul>
 8009308:	ec53 2b19 	vmov	r2, r3, d9
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	4620      	mov	r0, r4
 8009312:	4629      	mov	r1, r5
 8009314:	f7f6 ffb8 	bl	8000288 <__aeabi_dsub>
 8009318:	4602      	mov	r2, r0
 800931a:	460b      	mov	r3, r1
 800931c:	4640      	mov	r0, r8
 800931e:	4649      	mov	r1, r9
 8009320:	f7f6 ffb2 	bl	8000288 <__aeabi_dsub>
 8009324:	a372      	add	r3, pc, #456	; (adr r3, 80094f0 <__ieee754_pow+0xa08>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f7 f965 	bl	80005f8 <__aeabi_dmul>
 800932e:	a372      	add	r3, pc, #456	; (adr r3, 80094f8 <__ieee754_pow+0xa10>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	4680      	mov	r8, r0
 8009336:	4689      	mov	r9, r1
 8009338:	4620      	mov	r0, r4
 800933a:	4629      	mov	r1, r5
 800933c:	f7f7 f95c 	bl	80005f8 <__aeabi_dmul>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f6 ffa0 	bl	800028c <__adddf3>
 800934c:	4604      	mov	r4, r0
 800934e:	460d      	mov	r5, r1
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4630      	mov	r0, r6
 8009356:	4639      	mov	r1, r7
 8009358:	f7f6 ff98 	bl	800028c <__adddf3>
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	4680      	mov	r8, r0
 8009362:	4689      	mov	r9, r1
 8009364:	f7f6 ff90 	bl	8000288 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7f6 ff8a 	bl	8000288 <__aeabi_dsub>
 8009374:	4642      	mov	r2, r8
 8009376:	4606      	mov	r6, r0
 8009378:	460f      	mov	r7, r1
 800937a:	464b      	mov	r3, r9
 800937c:	4640      	mov	r0, r8
 800937e:	4649      	mov	r1, r9
 8009380:	f7f7 f93a 	bl	80005f8 <__aeabi_dmul>
 8009384:	a35e      	add	r3, pc, #376	; (adr r3, 8009500 <__ieee754_pow+0xa18>)
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	4604      	mov	r4, r0
 800938c:	460d      	mov	r5, r1
 800938e:	f7f7 f933 	bl	80005f8 <__aeabi_dmul>
 8009392:	a35d      	add	r3, pc, #372	; (adr r3, 8009508 <__ieee754_pow+0xa20>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f6 ff76 	bl	8000288 <__aeabi_dsub>
 800939c:	4622      	mov	r2, r4
 800939e:	462b      	mov	r3, r5
 80093a0:	f7f7 f92a 	bl	80005f8 <__aeabi_dmul>
 80093a4:	a35a      	add	r3, pc, #360	; (adr r3, 8009510 <__ieee754_pow+0xa28>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	f7f6 ff6f 	bl	800028c <__adddf3>
 80093ae:	4622      	mov	r2, r4
 80093b0:	462b      	mov	r3, r5
 80093b2:	f7f7 f921 	bl	80005f8 <__aeabi_dmul>
 80093b6:	a358      	add	r3, pc, #352	; (adr r3, 8009518 <__ieee754_pow+0xa30>)
 80093b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093bc:	f7f6 ff64 	bl	8000288 <__aeabi_dsub>
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f918 	bl	80005f8 <__aeabi_dmul>
 80093c8:	a355      	add	r3, pc, #340	; (adr r3, 8009520 <__ieee754_pow+0xa38>)
 80093ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ce:	f7f6 ff5d 	bl	800028c <__adddf3>
 80093d2:	4622      	mov	r2, r4
 80093d4:	462b      	mov	r3, r5
 80093d6:	f7f7 f90f 	bl	80005f8 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4640      	mov	r0, r8
 80093e0:	4649      	mov	r1, r9
 80093e2:	f7f6 ff51 	bl	8000288 <__aeabi_dsub>
 80093e6:	4604      	mov	r4, r0
 80093e8:	460d      	mov	r5, r1
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4640      	mov	r0, r8
 80093f0:	4649      	mov	r1, r9
 80093f2:	f7f7 f901 	bl	80005f8 <__aeabi_dmul>
 80093f6:	2200      	movs	r2, #0
 80093f8:	ec41 0b19 	vmov	d9, r0, r1
 80093fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009400:	4620      	mov	r0, r4
 8009402:	4629      	mov	r1, r5
 8009404:	f7f6 ff40 	bl	8000288 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	ec51 0b19 	vmov	r0, r1, d9
 8009410:	f7f7 fa1c 	bl	800084c <__aeabi_ddiv>
 8009414:	4632      	mov	r2, r6
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	463b      	mov	r3, r7
 800941c:	4640      	mov	r0, r8
 800941e:	4649      	mov	r1, r9
 8009420:	f7f7 f8ea 	bl	80005f8 <__aeabi_dmul>
 8009424:	4632      	mov	r2, r6
 8009426:	463b      	mov	r3, r7
 8009428:	f7f6 ff30 	bl	800028c <__adddf3>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4620      	mov	r0, r4
 8009432:	4629      	mov	r1, r5
 8009434:	f7f6 ff28 	bl	8000288 <__aeabi_dsub>
 8009438:	4642      	mov	r2, r8
 800943a:	464b      	mov	r3, r9
 800943c:	f7f6 ff24 	bl	8000288 <__aeabi_dsub>
 8009440:	460b      	mov	r3, r1
 8009442:	4602      	mov	r2, r0
 8009444:	493a      	ldr	r1, [pc, #232]	; (8009530 <__ieee754_pow+0xa48>)
 8009446:	2000      	movs	r0, #0
 8009448:	f7f6 ff1e 	bl	8000288 <__aeabi_dsub>
 800944c:	ec41 0b10 	vmov	d0, r0, r1
 8009450:	ee10 3a90 	vmov	r3, s1
 8009454:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800945c:	da2b      	bge.n	80094b6 <__ieee754_pow+0x9ce>
 800945e:	4650      	mov	r0, sl
 8009460:	f000 f966 	bl	8009730 <scalbn>
 8009464:	ec51 0b10 	vmov	r0, r1, d0
 8009468:	ec53 2b18 	vmov	r2, r3, d8
 800946c:	f7ff bbed 	b.w	8008c4a <__ieee754_pow+0x162>
 8009470:	4b30      	ldr	r3, [pc, #192]	; (8009534 <__ieee754_pow+0xa4c>)
 8009472:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009476:	429e      	cmp	r6, r3
 8009478:	f77f af0c 	ble.w	8009294 <__ieee754_pow+0x7ac>
 800947c:	4b2e      	ldr	r3, [pc, #184]	; (8009538 <__ieee754_pow+0xa50>)
 800947e:	440b      	add	r3, r1
 8009480:	4303      	orrs	r3, r0
 8009482:	d009      	beq.n	8009498 <__ieee754_pow+0x9b0>
 8009484:	ec51 0b18 	vmov	r0, r1, d8
 8009488:	2200      	movs	r2, #0
 800948a:	2300      	movs	r3, #0
 800948c:	f7f7 fb26 	bl	8000adc <__aeabi_dcmplt>
 8009490:	3800      	subs	r0, #0
 8009492:	bf18      	it	ne
 8009494:	2001      	movne	r0, #1
 8009496:	e447      	b.n	8008d28 <__ieee754_pow+0x240>
 8009498:	4622      	mov	r2, r4
 800949a:	462b      	mov	r3, r5
 800949c:	f7f6 fef4 	bl	8000288 <__aeabi_dsub>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	f7f7 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 80094a8:	2800      	cmp	r0, #0
 80094aa:	f43f aef3 	beq.w	8009294 <__ieee754_pow+0x7ac>
 80094ae:	e7e9      	b.n	8009484 <__ieee754_pow+0x99c>
 80094b0:	f04f 0a00 	mov.w	sl, #0
 80094b4:	e71a      	b.n	80092ec <__ieee754_pow+0x804>
 80094b6:	ec51 0b10 	vmov	r0, r1, d0
 80094ba:	4619      	mov	r1, r3
 80094bc:	e7d4      	b.n	8009468 <__ieee754_pow+0x980>
 80094be:	491c      	ldr	r1, [pc, #112]	; (8009530 <__ieee754_pow+0xa48>)
 80094c0:	2000      	movs	r0, #0
 80094c2:	f7ff bb30 	b.w	8008b26 <__ieee754_pow+0x3e>
 80094c6:	2000      	movs	r0, #0
 80094c8:	2100      	movs	r1, #0
 80094ca:	f7ff bb2c 	b.w	8008b26 <__ieee754_pow+0x3e>
 80094ce:	4630      	mov	r0, r6
 80094d0:	4639      	mov	r1, r7
 80094d2:	f7ff bb28 	b.w	8008b26 <__ieee754_pow+0x3e>
 80094d6:	9204      	str	r2, [sp, #16]
 80094d8:	f7ff bb7a 	b.w	8008bd0 <__ieee754_pow+0xe8>
 80094dc:	2300      	movs	r3, #0
 80094de:	f7ff bb64 	b.w	8008baa <__ieee754_pow+0xc2>
 80094e2:	bf00      	nop
 80094e4:	f3af 8000 	nop.w
 80094e8:	00000000 	.word	0x00000000
 80094ec:	3fe62e43 	.word	0x3fe62e43
 80094f0:	fefa39ef 	.word	0xfefa39ef
 80094f4:	3fe62e42 	.word	0x3fe62e42
 80094f8:	0ca86c39 	.word	0x0ca86c39
 80094fc:	be205c61 	.word	0xbe205c61
 8009500:	72bea4d0 	.word	0x72bea4d0
 8009504:	3e663769 	.word	0x3e663769
 8009508:	c5d26bf1 	.word	0xc5d26bf1
 800950c:	3ebbbd41 	.word	0x3ebbbd41
 8009510:	af25de2c 	.word	0xaf25de2c
 8009514:	3f11566a 	.word	0x3f11566a
 8009518:	16bebd93 	.word	0x16bebd93
 800951c:	3f66c16c 	.word	0x3f66c16c
 8009520:	5555553e 	.word	0x5555553e
 8009524:	3fc55555 	.word	0x3fc55555
 8009528:	3fe00000 	.word	0x3fe00000
 800952c:	000fffff 	.word	0x000fffff
 8009530:	3ff00000 	.word	0x3ff00000
 8009534:	4090cbff 	.word	0x4090cbff
 8009538:	3f6f3400 	.word	0x3f6f3400
 800953c:	652b82fe 	.word	0x652b82fe
 8009540:	3c971547 	.word	0x3c971547

08009544 <__ieee754_sqrt>:
 8009544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009548:	ec55 4b10 	vmov	r4, r5, d0
 800954c:	4e55      	ldr	r6, [pc, #340]	; (80096a4 <__ieee754_sqrt+0x160>)
 800954e:	43ae      	bics	r6, r5
 8009550:	ee10 0a10 	vmov	r0, s0
 8009554:	ee10 3a10 	vmov	r3, s0
 8009558:	462a      	mov	r2, r5
 800955a:	4629      	mov	r1, r5
 800955c:	d110      	bne.n	8009580 <__ieee754_sqrt+0x3c>
 800955e:	ee10 2a10 	vmov	r2, s0
 8009562:	462b      	mov	r3, r5
 8009564:	f7f7 f848 	bl	80005f8 <__aeabi_dmul>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f6 fe8c 	bl	800028c <__adddf3>
 8009574:	4604      	mov	r4, r0
 8009576:	460d      	mov	r5, r1
 8009578:	ec45 4b10 	vmov	d0, r4, r5
 800957c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009580:	2d00      	cmp	r5, #0
 8009582:	dc10      	bgt.n	80095a6 <__ieee754_sqrt+0x62>
 8009584:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009588:	4330      	orrs	r0, r6
 800958a:	d0f5      	beq.n	8009578 <__ieee754_sqrt+0x34>
 800958c:	b15d      	cbz	r5, 80095a6 <__ieee754_sqrt+0x62>
 800958e:	ee10 2a10 	vmov	r2, s0
 8009592:	462b      	mov	r3, r5
 8009594:	ee10 0a10 	vmov	r0, s0
 8009598:	f7f6 fe76 	bl	8000288 <__aeabi_dsub>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	f7f7 f954 	bl	800084c <__aeabi_ddiv>
 80095a4:	e7e6      	b.n	8009574 <__ieee754_sqrt+0x30>
 80095a6:	1512      	asrs	r2, r2, #20
 80095a8:	d074      	beq.n	8009694 <__ieee754_sqrt+0x150>
 80095aa:	07d4      	lsls	r4, r2, #31
 80095ac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80095b0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80095b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80095b8:	bf5e      	ittt	pl
 80095ba:	0fda      	lsrpl	r2, r3, #31
 80095bc:	005b      	lslpl	r3, r3, #1
 80095be:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80095c2:	2400      	movs	r4, #0
 80095c4:	0fda      	lsrs	r2, r3, #31
 80095c6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80095ca:	107f      	asrs	r7, r7, #1
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	2516      	movs	r5, #22
 80095d0:	4620      	mov	r0, r4
 80095d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80095d6:	1886      	adds	r6, r0, r2
 80095d8:	428e      	cmp	r6, r1
 80095da:	bfde      	ittt	le
 80095dc:	1b89      	suble	r1, r1, r6
 80095de:	18b0      	addle	r0, r6, r2
 80095e0:	18a4      	addle	r4, r4, r2
 80095e2:	0049      	lsls	r1, r1, #1
 80095e4:	3d01      	subs	r5, #1
 80095e6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80095ea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80095ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80095f2:	d1f0      	bne.n	80095d6 <__ieee754_sqrt+0x92>
 80095f4:	462a      	mov	r2, r5
 80095f6:	f04f 0e20 	mov.w	lr, #32
 80095fa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80095fe:	4281      	cmp	r1, r0
 8009600:	eb06 0c05 	add.w	ip, r6, r5
 8009604:	dc02      	bgt.n	800960c <__ieee754_sqrt+0xc8>
 8009606:	d113      	bne.n	8009630 <__ieee754_sqrt+0xec>
 8009608:	459c      	cmp	ip, r3
 800960a:	d811      	bhi.n	8009630 <__ieee754_sqrt+0xec>
 800960c:	f1bc 0f00 	cmp.w	ip, #0
 8009610:	eb0c 0506 	add.w	r5, ip, r6
 8009614:	da43      	bge.n	800969e <__ieee754_sqrt+0x15a>
 8009616:	2d00      	cmp	r5, #0
 8009618:	db41      	blt.n	800969e <__ieee754_sqrt+0x15a>
 800961a:	f100 0801 	add.w	r8, r0, #1
 800961e:	1a09      	subs	r1, r1, r0
 8009620:	459c      	cmp	ip, r3
 8009622:	bf88      	it	hi
 8009624:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8009628:	eba3 030c 	sub.w	r3, r3, ip
 800962c:	4432      	add	r2, r6
 800962e:	4640      	mov	r0, r8
 8009630:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8009634:	f1be 0e01 	subs.w	lr, lr, #1
 8009638:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800963c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009640:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009644:	d1db      	bne.n	80095fe <__ieee754_sqrt+0xba>
 8009646:	430b      	orrs	r3, r1
 8009648:	d006      	beq.n	8009658 <__ieee754_sqrt+0x114>
 800964a:	1c50      	adds	r0, r2, #1
 800964c:	bf13      	iteet	ne
 800964e:	3201      	addne	r2, #1
 8009650:	3401      	addeq	r4, #1
 8009652:	4672      	moveq	r2, lr
 8009654:	f022 0201 	bicne.w	r2, r2, #1
 8009658:	1063      	asrs	r3, r4, #1
 800965a:	0852      	lsrs	r2, r2, #1
 800965c:	07e1      	lsls	r1, r4, #31
 800965e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009662:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009666:	bf48      	it	mi
 8009668:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800966c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8009670:	4614      	mov	r4, r2
 8009672:	e781      	b.n	8009578 <__ieee754_sqrt+0x34>
 8009674:	0ad9      	lsrs	r1, r3, #11
 8009676:	3815      	subs	r0, #21
 8009678:	055b      	lsls	r3, r3, #21
 800967a:	2900      	cmp	r1, #0
 800967c:	d0fa      	beq.n	8009674 <__ieee754_sqrt+0x130>
 800967e:	02cd      	lsls	r5, r1, #11
 8009680:	d50a      	bpl.n	8009698 <__ieee754_sqrt+0x154>
 8009682:	f1c2 0420 	rsb	r4, r2, #32
 8009686:	fa23 f404 	lsr.w	r4, r3, r4
 800968a:	1e55      	subs	r5, r2, #1
 800968c:	4093      	lsls	r3, r2
 800968e:	4321      	orrs	r1, r4
 8009690:	1b42      	subs	r2, r0, r5
 8009692:	e78a      	b.n	80095aa <__ieee754_sqrt+0x66>
 8009694:	4610      	mov	r0, r2
 8009696:	e7f0      	b.n	800967a <__ieee754_sqrt+0x136>
 8009698:	0049      	lsls	r1, r1, #1
 800969a:	3201      	adds	r2, #1
 800969c:	e7ef      	b.n	800967e <__ieee754_sqrt+0x13a>
 800969e:	4680      	mov	r8, r0
 80096a0:	e7bd      	b.n	800961e <__ieee754_sqrt+0xda>
 80096a2:	bf00      	nop
 80096a4:	7ff00000 	.word	0x7ff00000

080096a8 <with_errno>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4604      	mov	r4, r0
 80096ac:	460d      	mov	r5, r1
 80096ae:	4616      	mov	r6, r2
 80096b0:	f000 f8cc 	bl	800984c <__errno>
 80096b4:	4629      	mov	r1, r5
 80096b6:	6006      	str	r6, [r0, #0]
 80096b8:	4620      	mov	r0, r4
 80096ba:	bd70      	pop	{r4, r5, r6, pc}

080096bc <xflow>:
 80096bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096be:	4614      	mov	r4, r2
 80096c0:	461d      	mov	r5, r3
 80096c2:	b108      	cbz	r0, 80096c8 <xflow+0xc>
 80096c4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80096c8:	e9cd 2300 	strd	r2, r3, [sp]
 80096cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096d0:	4620      	mov	r0, r4
 80096d2:	4629      	mov	r1, r5
 80096d4:	f7f6 ff90 	bl	80005f8 <__aeabi_dmul>
 80096d8:	2222      	movs	r2, #34	; 0x22
 80096da:	b003      	add	sp, #12
 80096dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096e0:	f7ff bfe2 	b.w	80096a8 <with_errno>

080096e4 <__math_uflow>:
 80096e4:	b508      	push	{r3, lr}
 80096e6:	2200      	movs	r2, #0
 80096e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80096ec:	f7ff ffe6 	bl	80096bc <xflow>
 80096f0:	ec41 0b10 	vmov	d0, r0, r1
 80096f4:	bd08      	pop	{r3, pc}

080096f6 <__math_oflow>:
 80096f6:	b508      	push	{r3, lr}
 80096f8:	2200      	movs	r2, #0
 80096fa:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80096fe:	f7ff ffdd 	bl	80096bc <xflow>
 8009702:	ec41 0b10 	vmov	d0, r0, r1
 8009706:	bd08      	pop	{r3, pc}

08009708 <fabs>:
 8009708:	ec51 0b10 	vmov	r0, r1, d0
 800970c:	ee10 2a10 	vmov	r2, s0
 8009710:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009714:	ec43 2b10 	vmov	d0, r2, r3
 8009718:	4770      	bx	lr

0800971a <finite>:
 800971a:	b082      	sub	sp, #8
 800971c:	ed8d 0b00 	vstr	d0, [sp]
 8009720:	9801      	ldr	r0, [sp, #4]
 8009722:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009726:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800972a:	0fc0      	lsrs	r0, r0, #31
 800972c:	b002      	add	sp, #8
 800972e:	4770      	bx	lr

08009730 <scalbn>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	ec55 4b10 	vmov	r4, r5, d0
 8009736:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800973a:	4606      	mov	r6, r0
 800973c:	462b      	mov	r3, r5
 800973e:	b99a      	cbnz	r2, 8009768 <scalbn+0x38>
 8009740:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009744:	4323      	orrs	r3, r4
 8009746:	d036      	beq.n	80097b6 <scalbn+0x86>
 8009748:	4b39      	ldr	r3, [pc, #228]	; (8009830 <scalbn+0x100>)
 800974a:	4629      	mov	r1, r5
 800974c:	ee10 0a10 	vmov	r0, s0
 8009750:	2200      	movs	r2, #0
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	4b37      	ldr	r3, [pc, #220]	; (8009834 <scalbn+0x104>)
 8009758:	429e      	cmp	r6, r3
 800975a:	4604      	mov	r4, r0
 800975c:	460d      	mov	r5, r1
 800975e:	da10      	bge.n	8009782 <scalbn+0x52>
 8009760:	a32b      	add	r3, pc, #172	; (adr r3, 8009810 <scalbn+0xe0>)
 8009762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009766:	e03a      	b.n	80097de <scalbn+0xae>
 8009768:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800976c:	428a      	cmp	r2, r1
 800976e:	d10c      	bne.n	800978a <scalbn+0x5a>
 8009770:	ee10 2a10 	vmov	r2, s0
 8009774:	4620      	mov	r0, r4
 8009776:	4629      	mov	r1, r5
 8009778:	f7f6 fd88 	bl	800028c <__adddf3>
 800977c:	4604      	mov	r4, r0
 800977e:	460d      	mov	r5, r1
 8009780:	e019      	b.n	80097b6 <scalbn+0x86>
 8009782:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009786:	460b      	mov	r3, r1
 8009788:	3a36      	subs	r2, #54	; 0x36
 800978a:	4432      	add	r2, r6
 800978c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009790:	428a      	cmp	r2, r1
 8009792:	dd08      	ble.n	80097a6 <scalbn+0x76>
 8009794:	2d00      	cmp	r5, #0
 8009796:	a120      	add	r1, pc, #128	; (adr r1, 8009818 <scalbn+0xe8>)
 8009798:	e9d1 0100 	ldrd	r0, r1, [r1]
 800979c:	da1c      	bge.n	80097d8 <scalbn+0xa8>
 800979e:	a120      	add	r1, pc, #128	; (adr r1, 8009820 <scalbn+0xf0>)
 80097a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097a4:	e018      	b.n	80097d8 <scalbn+0xa8>
 80097a6:	2a00      	cmp	r2, #0
 80097a8:	dd08      	ble.n	80097bc <scalbn+0x8c>
 80097aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80097b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80097b6:	ec45 4b10 	vmov	d0, r4, r5
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80097c0:	da19      	bge.n	80097f6 <scalbn+0xc6>
 80097c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80097c6:	429e      	cmp	r6, r3
 80097c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80097cc:	dd0a      	ble.n	80097e4 <scalbn+0xb4>
 80097ce:	a112      	add	r1, pc, #72	; (adr r1, 8009818 <scalbn+0xe8>)
 80097d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e2      	bne.n	800979e <scalbn+0x6e>
 80097d8:	a30f      	add	r3, pc, #60	; (adr r3, 8009818 <scalbn+0xe8>)
 80097da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097de:	f7f6 ff0b 	bl	80005f8 <__aeabi_dmul>
 80097e2:	e7cb      	b.n	800977c <scalbn+0x4c>
 80097e4:	a10a      	add	r1, pc, #40	; (adr r1, 8009810 <scalbn+0xe0>)
 80097e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d0b8      	beq.n	8009760 <scalbn+0x30>
 80097ee:	a10e      	add	r1, pc, #56	; (adr r1, 8009828 <scalbn+0xf8>)
 80097f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f4:	e7b4      	b.n	8009760 <scalbn+0x30>
 80097f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80097fa:	3236      	adds	r2, #54	; 0x36
 80097fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009800:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009804:	4620      	mov	r0, r4
 8009806:	4b0c      	ldr	r3, [pc, #48]	; (8009838 <scalbn+0x108>)
 8009808:	2200      	movs	r2, #0
 800980a:	e7e8      	b.n	80097de <scalbn+0xae>
 800980c:	f3af 8000 	nop.w
 8009810:	c2f8f359 	.word	0xc2f8f359
 8009814:	01a56e1f 	.word	0x01a56e1f
 8009818:	8800759c 	.word	0x8800759c
 800981c:	7e37e43c 	.word	0x7e37e43c
 8009820:	8800759c 	.word	0x8800759c
 8009824:	fe37e43c 	.word	0xfe37e43c
 8009828:	c2f8f359 	.word	0xc2f8f359
 800982c:	81a56e1f 	.word	0x81a56e1f
 8009830:	43500000 	.word	0x43500000
 8009834:	ffff3cb0 	.word	0xffff3cb0
 8009838:	3c900000 	.word	0x3c900000

0800983c <abort>:
 800983c:	b508      	push	{r3, lr}
 800983e:	2006      	movs	r0, #6
 8009840:	f000 fcde 	bl	800a200 <raise>
 8009844:	2001      	movs	r0, #1
 8009846:	f7fa fa7f 	bl	8003d48 <_exit>
	...

0800984c <__errno>:
 800984c:	4b01      	ldr	r3, [pc, #4]	; (8009854 <__errno+0x8>)
 800984e:	6818      	ldr	r0, [r3, #0]
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	20000010 	.word	0x20000010

08009858 <__libc_init_array>:
 8009858:	b570      	push	{r4, r5, r6, lr}
 800985a:	4d0d      	ldr	r5, [pc, #52]	; (8009890 <__libc_init_array+0x38>)
 800985c:	4c0d      	ldr	r4, [pc, #52]	; (8009894 <__libc_init_array+0x3c>)
 800985e:	1b64      	subs	r4, r4, r5
 8009860:	10a4      	asrs	r4, r4, #2
 8009862:	2600      	movs	r6, #0
 8009864:	42a6      	cmp	r6, r4
 8009866:	d109      	bne.n	800987c <__libc_init_array+0x24>
 8009868:	4d0b      	ldr	r5, [pc, #44]	; (8009898 <__libc_init_array+0x40>)
 800986a:	4c0c      	ldr	r4, [pc, #48]	; (800989c <__libc_init_array+0x44>)
 800986c:	f002 ff02 	bl	800c674 <_init>
 8009870:	1b64      	subs	r4, r4, r5
 8009872:	10a4      	asrs	r4, r4, #2
 8009874:	2600      	movs	r6, #0
 8009876:	42a6      	cmp	r6, r4
 8009878:	d105      	bne.n	8009886 <__libc_init_array+0x2e>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009880:	4798      	blx	r3
 8009882:	3601      	adds	r6, #1
 8009884:	e7ee      	b.n	8009864 <__libc_init_array+0xc>
 8009886:	f855 3b04 	ldr.w	r3, [r5], #4
 800988a:	4798      	blx	r3
 800988c:	3601      	adds	r6, #1
 800988e:	e7f2      	b.n	8009876 <__libc_init_array+0x1e>
 8009890:	0800cd34 	.word	0x0800cd34
 8009894:	0800cd34 	.word	0x0800cd34
 8009898:	0800cd34 	.word	0x0800cd34
 800989c:	0800cd3c 	.word	0x0800cd3c

080098a0 <memcpy>:
 80098a0:	440a      	add	r2, r1
 80098a2:	4291      	cmp	r1, r2
 80098a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80098a8:	d100      	bne.n	80098ac <memcpy+0xc>
 80098aa:	4770      	bx	lr
 80098ac:	b510      	push	{r4, lr}
 80098ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098b6:	4291      	cmp	r1, r2
 80098b8:	d1f9      	bne.n	80098ae <memcpy+0xe>
 80098ba:	bd10      	pop	{r4, pc}

080098bc <memset>:
 80098bc:	4402      	add	r2, r0
 80098be:	4603      	mov	r3, r0
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d100      	bne.n	80098c6 <memset+0xa>
 80098c4:	4770      	bx	lr
 80098c6:	f803 1b01 	strb.w	r1, [r3], #1
 80098ca:	e7f9      	b.n	80098c0 <memset+0x4>

080098cc <__cvt>:
 80098cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80098d0:	ec55 4b10 	vmov	r4, r5, d0
 80098d4:	2d00      	cmp	r5, #0
 80098d6:	460e      	mov	r6, r1
 80098d8:	4619      	mov	r1, r3
 80098da:	462b      	mov	r3, r5
 80098dc:	bfbb      	ittet	lt
 80098de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80098e2:	461d      	movlt	r5, r3
 80098e4:	2300      	movge	r3, #0
 80098e6:	232d      	movlt	r3, #45	; 0x2d
 80098e8:	700b      	strb	r3, [r1, #0]
 80098ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80098f0:	4691      	mov	r9, r2
 80098f2:	f023 0820 	bic.w	r8, r3, #32
 80098f6:	bfbc      	itt	lt
 80098f8:	4622      	movlt	r2, r4
 80098fa:	4614      	movlt	r4, r2
 80098fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009900:	d005      	beq.n	800990e <__cvt+0x42>
 8009902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009906:	d100      	bne.n	800990a <__cvt+0x3e>
 8009908:	3601      	adds	r6, #1
 800990a:	2102      	movs	r1, #2
 800990c:	e000      	b.n	8009910 <__cvt+0x44>
 800990e:	2103      	movs	r1, #3
 8009910:	ab03      	add	r3, sp, #12
 8009912:	9301      	str	r3, [sp, #4]
 8009914:	ab02      	add	r3, sp, #8
 8009916:	9300      	str	r3, [sp, #0]
 8009918:	ec45 4b10 	vmov	d0, r4, r5
 800991c:	4653      	mov	r3, sl
 800991e:	4632      	mov	r2, r6
 8009920:	f000 fd36 	bl	800a390 <_dtoa_r>
 8009924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009928:	4607      	mov	r7, r0
 800992a:	d102      	bne.n	8009932 <__cvt+0x66>
 800992c:	f019 0f01 	tst.w	r9, #1
 8009930:	d022      	beq.n	8009978 <__cvt+0xac>
 8009932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009936:	eb07 0906 	add.w	r9, r7, r6
 800993a:	d110      	bne.n	800995e <__cvt+0x92>
 800993c:	783b      	ldrb	r3, [r7, #0]
 800993e:	2b30      	cmp	r3, #48	; 0x30
 8009940:	d10a      	bne.n	8009958 <__cvt+0x8c>
 8009942:	2200      	movs	r2, #0
 8009944:	2300      	movs	r3, #0
 8009946:	4620      	mov	r0, r4
 8009948:	4629      	mov	r1, r5
 800994a:	f7f7 f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800994e:	b918      	cbnz	r0, 8009958 <__cvt+0x8c>
 8009950:	f1c6 0601 	rsb	r6, r6, #1
 8009954:	f8ca 6000 	str.w	r6, [sl]
 8009958:	f8da 3000 	ldr.w	r3, [sl]
 800995c:	4499      	add	r9, r3
 800995e:	2200      	movs	r2, #0
 8009960:	2300      	movs	r3, #0
 8009962:	4620      	mov	r0, r4
 8009964:	4629      	mov	r1, r5
 8009966:	f7f7 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800996a:	b108      	cbz	r0, 8009970 <__cvt+0xa4>
 800996c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009970:	2230      	movs	r2, #48	; 0x30
 8009972:	9b03      	ldr	r3, [sp, #12]
 8009974:	454b      	cmp	r3, r9
 8009976:	d307      	bcc.n	8009988 <__cvt+0xbc>
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800997c:	1bdb      	subs	r3, r3, r7
 800997e:	4638      	mov	r0, r7
 8009980:	6013      	str	r3, [r2, #0]
 8009982:	b004      	add	sp, #16
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	1c59      	adds	r1, r3, #1
 800998a:	9103      	str	r1, [sp, #12]
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	e7f0      	b.n	8009972 <__cvt+0xa6>

08009990 <__exponent>:
 8009990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009992:	4603      	mov	r3, r0
 8009994:	2900      	cmp	r1, #0
 8009996:	bfb8      	it	lt
 8009998:	4249      	neglt	r1, r1
 800999a:	f803 2b02 	strb.w	r2, [r3], #2
 800999e:	bfb4      	ite	lt
 80099a0:	222d      	movlt	r2, #45	; 0x2d
 80099a2:	222b      	movge	r2, #43	; 0x2b
 80099a4:	2909      	cmp	r1, #9
 80099a6:	7042      	strb	r2, [r0, #1]
 80099a8:	dd2a      	ble.n	8009a00 <__exponent+0x70>
 80099aa:	f10d 0407 	add.w	r4, sp, #7
 80099ae:	46a4      	mov	ip, r4
 80099b0:	270a      	movs	r7, #10
 80099b2:	46a6      	mov	lr, r4
 80099b4:	460a      	mov	r2, r1
 80099b6:	fb91 f6f7 	sdiv	r6, r1, r7
 80099ba:	fb07 1516 	mls	r5, r7, r6, r1
 80099be:	3530      	adds	r5, #48	; 0x30
 80099c0:	2a63      	cmp	r2, #99	; 0x63
 80099c2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80099c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80099ca:	4631      	mov	r1, r6
 80099cc:	dcf1      	bgt.n	80099b2 <__exponent+0x22>
 80099ce:	3130      	adds	r1, #48	; 0x30
 80099d0:	f1ae 0502 	sub.w	r5, lr, #2
 80099d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80099d8:	1c44      	adds	r4, r0, #1
 80099da:	4629      	mov	r1, r5
 80099dc:	4561      	cmp	r1, ip
 80099de:	d30a      	bcc.n	80099f6 <__exponent+0x66>
 80099e0:	f10d 0209 	add.w	r2, sp, #9
 80099e4:	eba2 020e 	sub.w	r2, r2, lr
 80099e8:	4565      	cmp	r5, ip
 80099ea:	bf88      	it	hi
 80099ec:	2200      	movhi	r2, #0
 80099ee:	4413      	add	r3, r2
 80099f0:	1a18      	subs	r0, r3, r0
 80099f2:	b003      	add	sp, #12
 80099f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80099fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80099fe:	e7ed      	b.n	80099dc <__exponent+0x4c>
 8009a00:	2330      	movs	r3, #48	; 0x30
 8009a02:	3130      	adds	r1, #48	; 0x30
 8009a04:	7083      	strb	r3, [r0, #2]
 8009a06:	70c1      	strb	r1, [r0, #3]
 8009a08:	1d03      	adds	r3, r0, #4
 8009a0a:	e7f1      	b.n	80099f0 <__exponent+0x60>

08009a0c <_printf_float>:
 8009a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a10:	ed2d 8b02 	vpush	{d8}
 8009a14:	b08d      	sub	sp, #52	; 0x34
 8009a16:	460c      	mov	r4, r1
 8009a18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a1c:	4616      	mov	r6, r2
 8009a1e:	461f      	mov	r7, r3
 8009a20:	4605      	mov	r5, r0
 8009a22:	f001 faa3 	bl	800af6c <_localeconv_r>
 8009a26:	f8d0 a000 	ldr.w	sl, [r0]
 8009a2a:	4650      	mov	r0, sl
 8009a2c:	f7f6 fbd0 	bl	80001d0 <strlen>
 8009a30:	2300      	movs	r3, #0
 8009a32:	930a      	str	r3, [sp, #40]	; 0x28
 8009a34:	6823      	ldr	r3, [r4, #0]
 8009a36:	9305      	str	r3, [sp, #20]
 8009a38:	f8d8 3000 	ldr.w	r3, [r8]
 8009a3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a40:	3307      	adds	r3, #7
 8009a42:	f023 0307 	bic.w	r3, r3, #7
 8009a46:	f103 0208 	add.w	r2, r3, #8
 8009a4a:	f8c8 2000 	str.w	r2, [r8]
 8009a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009a56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009a5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a5e:	9307      	str	r3, [sp, #28]
 8009a60:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a64:	ee08 0a10 	vmov	s16, r0
 8009a68:	4b9f      	ldr	r3, [pc, #636]	; (8009ce8 <_printf_float+0x2dc>)
 8009a6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a72:	f7f7 f85b 	bl	8000b2c <__aeabi_dcmpun>
 8009a76:	bb88      	cbnz	r0, 8009adc <_printf_float+0xd0>
 8009a78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a7c:	4b9a      	ldr	r3, [pc, #616]	; (8009ce8 <_printf_float+0x2dc>)
 8009a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a82:	f7f7 f835 	bl	8000af0 <__aeabi_dcmple>
 8009a86:	bb48      	cbnz	r0, 8009adc <_printf_float+0xd0>
 8009a88:	2200      	movs	r2, #0
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	4640      	mov	r0, r8
 8009a8e:	4649      	mov	r1, r9
 8009a90:	f7f7 f824 	bl	8000adc <__aeabi_dcmplt>
 8009a94:	b110      	cbz	r0, 8009a9c <_printf_float+0x90>
 8009a96:	232d      	movs	r3, #45	; 0x2d
 8009a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a9c:	4b93      	ldr	r3, [pc, #588]	; (8009cec <_printf_float+0x2e0>)
 8009a9e:	4894      	ldr	r0, [pc, #592]	; (8009cf0 <_printf_float+0x2e4>)
 8009aa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009aa4:	bf94      	ite	ls
 8009aa6:	4698      	movls	r8, r3
 8009aa8:	4680      	movhi	r8, r0
 8009aaa:	2303      	movs	r3, #3
 8009aac:	6123      	str	r3, [r4, #16]
 8009aae:	9b05      	ldr	r3, [sp, #20]
 8009ab0:	f023 0204 	bic.w	r2, r3, #4
 8009ab4:	6022      	str	r2, [r4, #0]
 8009ab6:	f04f 0900 	mov.w	r9, #0
 8009aba:	9700      	str	r7, [sp, #0]
 8009abc:	4633      	mov	r3, r6
 8009abe:	aa0b      	add	r2, sp, #44	; 0x2c
 8009ac0:	4621      	mov	r1, r4
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	f000 f9d8 	bl	8009e78 <_printf_common>
 8009ac8:	3001      	adds	r0, #1
 8009aca:	f040 8090 	bne.w	8009bee <_printf_float+0x1e2>
 8009ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ad2:	b00d      	add	sp, #52	; 0x34
 8009ad4:	ecbd 8b02 	vpop	{d8}
 8009ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009adc:	4642      	mov	r2, r8
 8009ade:	464b      	mov	r3, r9
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	f7f7 f822 	bl	8000b2c <__aeabi_dcmpun>
 8009ae8:	b140      	cbz	r0, 8009afc <_printf_float+0xf0>
 8009aea:	464b      	mov	r3, r9
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	bfbc      	itt	lt
 8009af0:	232d      	movlt	r3, #45	; 0x2d
 8009af2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009af6:	487f      	ldr	r0, [pc, #508]	; (8009cf4 <_printf_float+0x2e8>)
 8009af8:	4b7f      	ldr	r3, [pc, #508]	; (8009cf8 <_printf_float+0x2ec>)
 8009afa:	e7d1      	b.n	8009aa0 <_printf_float+0x94>
 8009afc:	6863      	ldr	r3, [r4, #4]
 8009afe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b02:	9206      	str	r2, [sp, #24]
 8009b04:	1c5a      	adds	r2, r3, #1
 8009b06:	d13f      	bne.n	8009b88 <_printf_float+0x17c>
 8009b08:	2306      	movs	r3, #6
 8009b0a:	6063      	str	r3, [r4, #4]
 8009b0c:	9b05      	ldr	r3, [sp, #20]
 8009b0e:	6861      	ldr	r1, [r4, #4]
 8009b10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b14:	2300      	movs	r3, #0
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	ab0a      	add	r3, sp, #40	; 0x28
 8009b1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b1e:	ab09      	add	r3, sp, #36	; 0x24
 8009b20:	ec49 8b10 	vmov	d0, r8, r9
 8009b24:	9300      	str	r3, [sp, #0]
 8009b26:	6022      	str	r2, [r4, #0]
 8009b28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b2c:	4628      	mov	r0, r5
 8009b2e:	f7ff fecd 	bl	80098cc <__cvt>
 8009b32:	9b06      	ldr	r3, [sp, #24]
 8009b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b36:	2b47      	cmp	r3, #71	; 0x47
 8009b38:	4680      	mov	r8, r0
 8009b3a:	d108      	bne.n	8009b4e <_printf_float+0x142>
 8009b3c:	1cc8      	adds	r0, r1, #3
 8009b3e:	db02      	blt.n	8009b46 <_printf_float+0x13a>
 8009b40:	6863      	ldr	r3, [r4, #4]
 8009b42:	4299      	cmp	r1, r3
 8009b44:	dd41      	ble.n	8009bca <_printf_float+0x1be>
 8009b46:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b4a:	fa5f fb8b 	uxtb.w	fp, fp
 8009b4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b52:	d820      	bhi.n	8009b96 <_printf_float+0x18a>
 8009b54:	3901      	subs	r1, #1
 8009b56:	465a      	mov	r2, fp
 8009b58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b5c:	9109      	str	r1, [sp, #36]	; 0x24
 8009b5e:	f7ff ff17 	bl	8009990 <__exponent>
 8009b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b64:	1813      	adds	r3, r2, r0
 8009b66:	2a01      	cmp	r2, #1
 8009b68:	4681      	mov	r9, r0
 8009b6a:	6123      	str	r3, [r4, #16]
 8009b6c:	dc02      	bgt.n	8009b74 <_printf_float+0x168>
 8009b6e:	6822      	ldr	r2, [r4, #0]
 8009b70:	07d2      	lsls	r2, r2, #31
 8009b72:	d501      	bpl.n	8009b78 <_printf_float+0x16c>
 8009b74:	3301      	adds	r3, #1
 8009b76:	6123      	str	r3, [r4, #16]
 8009b78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d09c      	beq.n	8009aba <_printf_float+0xae>
 8009b80:	232d      	movs	r3, #45	; 0x2d
 8009b82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b86:	e798      	b.n	8009aba <_printf_float+0xae>
 8009b88:	9a06      	ldr	r2, [sp, #24]
 8009b8a:	2a47      	cmp	r2, #71	; 0x47
 8009b8c:	d1be      	bne.n	8009b0c <_printf_float+0x100>
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1bc      	bne.n	8009b0c <_printf_float+0x100>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e7b9      	b.n	8009b0a <_printf_float+0xfe>
 8009b96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b9a:	d118      	bne.n	8009bce <_printf_float+0x1c2>
 8009b9c:	2900      	cmp	r1, #0
 8009b9e:	6863      	ldr	r3, [r4, #4]
 8009ba0:	dd0b      	ble.n	8009bba <_printf_float+0x1ae>
 8009ba2:	6121      	str	r1, [r4, #16]
 8009ba4:	b913      	cbnz	r3, 8009bac <_printf_float+0x1a0>
 8009ba6:	6822      	ldr	r2, [r4, #0]
 8009ba8:	07d0      	lsls	r0, r2, #31
 8009baa:	d502      	bpl.n	8009bb2 <_printf_float+0x1a6>
 8009bac:	3301      	adds	r3, #1
 8009bae:	440b      	add	r3, r1
 8009bb0:	6123      	str	r3, [r4, #16]
 8009bb2:	65a1      	str	r1, [r4, #88]	; 0x58
 8009bb4:	f04f 0900 	mov.w	r9, #0
 8009bb8:	e7de      	b.n	8009b78 <_printf_float+0x16c>
 8009bba:	b913      	cbnz	r3, 8009bc2 <_printf_float+0x1b6>
 8009bbc:	6822      	ldr	r2, [r4, #0]
 8009bbe:	07d2      	lsls	r2, r2, #31
 8009bc0:	d501      	bpl.n	8009bc6 <_printf_float+0x1ba>
 8009bc2:	3302      	adds	r3, #2
 8009bc4:	e7f4      	b.n	8009bb0 <_printf_float+0x1a4>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e7f2      	b.n	8009bb0 <_printf_float+0x1a4>
 8009bca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009bce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd0:	4299      	cmp	r1, r3
 8009bd2:	db05      	blt.n	8009be0 <_printf_float+0x1d4>
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	6121      	str	r1, [r4, #16]
 8009bd8:	07d8      	lsls	r0, r3, #31
 8009bda:	d5ea      	bpl.n	8009bb2 <_printf_float+0x1a6>
 8009bdc:	1c4b      	adds	r3, r1, #1
 8009bde:	e7e7      	b.n	8009bb0 <_printf_float+0x1a4>
 8009be0:	2900      	cmp	r1, #0
 8009be2:	bfd4      	ite	le
 8009be4:	f1c1 0202 	rsble	r2, r1, #2
 8009be8:	2201      	movgt	r2, #1
 8009bea:	4413      	add	r3, r2
 8009bec:	e7e0      	b.n	8009bb0 <_printf_float+0x1a4>
 8009bee:	6823      	ldr	r3, [r4, #0]
 8009bf0:	055a      	lsls	r2, r3, #21
 8009bf2:	d407      	bmi.n	8009c04 <_printf_float+0x1f8>
 8009bf4:	6923      	ldr	r3, [r4, #16]
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	4631      	mov	r1, r6
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	47b8      	blx	r7
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d12c      	bne.n	8009c5c <_printf_float+0x250>
 8009c02:	e764      	b.n	8009ace <_printf_float+0xc2>
 8009c04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c08:	f240 80e0 	bls.w	8009dcc <_printf_float+0x3c0>
 8009c0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c10:	2200      	movs	r2, #0
 8009c12:	2300      	movs	r3, #0
 8009c14:	f7f6 ff58 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d034      	beq.n	8009c86 <_printf_float+0x27a>
 8009c1c:	4a37      	ldr	r2, [pc, #220]	; (8009cfc <_printf_float+0x2f0>)
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4631      	mov	r1, r6
 8009c22:	4628      	mov	r0, r5
 8009c24:	47b8      	blx	r7
 8009c26:	3001      	adds	r0, #1
 8009c28:	f43f af51 	beq.w	8009ace <_printf_float+0xc2>
 8009c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c30:	429a      	cmp	r2, r3
 8009c32:	db02      	blt.n	8009c3a <_printf_float+0x22e>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	07d8      	lsls	r0, r3, #31
 8009c38:	d510      	bpl.n	8009c5c <_printf_float+0x250>
 8009c3a:	ee18 3a10 	vmov	r3, s16
 8009c3e:	4652      	mov	r2, sl
 8009c40:	4631      	mov	r1, r6
 8009c42:	4628      	mov	r0, r5
 8009c44:	47b8      	blx	r7
 8009c46:	3001      	adds	r0, #1
 8009c48:	f43f af41 	beq.w	8009ace <_printf_float+0xc2>
 8009c4c:	f04f 0800 	mov.w	r8, #0
 8009c50:	f104 091a 	add.w	r9, r4, #26
 8009c54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c56:	3b01      	subs	r3, #1
 8009c58:	4543      	cmp	r3, r8
 8009c5a:	dc09      	bgt.n	8009c70 <_printf_float+0x264>
 8009c5c:	6823      	ldr	r3, [r4, #0]
 8009c5e:	079b      	lsls	r3, r3, #30
 8009c60:	f100 8105 	bmi.w	8009e6e <_printf_float+0x462>
 8009c64:	68e0      	ldr	r0, [r4, #12]
 8009c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c68:	4298      	cmp	r0, r3
 8009c6a:	bfb8      	it	lt
 8009c6c:	4618      	movlt	r0, r3
 8009c6e:	e730      	b.n	8009ad2 <_printf_float+0xc6>
 8009c70:	2301      	movs	r3, #1
 8009c72:	464a      	mov	r2, r9
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f af27 	beq.w	8009ace <_printf_float+0xc2>
 8009c80:	f108 0801 	add.w	r8, r8, #1
 8009c84:	e7e6      	b.n	8009c54 <_printf_float+0x248>
 8009c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc39      	bgt.n	8009d00 <_printf_float+0x2f4>
 8009c8c:	4a1b      	ldr	r2, [pc, #108]	; (8009cfc <_printf_float+0x2f0>)
 8009c8e:	2301      	movs	r3, #1
 8009c90:	4631      	mov	r1, r6
 8009c92:	4628      	mov	r0, r5
 8009c94:	47b8      	blx	r7
 8009c96:	3001      	adds	r0, #1
 8009c98:	f43f af19 	beq.w	8009ace <_printf_float+0xc2>
 8009c9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	d102      	bne.n	8009caa <_printf_float+0x29e>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	07d9      	lsls	r1, r3, #31
 8009ca8:	d5d8      	bpl.n	8009c5c <_printf_float+0x250>
 8009caa:	ee18 3a10 	vmov	r3, s16
 8009cae:	4652      	mov	r2, sl
 8009cb0:	4631      	mov	r1, r6
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b8      	blx	r7
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f43f af09 	beq.w	8009ace <_printf_float+0xc2>
 8009cbc:	f04f 0900 	mov.w	r9, #0
 8009cc0:	f104 0a1a 	add.w	sl, r4, #26
 8009cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cc6:	425b      	negs	r3, r3
 8009cc8:	454b      	cmp	r3, r9
 8009cca:	dc01      	bgt.n	8009cd0 <_printf_float+0x2c4>
 8009ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cce:	e792      	b.n	8009bf6 <_printf_float+0x1ea>
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	47b8      	blx	r7
 8009cda:	3001      	adds	r0, #1
 8009cdc:	f43f aef7 	beq.w	8009ace <_printf_float+0xc2>
 8009ce0:	f109 0901 	add.w	r9, r9, #1
 8009ce4:	e7ee      	b.n	8009cc4 <_printf_float+0x2b8>
 8009ce6:	bf00      	nop
 8009ce8:	7fefffff 	.word	0x7fefffff
 8009cec:	0800c954 	.word	0x0800c954
 8009cf0:	0800c958 	.word	0x0800c958
 8009cf4:	0800c960 	.word	0x0800c960
 8009cf8:	0800c95c 	.word	0x0800c95c
 8009cfc:	0800c964 	.word	0x0800c964
 8009d00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d04:	429a      	cmp	r2, r3
 8009d06:	bfa8      	it	ge
 8009d08:	461a      	movge	r2, r3
 8009d0a:	2a00      	cmp	r2, #0
 8009d0c:	4691      	mov	r9, r2
 8009d0e:	dc37      	bgt.n	8009d80 <_printf_float+0x374>
 8009d10:	f04f 0b00 	mov.w	fp, #0
 8009d14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d18:	f104 021a 	add.w	r2, r4, #26
 8009d1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d1e:	9305      	str	r3, [sp, #20]
 8009d20:	eba3 0309 	sub.w	r3, r3, r9
 8009d24:	455b      	cmp	r3, fp
 8009d26:	dc33      	bgt.n	8009d90 <_printf_float+0x384>
 8009d28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	db3b      	blt.n	8009da8 <_printf_float+0x39c>
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	07da      	lsls	r2, r3, #31
 8009d34:	d438      	bmi.n	8009da8 <_printf_float+0x39c>
 8009d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d38:	9a05      	ldr	r2, [sp, #20]
 8009d3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d3c:	1a9a      	subs	r2, r3, r2
 8009d3e:	eba3 0901 	sub.w	r9, r3, r1
 8009d42:	4591      	cmp	r9, r2
 8009d44:	bfa8      	it	ge
 8009d46:	4691      	movge	r9, r2
 8009d48:	f1b9 0f00 	cmp.w	r9, #0
 8009d4c:	dc35      	bgt.n	8009dba <_printf_float+0x3ae>
 8009d4e:	f04f 0800 	mov.w	r8, #0
 8009d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d56:	f104 0a1a 	add.w	sl, r4, #26
 8009d5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d5e:	1a9b      	subs	r3, r3, r2
 8009d60:	eba3 0309 	sub.w	r3, r3, r9
 8009d64:	4543      	cmp	r3, r8
 8009d66:	f77f af79 	ble.w	8009c5c <_printf_float+0x250>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	4652      	mov	r2, sl
 8009d6e:	4631      	mov	r1, r6
 8009d70:	4628      	mov	r0, r5
 8009d72:	47b8      	blx	r7
 8009d74:	3001      	adds	r0, #1
 8009d76:	f43f aeaa 	beq.w	8009ace <_printf_float+0xc2>
 8009d7a:	f108 0801 	add.w	r8, r8, #1
 8009d7e:	e7ec      	b.n	8009d5a <_printf_float+0x34e>
 8009d80:	4613      	mov	r3, r2
 8009d82:	4631      	mov	r1, r6
 8009d84:	4642      	mov	r2, r8
 8009d86:	4628      	mov	r0, r5
 8009d88:	47b8      	blx	r7
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d1c0      	bne.n	8009d10 <_printf_float+0x304>
 8009d8e:	e69e      	b.n	8009ace <_printf_float+0xc2>
 8009d90:	2301      	movs	r3, #1
 8009d92:	4631      	mov	r1, r6
 8009d94:	4628      	mov	r0, r5
 8009d96:	9205      	str	r2, [sp, #20]
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f ae97 	beq.w	8009ace <_printf_float+0xc2>
 8009da0:	9a05      	ldr	r2, [sp, #20]
 8009da2:	f10b 0b01 	add.w	fp, fp, #1
 8009da6:	e7b9      	b.n	8009d1c <_printf_float+0x310>
 8009da8:	ee18 3a10 	vmov	r3, s16
 8009dac:	4652      	mov	r2, sl
 8009dae:	4631      	mov	r1, r6
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	d1be      	bne.n	8009d36 <_printf_float+0x32a>
 8009db8:	e689      	b.n	8009ace <_printf_float+0xc2>
 8009dba:	9a05      	ldr	r2, [sp, #20]
 8009dbc:	464b      	mov	r3, r9
 8009dbe:	4442      	add	r2, r8
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b8      	blx	r7
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d1c1      	bne.n	8009d4e <_printf_float+0x342>
 8009dca:	e680      	b.n	8009ace <_printf_float+0xc2>
 8009dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009dce:	2a01      	cmp	r2, #1
 8009dd0:	dc01      	bgt.n	8009dd6 <_printf_float+0x3ca>
 8009dd2:	07db      	lsls	r3, r3, #31
 8009dd4:	d538      	bpl.n	8009e48 <_printf_float+0x43c>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f ae74 	beq.w	8009ace <_printf_float+0xc2>
 8009de6:	ee18 3a10 	vmov	r3, s16
 8009dea:	4652      	mov	r2, sl
 8009dec:	4631      	mov	r1, r6
 8009dee:	4628      	mov	r0, r5
 8009df0:	47b8      	blx	r7
 8009df2:	3001      	adds	r0, #1
 8009df4:	f43f ae6b 	beq.w	8009ace <_printf_float+0xc2>
 8009df8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	2300      	movs	r3, #0
 8009e00:	f7f6 fe62 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e04:	b9d8      	cbnz	r0, 8009e3e <_printf_float+0x432>
 8009e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e08:	f108 0201 	add.w	r2, r8, #1
 8009e0c:	3b01      	subs	r3, #1
 8009e0e:	4631      	mov	r1, r6
 8009e10:	4628      	mov	r0, r5
 8009e12:	47b8      	blx	r7
 8009e14:	3001      	adds	r0, #1
 8009e16:	d10e      	bne.n	8009e36 <_printf_float+0x42a>
 8009e18:	e659      	b.n	8009ace <_printf_float+0xc2>
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	4631      	mov	r1, r6
 8009e20:	4628      	mov	r0, r5
 8009e22:	47b8      	blx	r7
 8009e24:	3001      	adds	r0, #1
 8009e26:	f43f ae52 	beq.w	8009ace <_printf_float+0xc2>
 8009e2a:	f108 0801 	add.w	r8, r8, #1
 8009e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e30:	3b01      	subs	r3, #1
 8009e32:	4543      	cmp	r3, r8
 8009e34:	dcf1      	bgt.n	8009e1a <_printf_float+0x40e>
 8009e36:	464b      	mov	r3, r9
 8009e38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e3c:	e6dc      	b.n	8009bf8 <_printf_float+0x1ec>
 8009e3e:	f04f 0800 	mov.w	r8, #0
 8009e42:	f104 0a1a 	add.w	sl, r4, #26
 8009e46:	e7f2      	b.n	8009e2e <_printf_float+0x422>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4642      	mov	r2, r8
 8009e4c:	e7df      	b.n	8009e0e <_printf_float+0x402>
 8009e4e:	2301      	movs	r3, #1
 8009e50:	464a      	mov	r2, r9
 8009e52:	4631      	mov	r1, r6
 8009e54:	4628      	mov	r0, r5
 8009e56:	47b8      	blx	r7
 8009e58:	3001      	adds	r0, #1
 8009e5a:	f43f ae38 	beq.w	8009ace <_printf_float+0xc2>
 8009e5e:	f108 0801 	add.w	r8, r8, #1
 8009e62:	68e3      	ldr	r3, [r4, #12]
 8009e64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e66:	1a5b      	subs	r3, r3, r1
 8009e68:	4543      	cmp	r3, r8
 8009e6a:	dcf0      	bgt.n	8009e4e <_printf_float+0x442>
 8009e6c:	e6fa      	b.n	8009c64 <_printf_float+0x258>
 8009e6e:	f04f 0800 	mov.w	r8, #0
 8009e72:	f104 0919 	add.w	r9, r4, #25
 8009e76:	e7f4      	b.n	8009e62 <_printf_float+0x456>

08009e78 <_printf_common>:
 8009e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e7c:	4616      	mov	r6, r2
 8009e7e:	4699      	mov	r9, r3
 8009e80:	688a      	ldr	r2, [r1, #8]
 8009e82:	690b      	ldr	r3, [r1, #16]
 8009e84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	bfb8      	it	lt
 8009e8c:	4613      	movlt	r3, r2
 8009e8e:	6033      	str	r3, [r6, #0]
 8009e90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e94:	4607      	mov	r7, r0
 8009e96:	460c      	mov	r4, r1
 8009e98:	b10a      	cbz	r2, 8009e9e <_printf_common+0x26>
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	6033      	str	r3, [r6, #0]
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	0699      	lsls	r1, r3, #26
 8009ea2:	bf42      	ittt	mi
 8009ea4:	6833      	ldrmi	r3, [r6, #0]
 8009ea6:	3302      	addmi	r3, #2
 8009ea8:	6033      	strmi	r3, [r6, #0]
 8009eaa:	6825      	ldr	r5, [r4, #0]
 8009eac:	f015 0506 	ands.w	r5, r5, #6
 8009eb0:	d106      	bne.n	8009ec0 <_printf_common+0x48>
 8009eb2:	f104 0a19 	add.w	sl, r4, #25
 8009eb6:	68e3      	ldr	r3, [r4, #12]
 8009eb8:	6832      	ldr	r2, [r6, #0]
 8009eba:	1a9b      	subs	r3, r3, r2
 8009ebc:	42ab      	cmp	r3, r5
 8009ebe:	dc26      	bgt.n	8009f0e <_printf_common+0x96>
 8009ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ec4:	1e13      	subs	r3, r2, #0
 8009ec6:	6822      	ldr	r2, [r4, #0]
 8009ec8:	bf18      	it	ne
 8009eca:	2301      	movne	r3, #1
 8009ecc:	0692      	lsls	r2, r2, #26
 8009ece:	d42b      	bmi.n	8009f28 <_printf_common+0xb0>
 8009ed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	4638      	mov	r0, r7
 8009ed8:	47c0      	blx	r8
 8009eda:	3001      	adds	r0, #1
 8009edc:	d01e      	beq.n	8009f1c <_printf_common+0xa4>
 8009ede:	6823      	ldr	r3, [r4, #0]
 8009ee0:	68e5      	ldr	r5, [r4, #12]
 8009ee2:	6832      	ldr	r2, [r6, #0]
 8009ee4:	f003 0306 	and.w	r3, r3, #6
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	bf08      	it	eq
 8009eec:	1aad      	subeq	r5, r5, r2
 8009eee:	68a3      	ldr	r3, [r4, #8]
 8009ef0:	6922      	ldr	r2, [r4, #16]
 8009ef2:	bf0c      	ite	eq
 8009ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ef8:	2500      	movne	r5, #0
 8009efa:	4293      	cmp	r3, r2
 8009efc:	bfc4      	itt	gt
 8009efe:	1a9b      	subgt	r3, r3, r2
 8009f00:	18ed      	addgt	r5, r5, r3
 8009f02:	2600      	movs	r6, #0
 8009f04:	341a      	adds	r4, #26
 8009f06:	42b5      	cmp	r5, r6
 8009f08:	d11a      	bne.n	8009f40 <_printf_common+0xc8>
 8009f0a:	2000      	movs	r0, #0
 8009f0c:	e008      	b.n	8009f20 <_printf_common+0xa8>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4652      	mov	r2, sl
 8009f12:	4649      	mov	r1, r9
 8009f14:	4638      	mov	r0, r7
 8009f16:	47c0      	blx	r8
 8009f18:	3001      	adds	r0, #1
 8009f1a:	d103      	bne.n	8009f24 <_printf_common+0xac>
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f24:	3501      	adds	r5, #1
 8009f26:	e7c6      	b.n	8009eb6 <_printf_common+0x3e>
 8009f28:	18e1      	adds	r1, r4, r3
 8009f2a:	1c5a      	adds	r2, r3, #1
 8009f2c:	2030      	movs	r0, #48	; 0x30
 8009f2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f32:	4422      	add	r2, r4
 8009f34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f3c:	3302      	adds	r3, #2
 8009f3e:	e7c7      	b.n	8009ed0 <_printf_common+0x58>
 8009f40:	2301      	movs	r3, #1
 8009f42:	4622      	mov	r2, r4
 8009f44:	4649      	mov	r1, r9
 8009f46:	4638      	mov	r0, r7
 8009f48:	47c0      	blx	r8
 8009f4a:	3001      	adds	r0, #1
 8009f4c:	d0e6      	beq.n	8009f1c <_printf_common+0xa4>
 8009f4e:	3601      	adds	r6, #1
 8009f50:	e7d9      	b.n	8009f06 <_printf_common+0x8e>
	...

08009f54 <_printf_i>:
 8009f54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f58:	7e0f      	ldrb	r7, [r1, #24]
 8009f5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f5c:	2f78      	cmp	r7, #120	; 0x78
 8009f5e:	4691      	mov	r9, r2
 8009f60:	4680      	mov	r8, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	469a      	mov	sl, r3
 8009f66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f6a:	d807      	bhi.n	8009f7c <_printf_i+0x28>
 8009f6c:	2f62      	cmp	r7, #98	; 0x62
 8009f6e:	d80a      	bhi.n	8009f86 <_printf_i+0x32>
 8009f70:	2f00      	cmp	r7, #0
 8009f72:	f000 80d8 	beq.w	800a126 <_printf_i+0x1d2>
 8009f76:	2f58      	cmp	r7, #88	; 0x58
 8009f78:	f000 80a3 	beq.w	800a0c2 <_printf_i+0x16e>
 8009f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f84:	e03a      	b.n	8009ffc <_printf_i+0xa8>
 8009f86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f8a:	2b15      	cmp	r3, #21
 8009f8c:	d8f6      	bhi.n	8009f7c <_printf_i+0x28>
 8009f8e:	a101      	add	r1, pc, #4	; (adr r1, 8009f94 <_printf_i+0x40>)
 8009f90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f94:	08009fed 	.word	0x08009fed
 8009f98:	0800a001 	.word	0x0800a001
 8009f9c:	08009f7d 	.word	0x08009f7d
 8009fa0:	08009f7d 	.word	0x08009f7d
 8009fa4:	08009f7d 	.word	0x08009f7d
 8009fa8:	08009f7d 	.word	0x08009f7d
 8009fac:	0800a001 	.word	0x0800a001
 8009fb0:	08009f7d 	.word	0x08009f7d
 8009fb4:	08009f7d 	.word	0x08009f7d
 8009fb8:	08009f7d 	.word	0x08009f7d
 8009fbc:	08009f7d 	.word	0x08009f7d
 8009fc0:	0800a10d 	.word	0x0800a10d
 8009fc4:	0800a031 	.word	0x0800a031
 8009fc8:	0800a0ef 	.word	0x0800a0ef
 8009fcc:	08009f7d 	.word	0x08009f7d
 8009fd0:	08009f7d 	.word	0x08009f7d
 8009fd4:	0800a12f 	.word	0x0800a12f
 8009fd8:	08009f7d 	.word	0x08009f7d
 8009fdc:	0800a031 	.word	0x0800a031
 8009fe0:	08009f7d 	.word	0x08009f7d
 8009fe4:	08009f7d 	.word	0x08009f7d
 8009fe8:	0800a0f7 	.word	0x0800a0f7
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	1d1a      	adds	r2, r3, #4
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	602a      	str	r2, [r5, #0]
 8009ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e0a3      	b.n	800a148 <_printf_i+0x1f4>
 800a000:	6820      	ldr	r0, [r4, #0]
 800a002:	6829      	ldr	r1, [r5, #0]
 800a004:	0606      	lsls	r6, r0, #24
 800a006:	f101 0304 	add.w	r3, r1, #4
 800a00a:	d50a      	bpl.n	800a022 <_printf_i+0xce>
 800a00c:	680e      	ldr	r6, [r1, #0]
 800a00e:	602b      	str	r3, [r5, #0]
 800a010:	2e00      	cmp	r6, #0
 800a012:	da03      	bge.n	800a01c <_printf_i+0xc8>
 800a014:	232d      	movs	r3, #45	; 0x2d
 800a016:	4276      	negs	r6, r6
 800a018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a01c:	485e      	ldr	r0, [pc, #376]	; (800a198 <_printf_i+0x244>)
 800a01e:	230a      	movs	r3, #10
 800a020:	e019      	b.n	800a056 <_printf_i+0x102>
 800a022:	680e      	ldr	r6, [r1, #0]
 800a024:	602b      	str	r3, [r5, #0]
 800a026:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a02a:	bf18      	it	ne
 800a02c:	b236      	sxthne	r6, r6
 800a02e:	e7ef      	b.n	800a010 <_printf_i+0xbc>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	6820      	ldr	r0, [r4, #0]
 800a034:	1d19      	adds	r1, r3, #4
 800a036:	6029      	str	r1, [r5, #0]
 800a038:	0601      	lsls	r1, r0, #24
 800a03a:	d501      	bpl.n	800a040 <_printf_i+0xec>
 800a03c:	681e      	ldr	r6, [r3, #0]
 800a03e:	e002      	b.n	800a046 <_printf_i+0xf2>
 800a040:	0646      	lsls	r6, r0, #25
 800a042:	d5fb      	bpl.n	800a03c <_printf_i+0xe8>
 800a044:	881e      	ldrh	r6, [r3, #0]
 800a046:	4854      	ldr	r0, [pc, #336]	; (800a198 <_printf_i+0x244>)
 800a048:	2f6f      	cmp	r7, #111	; 0x6f
 800a04a:	bf0c      	ite	eq
 800a04c:	2308      	moveq	r3, #8
 800a04e:	230a      	movne	r3, #10
 800a050:	2100      	movs	r1, #0
 800a052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a056:	6865      	ldr	r5, [r4, #4]
 800a058:	60a5      	str	r5, [r4, #8]
 800a05a:	2d00      	cmp	r5, #0
 800a05c:	bfa2      	ittt	ge
 800a05e:	6821      	ldrge	r1, [r4, #0]
 800a060:	f021 0104 	bicge.w	r1, r1, #4
 800a064:	6021      	strge	r1, [r4, #0]
 800a066:	b90e      	cbnz	r6, 800a06c <_printf_i+0x118>
 800a068:	2d00      	cmp	r5, #0
 800a06a:	d04d      	beq.n	800a108 <_printf_i+0x1b4>
 800a06c:	4615      	mov	r5, r2
 800a06e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a072:	fb03 6711 	mls	r7, r3, r1, r6
 800a076:	5dc7      	ldrb	r7, [r0, r7]
 800a078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a07c:	4637      	mov	r7, r6
 800a07e:	42bb      	cmp	r3, r7
 800a080:	460e      	mov	r6, r1
 800a082:	d9f4      	bls.n	800a06e <_printf_i+0x11a>
 800a084:	2b08      	cmp	r3, #8
 800a086:	d10b      	bne.n	800a0a0 <_printf_i+0x14c>
 800a088:	6823      	ldr	r3, [r4, #0]
 800a08a:	07de      	lsls	r6, r3, #31
 800a08c:	d508      	bpl.n	800a0a0 <_printf_i+0x14c>
 800a08e:	6923      	ldr	r3, [r4, #16]
 800a090:	6861      	ldr	r1, [r4, #4]
 800a092:	4299      	cmp	r1, r3
 800a094:	bfde      	ittt	le
 800a096:	2330      	movle	r3, #48	; 0x30
 800a098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a09c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a0a0:	1b52      	subs	r2, r2, r5
 800a0a2:	6122      	str	r2, [r4, #16]
 800a0a4:	f8cd a000 	str.w	sl, [sp]
 800a0a8:	464b      	mov	r3, r9
 800a0aa:	aa03      	add	r2, sp, #12
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	4640      	mov	r0, r8
 800a0b0:	f7ff fee2 	bl	8009e78 <_printf_common>
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d14c      	bne.n	800a152 <_printf_i+0x1fe>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0bc:	b004      	add	sp, #16
 800a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c2:	4835      	ldr	r0, [pc, #212]	; (800a198 <_printf_i+0x244>)
 800a0c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0c8:	6829      	ldr	r1, [r5, #0]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0d0:	6029      	str	r1, [r5, #0]
 800a0d2:	061d      	lsls	r5, r3, #24
 800a0d4:	d514      	bpl.n	800a100 <_printf_i+0x1ac>
 800a0d6:	07df      	lsls	r7, r3, #31
 800a0d8:	bf44      	itt	mi
 800a0da:	f043 0320 	orrmi.w	r3, r3, #32
 800a0de:	6023      	strmi	r3, [r4, #0]
 800a0e0:	b91e      	cbnz	r6, 800a0ea <_printf_i+0x196>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	f023 0320 	bic.w	r3, r3, #32
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	2310      	movs	r3, #16
 800a0ec:	e7b0      	b.n	800a050 <_printf_i+0xfc>
 800a0ee:	6823      	ldr	r3, [r4, #0]
 800a0f0:	f043 0320 	orr.w	r3, r3, #32
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	2378      	movs	r3, #120	; 0x78
 800a0f8:	4828      	ldr	r0, [pc, #160]	; (800a19c <_printf_i+0x248>)
 800a0fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0fe:	e7e3      	b.n	800a0c8 <_printf_i+0x174>
 800a100:	0659      	lsls	r1, r3, #25
 800a102:	bf48      	it	mi
 800a104:	b2b6      	uxthmi	r6, r6
 800a106:	e7e6      	b.n	800a0d6 <_printf_i+0x182>
 800a108:	4615      	mov	r5, r2
 800a10a:	e7bb      	b.n	800a084 <_printf_i+0x130>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	6826      	ldr	r6, [r4, #0]
 800a110:	6961      	ldr	r1, [r4, #20]
 800a112:	1d18      	adds	r0, r3, #4
 800a114:	6028      	str	r0, [r5, #0]
 800a116:	0635      	lsls	r5, r6, #24
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	d501      	bpl.n	800a120 <_printf_i+0x1cc>
 800a11c:	6019      	str	r1, [r3, #0]
 800a11e:	e002      	b.n	800a126 <_printf_i+0x1d2>
 800a120:	0670      	lsls	r0, r6, #25
 800a122:	d5fb      	bpl.n	800a11c <_printf_i+0x1c8>
 800a124:	8019      	strh	r1, [r3, #0]
 800a126:	2300      	movs	r3, #0
 800a128:	6123      	str	r3, [r4, #16]
 800a12a:	4615      	mov	r5, r2
 800a12c:	e7ba      	b.n	800a0a4 <_printf_i+0x150>
 800a12e:	682b      	ldr	r3, [r5, #0]
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	602a      	str	r2, [r5, #0]
 800a134:	681d      	ldr	r5, [r3, #0]
 800a136:	6862      	ldr	r2, [r4, #4]
 800a138:	2100      	movs	r1, #0
 800a13a:	4628      	mov	r0, r5
 800a13c:	f7f6 f850 	bl	80001e0 <memchr>
 800a140:	b108      	cbz	r0, 800a146 <_printf_i+0x1f2>
 800a142:	1b40      	subs	r0, r0, r5
 800a144:	6060      	str	r0, [r4, #4]
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	2300      	movs	r3, #0
 800a14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a150:	e7a8      	b.n	800a0a4 <_printf_i+0x150>
 800a152:	6923      	ldr	r3, [r4, #16]
 800a154:	462a      	mov	r2, r5
 800a156:	4649      	mov	r1, r9
 800a158:	4640      	mov	r0, r8
 800a15a:	47d0      	blx	sl
 800a15c:	3001      	adds	r0, #1
 800a15e:	d0ab      	beq.n	800a0b8 <_printf_i+0x164>
 800a160:	6823      	ldr	r3, [r4, #0]
 800a162:	079b      	lsls	r3, r3, #30
 800a164:	d413      	bmi.n	800a18e <_printf_i+0x23a>
 800a166:	68e0      	ldr	r0, [r4, #12]
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	4298      	cmp	r0, r3
 800a16c:	bfb8      	it	lt
 800a16e:	4618      	movlt	r0, r3
 800a170:	e7a4      	b.n	800a0bc <_printf_i+0x168>
 800a172:	2301      	movs	r3, #1
 800a174:	4632      	mov	r2, r6
 800a176:	4649      	mov	r1, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	47d0      	blx	sl
 800a17c:	3001      	adds	r0, #1
 800a17e:	d09b      	beq.n	800a0b8 <_printf_i+0x164>
 800a180:	3501      	adds	r5, #1
 800a182:	68e3      	ldr	r3, [r4, #12]
 800a184:	9903      	ldr	r1, [sp, #12]
 800a186:	1a5b      	subs	r3, r3, r1
 800a188:	42ab      	cmp	r3, r5
 800a18a:	dcf2      	bgt.n	800a172 <_printf_i+0x21e>
 800a18c:	e7eb      	b.n	800a166 <_printf_i+0x212>
 800a18e:	2500      	movs	r5, #0
 800a190:	f104 0619 	add.w	r6, r4, #25
 800a194:	e7f5      	b.n	800a182 <_printf_i+0x22e>
 800a196:	bf00      	nop
 800a198:	0800c966 	.word	0x0800c966
 800a19c:	0800c977 	.word	0x0800c977

0800a1a0 <realloc>:
 800a1a0:	4b02      	ldr	r3, [pc, #8]	; (800a1ac <realloc+0xc>)
 800a1a2:	460a      	mov	r2, r1
 800a1a4:	4601      	mov	r1, r0
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	f001 bb66 	b.w	800b878 <_realloc_r>
 800a1ac:	20000010 	.word	0x20000010

0800a1b0 <_raise_r>:
 800a1b0:	291f      	cmp	r1, #31
 800a1b2:	b538      	push	{r3, r4, r5, lr}
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	d904      	bls.n	800a1c4 <_raise_r+0x14>
 800a1ba:	2316      	movs	r3, #22
 800a1bc:	6003      	str	r3, [r0, #0]
 800a1be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a1c6:	b112      	cbz	r2, 800a1ce <_raise_r+0x1e>
 800a1c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1cc:	b94b      	cbnz	r3, 800a1e2 <_raise_r+0x32>
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 f830 	bl	800a234 <_getpid_r>
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	4620      	mov	r0, r4
 800a1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1de:	f000 b817 	b.w	800a210 <_kill_r>
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d00a      	beq.n	800a1fc <_raise_r+0x4c>
 800a1e6:	1c59      	adds	r1, r3, #1
 800a1e8:	d103      	bne.n	800a1f2 <_raise_r+0x42>
 800a1ea:	2316      	movs	r3, #22
 800a1ec:	6003      	str	r3, [r0, #0]
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	e7e7      	b.n	800a1c2 <_raise_r+0x12>
 800a1f2:	2400      	movs	r4, #0
 800a1f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	4798      	blx	r3
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e7e0      	b.n	800a1c2 <_raise_r+0x12>

0800a200 <raise>:
 800a200:	4b02      	ldr	r3, [pc, #8]	; (800a20c <raise+0xc>)
 800a202:	4601      	mov	r1, r0
 800a204:	6818      	ldr	r0, [r3, #0]
 800a206:	f7ff bfd3 	b.w	800a1b0 <_raise_r>
 800a20a:	bf00      	nop
 800a20c:	20000010 	.word	0x20000010

0800a210 <_kill_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d07      	ldr	r5, [pc, #28]	; (800a230 <_kill_r+0x20>)
 800a214:	2300      	movs	r3, #0
 800a216:	4604      	mov	r4, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	4611      	mov	r1, r2
 800a21c:	602b      	str	r3, [r5, #0]
 800a21e:	f7f9 fd83 	bl	8003d28 <_kill>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d102      	bne.n	800a22c <_kill_r+0x1c>
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	b103      	cbz	r3, 800a22c <_kill_r+0x1c>
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	bd38      	pop	{r3, r4, r5, pc}
 800a22e:	bf00      	nop
 800a230:	20000db4 	.word	0x20000db4

0800a234 <_getpid_r>:
 800a234:	f7f9 bd70 	b.w	8003d18 <_getpid>

0800a238 <siprintf>:
 800a238:	b40e      	push	{r1, r2, r3}
 800a23a:	b500      	push	{lr}
 800a23c:	b09c      	sub	sp, #112	; 0x70
 800a23e:	ab1d      	add	r3, sp, #116	; 0x74
 800a240:	9002      	str	r0, [sp, #8]
 800a242:	9006      	str	r0, [sp, #24]
 800a244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a248:	4809      	ldr	r0, [pc, #36]	; (800a270 <siprintf+0x38>)
 800a24a:	9107      	str	r1, [sp, #28]
 800a24c:	9104      	str	r1, [sp, #16]
 800a24e:	4909      	ldr	r1, [pc, #36]	; (800a274 <siprintf+0x3c>)
 800a250:	f853 2b04 	ldr.w	r2, [r3], #4
 800a254:	9105      	str	r1, [sp, #20]
 800a256:	6800      	ldr	r0, [r0, #0]
 800a258:	9301      	str	r3, [sp, #4]
 800a25a:	a902      	add	r1, sp, #8
 800a25c:	f001 fb96 	bl	800b98c <_svfiprintf_r>
 800a260:	9b02      	ldr	r3, [sp, #8]
 800a262:	2200      	movs	r2, #0
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	b01c      	add	sp, #112	; 0x70
 800a268:	f85d eb04 	ldr.w	lr, [sp], #4
 800a26c:	b003      	add	sp, #12
 800a26e:	4770      	bx	lr
 800a270:	20000010 	.word	0x20000010
 800a274:	ffff0208 	.word	0xffff0208

0800a278 <quorem>:
 800a278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	6903      	ldr	r3, [r0, #16]
 800a27e:	690c      	ldr	r4, [r1, #16]
 800a280:	42a3      	cmp	r3, r4
 800a282:	4607      	mov	r7, r0
 800a284:	f2c0 8081 	blt.w	800a38a <quorem+0x112>
 800a288:	3c01      	subs	r4, #1
 800a28a:	f101 0814 	add.w	r8, r1, #20
 800a28e:	f100 0514 	add.w	r5, r0, #20
 800a292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a29c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2ac:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2b0:	d331      	bcc.n	800a316 <quorem+0x9e>
 800a2b2:	f04f 0e00 	mov.w	lr, #0
 800a2b6:	4640      	mov	r0, r8
 800a2b8:	46ac      	mov	ip, r5
 800a2ba:	46f2      	mov	sl, lr
 800a2bc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2c0:	b293      	uxth	r3, r2
 800a2c2:	fb06 e303 	mla	r3, r6, r3, lr
 800a2c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	ebaa 0303 	sub.w	r3, sl, r3
 800a2d0:	f8dc a000 	ldr.w	sl, [ip]
 800a2d4:	0c12      	lsrs	r2, r2, #16
 800a2d6:	fa13 f38a 	uxtah	r3, r3, sl
 800a2da:	fb06 e202 	mla	r2, r6, r2, lr
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	9b00      	ldr	r3, [sp, #0]
 800a2e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2e6:	b292      	uxth	r2, r2
 800a2e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2f0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2f4:	4581      	cmp	r9, r0
 800a2f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2fa:	f84c 3b04 	str.w	r3, [ip], #4
 800a2fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a302:	d2db      	bcs.n	800a2bc <quorem+0x44>
 800a304:	f855 300b 	ldr.w	r3, [r5, fp]
 800a308:	b92b      	cbnz	r3, 800a316 <quorem+0x9e>
 800a30a:	9b01      	ldr	r3, [sp, #4]
 800a30c:	3b04      	subs	r3, #4
 800a30e:	429d      	cmp	r5, r3
 800a310:	461a      	mov	r2, r3
 800a312:	d32e      	bcc.n	800a372 <quorem+0xfa>
 800a314:	613c      	str	r4, [r7, #16]
 800a316:	4638      	mov	r0, r7
 800a318:	f001 f8b6 	bl	800b488 <__mcmp>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	db24      	blt.n	800a36a <quorem+0xf2>
 800a320:	3601      	adds	r6, #1
 800a322:	4628      	mov	r0, r5
 800a324:	f04f 0c00 	mov.w	ip, #0
 800a328:	f858 2b04 	ldr.w	r2, [r8], #4
 800a32c:	f8d0 e000 	ldr.w	lr, [r0]
 800a330:	b293      	uxth	r3, r2
 800a332:	ebac 0303 	sub.w	r3, ip, r3
 800a336:	0c12      	lsrs	r2, r2, #16
 800a338:	fa13 f38e 	uxtah	r3, r3, lr
 800a33c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a340:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a344:	b29b      	uxth	r3, r3
 800a346:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a34a:	45c1      	cmp	r9, r8
 800a34c:	f840 3b04 	str.w	r3, [r0], #4
 800a350:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a354:	d2e8      	bcs.n	800a328 <quorem+0xb0>
 800a356:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a35a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a35e:	b922      	cbnz	r2, 800a36a <quorem+0xf2>
 800a360:	3b04      	subs	r3, #4
 800a362:	429d      	cmp	r5, r3
 800a364:	461a      	mov	r2, r3
 800a366:	d30a      	bcc.n	800a37e <quorem+0x106>
 800a368:	613c      	str	r4, [r7, #16]
 800a36a:	4630      	mov	r0, r6
 800a36c:	b003      	add	sp, #12
 800a36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a372:	6812      	ldr	r2, [r2, #0]
 800a374:	3b04      	subs	r3, #4
 800a376:	2a00      	cmp	r2, #0
 800a378:	d1cc      	bne.n	800a314 <quorem+0x9c>
 800a37a:	3c01      	subs	r4, #1
 800a37c:	e7c7      	b.n	800a30e <quorem+0x96>
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	3b04      	subs	r3, #4
 800a382:	2a00      	cmp	r2, #0
 800a384:	d1f0      	bne.n	800a368 <quorem+0xf0>
 800a386:	3c01      	subs	r4, #1
 800a388:	e7eb      	b.n	800a362 <quorem+0xea>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e7ee      	b.n	800a36c <quorem+0xf4>
	...

0800a390 <_dtoa_r>:
 800a390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a394:	ed2d 8b04 	vpush	{d8-d9}
 800a398:	ec57 6b10 	vmov	r6, r7, d0
 800a39c:	b093      	sub	sp, #76	; 0x4c
 800a39e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a3a4:	9106      	str	r1, [sp, #24]
 800a3a6:	ee10 aa10 	vmov	sl, s0
 800a3aa:	4604      	mov	r4, r0
 800a3ac:	9209      	str	r2, [sp, #36]	; 0x24
 800a3ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a3b0:	46bb      	mov	fp, r7
 800a3b2:	b975      	cbnz	r5, 800a3d2 <_dtoa_r+0x42>
 800a3b4:	2010      	movs	r0, #16
 800a3b6:	f000 fddd 	bl	800af74 <malloc>
 800a3ba:	4602      	mov	r2, r0
 800a3bc:	6260      	str	r0, [r4, #36]	; 0x24
 800a3be:	b920      	cbnz	r0, 800a3ca <_dtoa_r+0x3a>
 800a3c0:	4ba7      	ldr	r3, [pc, #668]	; (800a660 <_dtoa_r+0x2d0>)
 800a3c2:	21ea      	movs	r1, #234	; 0xea
 800a3c4:	48a7      	ldr	r0, [pc, #668]	; (800a664 <_dtoa_r+0x2d4>)
 800a3c6:	f001 fbf1 	bl	800bbac <__assert_func>
 800a3ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a3ce:	6005      	str	r5, [r0, #0]
 800a3d0:	60c5      	str	r5, [r0, #12]
 800a3d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3d4:	6819      	ldr	r1, [r3, #0]
 800a3d6:	b151      	cbz	r1, 800a3ee <_dtoa_r+0x5e>
 800a3d8:	685a      	ldr	r2, [r3, #4]
 800a3da:	604a      	str	r2, [r1, #4]
 800a3dc:	2301      	movs	r3, #1
 800a3de:	4093      	lsls	r3, r2
 800a3e0:	608b      	str	r3, [r1, #8]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fe0e 	bl	800b004 <_Bfree>
 800a3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	1e3b      	subs	r3, r7, #0
 800a3f0:	bfaa      	itet	ge
 800a3f2:	2300      	movge	r3, #0
 800a3f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3f8:	f8c8 3000 	strge.w	r3, [r8]
 800a3fc:	4b9a      	ldr	r3, [pc, #616]	; (800a668 <_dtoa_r+0x2d8>)
 800a3fe:	bfbc      	itt	lt
 800a400:	2201      	movlt	r2, #1
 800a402:	f8c8 2000 	strlt.w	r2, [r8]
 800a406:	ea33 030b 	bics.w	r3, r3, fp
 800a40a:	d11b      	bne.n	800a444 <_dtoa_r+0xb4>
 800a40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a40e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a412:	6013      	str	r3, [r2, #0]
 800a414:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a418:	4333      	orrs	r3, r6
 800a41a:	f000 8592 	beq.w	800af42 <_dtoa_r+0xbb2>
 800a41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a420:	b963      	cbnz	r3, 800a43c <_dtoa_r+0xac>
 800a422:	4b92      	ldr	r3, [pc, #584]	; (800a66c <_dtoa_r+0x2dc>)
 800a424:	e022      	b.n	800a46c <_dtoa_r+0xdc>
 800a426:	4b92      	ldr	r3, [pc, #584]	; (800a670 <_dtoa_r+0x2e0>)
 800a428:	9301      	str	r3, [sp, #4]
 800a42a:	3308      	adds	r3, #8
 800a42c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	9801      	ldr	r0, [sp, #4]
 800a432:	b013      	add	sp, #76	; 0x4c
 800a434:	ecbd 8b04 	vpop	{d8-d9}
 800a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43c:	4b8b      	ldr	r3, [pc, #556]	; (800a66c <_dtoa_r+0x2dc>)
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	3303      	adds	r3, #3
 800a442:	e7f3      	b.n	800a42c <_dtoa_r+0x9c>
 800a444:	2200      	movs	r2, #0
 800a446:	2300      	movs	r3, #0
 800a448:	4650      	mov	r0, sl
 800a44a:	4659      	mov	r1, fp
 800a44c:	f7f6 fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a450:	ec4b ab19 	vmov	d9, sl, fp
 800a454:	4680      	mov	r8, r0
 800a456:	b158      	cbz	r0, 800a470 <_dtoa_r+0xe0>
 800a458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a45a:	2301      	movs	r3, #1
 800a45c:	6013      	str	r3, [r2, #0]
 800a45e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 856b 	beq.w	800af3c <_dtoa_r+0xbac>
 800a466:	4883      	ldr	r0, [pc, #524]	; (800a674 <_dtoa_r+0x2e4>)
 800a468:	6018      	str	r0, [r3, #0]
 800a46a:	1e43      	subs	r3, r0, #1
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	e7df      	b.n	800a430 <_dtoa_r+0xa0>
 800a470:	ec4b ab10 	vmov	d0, sl, fp
 800a474:	aa10      	add	r2, sp, #64	; 0x40
 800a476:	a911      	add	r1, sp, #68	; 0x44
 800a478:	4620      	mov	r0, r4
 800a47a:	f001 f8ab 	bl	800b5d4 <__d2b>
 800a47e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a482:	ee08 0a10 	vmov	s16, r0
 800a486:	2d00      	cmp	r5, #0
 800a488:	f000 8084 	beq.w	800a594 <_dtoa_r+0x204>
 800a48c:	ee19 3a90 	vmov	r3, s19
 800a490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a494:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a498:	4656      	mov	r6, sl
 800a49a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a49e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a4a6:	4b74      	ldr	r3, [pc, #464]	; (800a678 <_dtoa_r+0x2e8>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	4639      	mov	r1, r7
 800a4ae:	f7f5 feeb 	bl	8000288 <__aeabi_dsub>
 800a4b2:	a365      	add	r3, pc, #404	; (adr r3, 800a648 <_dtoa_r+0x2b8>)
 800a4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b8:	f7f6 f89e 	bl	80005f8 <__aeabi_dmul>
 800a4bc:	a364      	add	r3, pc, #400	; (adr r3, 800a650 <_dtoa_r+0x2c0>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f5 fee3 	bl	800028c <__adddf3>
 800a4c6:	4606      	mov	r6, r0
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	460f      	mov	r7, r1
 800a4cc:	f7f6 f82a 	bl	8000524 <__aeabi_i2d>
 800a4d0:	a361      	add	r3, pc, #388	; (adr r3, 800a658 <_dtoa_r+0x2c8>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4630      	mov	r0, r6
 800a4e0:	4639      	mov	r1, r7
 800a4e2:	f7f5 fed3 	bl	800028c <__adddf3>
 800a4e6:	4606      	mov	r6, r0
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	f7f6 fb35 	bl	8000b58 <__aeabi_d2iz>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	9000      	str	r0, [sp, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	4639      	mov	r1, r7
 800a4f8:	f7f6 faf0 	bl	8000adc <__aeabi_dcmplt>
 800a4fc:	b150      	cbz	r0, 800a514 <_dtoa_r+0x184>
 800a4fe:	9800      	ldr	r0, [sp, #0]
 800a500:	f7f6 f810 	bl	8000524 <__aeabi_i2d>
 800a504:	4632      	mov	r2, r6
 800a506:	463b      	mov	r3, r7
 800a508:	f7f6 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800a50c:	b910      	cbnz	r0, 800a514 <_dtoa_r+0x184>
 800a50e:	9b00      	ldr	r3, [sp, #0]
 800a510:	3b01      	subs	r3, #1
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	9b00      	ldr	r3, [sp, #0]
 800a516:	2b16      	cmp	r3, #22
 800a518:	d85a      	bhi.n	800a5d0 <_dtoa_r+0x240>
 800a51a:	9a00      	ldr	r2, [sp, #0]
 800a51c:	4b57      	ldr	r3, [pc, #348]	; (800a67c <_dtoa_r+0x2ec>)
 800a51e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a526:	ec51 0b19 	vmov	r0, r1, d9
 800a52a:	f7f6 fad7 	bl	8000adc <__aeabi_dcmplt>
 800a52e:	2800      	cmp	r0, #0
 800a530:	d050      	beq.n	800a5d4 <_dtoa_r+0x244>
 800a532:	9b00      	ldr	r3, [sp, #0]
 800a534:	3b01      	subs	r3, #1
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	2300      	movs	r3, #0
 800a53a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a53c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a53e:	1b5d      	subs	r5, r3, r5
 800a540:	1e6b      	subs	r3, r5, #1
 800a542:	9305      	str	r3, [sp, #20]
 800a544:	bf45      	ittet	mi
 800a546:	f1c5 0301 	rsbmi	r3, r5, #1
 800a54a:	9304      	strmi	r3, [sp, #16]
 800a54c:	2300      	movpl	r3, #0
 800a54e:	2300      	movmi	r3, #0
 800a550:	bf4c      	ite	mi
 800a552:	9305      	strmi	r3, [sp, #20]
 800a554:	9304      	strpl	r3, [sp, #16]
 800a556:	9b00      	ldr	r3, [sp, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	db3d      	blt.n	800a5d8 <_dtoa_r+0x248>
 800a55c:	9b05      	ldr	r3, [sp, #20]
 800a55e:	9a00      	ldr	r2, [sp, #0]
 800a560:	920a      	str	r2, [sp, #40]	; 0x28
 800a562:	4413      	add	r3, r2
 800a564:	9305      	str	r3, [sp, #20]
 800a566:	2300      	movs	r3, #0
 800a568:	9307      	str	r3, [sp, #28]
 800a56a:	9b06      	ldr	r3, [sp, #24]
 800a56c:	2b09      	cmp	r3, #9
 800a56e:	f200 8089 	bhi.w	800a684 <_dtoa_r+0x2f4>
 800a572:	2b05      	cmp	r3, #5
 800a574:	bfc4      	itt	gt
 800a576:	3b04      	subgt	r3, #4
 800a578:	9306      	strgt	r3, [sp, #24]
 800a57a:	9b06      	ldr	r3, [sp, #24]
 800a57c:	f1a3 0302 	sub.w	r3, r3, #2
 800a580:	bfcc      	ite	gt
 800a582:	2500      	movgt	r5, #0
 800a584:	2501      	movle	r5, #1
 800a586:	2b03      	cmp	r3, #3
 800a588:	f200 8087 	bhi.w	800a69a <_dtoa_r+0x30a>
 800a58c:	e8df f003 	tbb	[pc, r3]
 800a590:	59383a2d 	.word	0x59383a2d
 800a594:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a598:	441d      	add	r5, r3
 800a59a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a59e:	2b20      	cmp	r3, #32
 800a5a0:	bfc1      	itttt	gt
 800a5a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a5aa:	fa0b f303 	lslgt.w	r3, fp, r3
 800a5ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5b2:	bfda      	itte	le
 800a5b4:	f1c3 0320 	rsble	r3, r3, #32
 800a5b8:	fa06 f003 	lslle.w	r0, r6, r3
 800a5bc:	4318      	orrgt	r0, r3
 800a5be:	f7f5 ffa1 	bl	8000504 <__aeabi_ui2d>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a5ca:	3d01      	subs	r5, #1
 800a5cc:	930e      	str	r3, [sp, #56]	; 0x38
 800a5ce:	e76a      	b.n	800a4a6 <_dtoa_r+0x116>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7b2      	b.n	800a53a <_dtoa_r+0x1aa>
 800a5d4:	900b      	str	r0, [sp, #44]	; 0x2c
 800a5d6:	e7b1      	b.n	800a53c <_dtoa_r+0x1ac>
 800a5d8:	9b04      	ldr	r3, [sp, #16]
 800a5da:	9a00      	ldr	r2, [sp, #0]
 800a5dc:	1a9b      	subs	r3, r3, r2
 800a5de:	9304      	str	r3, [sp, #16]
 800a5e0:	4253      	negs	r3, r2
 800a5e2:	9307      	str	r3, [sp, #28]
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e8:	e7bf      	b.n	800a56a <_dtoa_r+0x1da>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	9308      	str	r3, [sp, #32]
 800a5ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dc55      	bgt.n	800a6a0 <_dtoa_r+0x310>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fe:	e00c      	b.n	800a61a <_dtoa_r+0x28a>
 800a600:	2301      	movs	r3, #1
 800a602:	e7f3      	b.n	800a5ec <_dtoa_r+0x25c>
 800a604:	2300      	movs	r3, #0
 800a606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a608:	9308      	str	r3, [sp, #32]
 800a60a:	9b00      	ldr	r3, [sp, #0]
 800a60c:	4413      	add	r3, r2
 800a60e:	9302      	str	r3, [sp, #8]
 800a610:	3301      	adds	r3, #1
 800a612:	2b01      	cmp	r3, #1
 800a614:	9303      	str	r3, [sp, #12]
 800a616:	bfb8      	it	lt
 800a618:	2301      	movlt	r3, #1
 800a61a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a61c:	2200      	movs	r2, #0
 800a61e:	6042      	str	r2, [r0, #4]
 800a620:	2204      	movs	r2, #4
 800a622:	f102 0614 	add.w	r6, r2, #20
 800a626:	429e      	cmp	r6, r3
 800a628:	6841      	ldr	r1, [r0, #4]
 800a62a:	d93d      	bls.n	800a6a8 <_dtoa_r+0x318>
 800a62c:	4620      	mov	r0, r4
 800a62e:	f000 fca9 	bl	800af84 <_Balloc>
 800a632:	9001      	str	r0, [sp, #4]
 800a634:	2800      	cmp	r0, #0
 800a636:	d13b      	bne.n	800a6b0 <_dtoa_r+0x320>
 800a638:	4b11      	ldr	r3, [pc, #68]	; (800a680 <_dtoa_r+0x2f0>)
 800a63a:	4602      	mov	r2, r0
 800a63c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a640:	e6c0      	b.n	800a3c4 <_dtoa_r+0x34>
 800a642:	2301      	movs	r3, #1
 800a644:	e7df      	b.n	800a606 <_dtoa_r+0x276>
 800a646:	bf00      	nop
 800a648:	636f4361 	.word	0x636f4361
 800a64c:	3fd287a7 	.word	0x3fd287a7
 800a650:	8b60c8b3 	.word	0x8b60c8b3
 800a654:	3fc68a28 	.word	0x3fc68a28
 800a658:	509f79fb 	.word	0x509f79fb
 800a65c:	3fd34413 	.word	0x3fd34413
 800a660:	0800c995 	.word	0x0800c995
 800a664:	0800c9ac 	.word	0x0800c9ac
 800a668:	7ff00000 	.word	0x7ff00000
 800a66c:	0800c991 	.word	0x0800c991
 800a670:	0800c988 	.word	0x0800c988
 800a674:	0800c965 	.word	0x0800c965
 800a678:	3ff80000 	.word	0x3ff80000
 800a67c:	0800caa0 	.word	0x0800caa0
 800a680:	0800ca07 	.word	0x0800ca07
 800a684:	2501      	movs	r5, #1
 800a686:	2300      	movs	r3, #0
 800a688:	9306      	str	r3, [sp, #24]
 800a68a:	9508      	str	r5, [sp, #32]
 800a68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a690:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a694:	2200      	movs	r2, #0
 800a696:	2312      	movs	r3, #18
 800a698:	e7b0      	b.n	800a5fc <_dtoa_r+0x26c>
 800a69a:	2301      	movs	r3, #1
 800a69c:	9308      	str	r3, [sp, #32]
 800a69e:	e7f5      	b.n	800a68c <_dtoa_r+0x2fc>
 800a6a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a6a6:	e7b8      	b.n	800a61a <_dtoa_r+0x28a>
 800a6a8:	3101      	adds	r1, #1
 800a6aa:	6041      	str	r1, [r0, #4]
 800a6ac:	0052      	lsls	r2, r2, #1
 800a6ae:	e7b8      	b.n	800a622 <_dtoa_r+0x292>
 800a6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6b2:	9a01      	ldr	r2, [sp, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	9b03      	ldr	r3, [sp, #12]
 800a6b8:	2b0e      	cmp	r3, #14
 800a6ba:	f200 809d 	bhi.w	800a7f8 <_dtoa_r+0x468>
 800a6be:	2d00      	cmp	r5, #0
 800a6c0:	f000 809a 	beq.w	800a7f8 <_dtoa_r+0x468>
 800a6c4:	9b00      	ldr	r3, [sp, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	dd32      	ble.n	800a730 <_dtoa_r+0x3a0>
 800a6ca:	4ab7      	ldr	r2, [pc, #732]	; (800a9a8 <_dtoa_r+0x618>)
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6d8:	9b00      	ldr	r3, [sp, #0]
 800a6da:	05d8      	lsls	r0, r3, #23
 800a6dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6e0:	d516      	bpl.n	800a710 <_dtoa_r+0x380>
 800a6e2:	4bb2      	ldr	r3, [pc, #712]	; (800a9ac <_dtoa_r+0x61c>)
 800a6e4:	ec51 0b19 	vmov	r0, r1, d9
 800a6e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6ec:	f7f6 f8ae 	bl	800084c <__aeabi_ddiv>
 800a6f0:	f007 070f 	and.w	r7, r7, #15
 800a6f4:	4682      	mov	sl, r0
 800a6f6:	468b      	mov	fp, r1
 800a6f8:	2503      	movs	r5, #3
 800a6fa:	4eac      	ldr	r6, [pc, #688]	; (800a9ac <_dtoa_r+0x61c>)
 800a6fc:	b957      	cbnz	r7, 800a714 <_dtoa_r+0x384>
 800a6fe:	4642      	mov	r2, r8
 800a700:	464b      	mov	r3, r9
 800a702:	4650      	mov	r0, sl
 800a704:	4659      	mov	r1, fp
 800a706:	f7f6 f8a1 	bl	800084c <__aeabi_ddiv>
 800a70a:	4682      	mov	sl, r0
 800a70c:	468b      	mov	fp, r1
 800a70e:	e028      	b.n	800a762 <_dtoa_r+0x3d2>
 800a710:	2502      	movs	r5, #2
 800a712:	e7f2      	b.n	800a6fa <_dtoa_r+0x36a>
 800a714:	07f9      	lsls	r1, r7, #31
 800a716:	d508      	bpl.n	800a72a <_dtoa_r+0x39a>
 800a718:	4640      	mov	r0, r8
 800a71a:	4649      	mov	r1, r9
 800a71c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	3501      	adds	r5, #1
 800a726:	4680      	mov	r8, r0
 800a728:	4689      	mov	r9, r1
 800a72a:	107f      	asrs	r7, r7, #1
 800a72c:	3608      	adds	r6, #8
 800a72e:	e7e5      	b.n	800a6fc <_dtoa_r+0x36c>
 800a730:	f000 809b 	beq.w	800a86a <_dtoa_r+0x4da>
 800a734:	9b00      	ldr	r3, [sp, #0]
 800a736:	4f9d      	ldr	r7, [pc, #628]	; (800a9ac <_dtoa_r+0x61c>)
 800a738:	425e      	negs	r6, r3
 800a73a:	4b9b      	ldr	r3, [pc, #620]	; (800a9a8 <_dtoa_r+0x618>)
 800a73c:	f006 020f 	and.w	r2, r6, #15
 800a740:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	ec51 0b19 	vmov	r0, r1, d9
 800a74c:	f7f5 ff54 	bl	80005f8 <__aeabi_dmul>
 800a750:	1136      	asrs	r6, r6, #4
 800a752:	4682      	mov	sl, r0
 800a754:	468b      	mov	fp, r1
 800a756:	2300      	movs	r3, #0
 800a758:	2502      	movs	r5, #2
 800a75a:	2e00      	cmp	r6, #0
 800a75c:	d17a      	bne.n	800a854 <_dtoa_r+0x4c4>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1d3      	bne.n	800a70a <_dtoa_r+0x37a>
 800a762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8082 	beq.w	800a86e <_dtoa_r+0x4de>
 800a76a:	4b91      	ldr	r3, [pc, #580]	; (800a9b0 <_dtoa_r+0x620>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	4650      	mov	r0, sl
 800a770:	4659      	mov	r1, fp
 800a772:	f7f6 f9b3 	bl	8000adc <__aeabi_dcmplt>
 800a776:	2800      	cmp	r0, #0
 800a778:	d079      	beq.n	800a86e <_dtoa_r+0x4de>
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d076      	beq.n	800a86e <_dtoa_r+0x4de>
 800a780:	9b02      	ldr	r3, [sp, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	dd36      	ble.n	800a7f4 <_dtoa_r+0x464>
 800a786:	9b00      	ldr	r3, [sp, #0]
 800a788:	4650      	mov	r0, sl
 800a78a:	4659      	mov	r1, fp
 800a78c:	1e5f      	subs	r7, r3, #1
 800a78e:	2200      	movs	r2, #0
 800a790:	4b88      	ldr	r3, [pc, #544]	; (800a9b4 <_dtoa_r+0x624>)
 800a792:	f7f5 ff31 	bl	80005f8 <__aeabi_dmul>
 800a796:	9e02      	ldr	r6, [sp, #8]
 800a798:	4682      	mov	sl, r0
 800a79a:	468b      	mov	fp, r1
 800a79c:	3501      	adds	r5, #1
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f7f5 fec0 	bl	8000524 <__aeabi_i2d>
 800a7a4:	4652      	mov	r2, sl
 800a7a6:	465b      	mov	r3, fp
 800a7a8:	f7f5 ff26 	bl	80005f8 <__aeabi_dmul>
 800a7ac:	4b82      	ldr	r3, [pc, #520]	; (800a9b8 <_dtoa_r+0x628>)
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f7f5 fd6c 	bl	800028c <__adddf3>
 800a7b4:	46d0      	mov	r8, sl
 800a7b6:	46d9      	mov	r9, fp
 800a7b8:	4682      	mov	sl, r0
 800a7ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a7be:	2e00      	cmp	r6, #0
 800a7c0:	d158      	bne.n	800a874 <_dtoa_r+0x4e4>
 800a7c2:	4b7e      	ldr	r3, [pc, #504]	; (800a9bc <_dtoa_r+0x62c>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4640      	mov	r0, r8
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	f7f5 fd5d 	bl	8000288 <__aeabi_dsub>
 800a7ce:	4652      	mov	r2, sl
 800a7d0:	465b      	mov	r3, fp
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	4689      	mov	r9, r1
 800a7d6:	f7f6 f99f 	bl	8000b18 <__aeabi_dcmpgt>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	f040 8295 	bne.w	800ad0a <_dtoa_r+0x97a>
 800a7e0:	4652      	mov	r2, sl
 800a7e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	4649      	mov	r1, r9
 800a7ea:	f7f6 f977 	bl	8000adc <__aeabi_dcmplt>
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	f040 8289 	bne.w	800ad06 <_dtoa_r+0x976>
 800a7f4:	ec5b ab19 	vmov	sl, fp, d9
 800a7f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f2c0 8148 	blt.w	800aa90 <_dtoa_r+0x700>
 800a800:	9a00      	ldr	r2, [sp, #0]
 800a802:	2a0e      	cmp	r2, #14
 800a804:	f300 8144 	bgt.w	800aa90 <_dtoa_r+0x700>
 800a808:	4b67      	ldr	r3, [pc, #412]	; (800a9a8 <_dtoa_r+0x618>)
 800a80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a80e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a814:	2b00      	cmp	r3, #0
 800a816:	f280 80d5 	bge.w	800a9c4 <_dtoa_r+0x634>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f300 80d1 	bgt.w	800a9c4 <_dtoa_r+0x634>
 800a822:	f040 826f 	bne.w	800ad04 <_dtoa_r+0x974>
 800a826:	4b65      	ldr	r3, [pc, #404]	; (800a9bc <_dtoa_r+0x62c>)
 800a828:	2200      	movs	r2, #0
 800a82a:	4640      	mov	r0, r8
 800a82c:	4649      	mov	r1, r9
 800a82e:	f7f5 fee3 	bl	80005f8 <__aeabi_dmul>
 800a832:	4652      	mov	r2, sl
 800a834:	465b      	mov	r3, fp
 800a836:	f7f6 f965 	bl	8000b04 <__aeabi_dcmpge>
 800a83a:	9e03      	ldr	r6, [sp, #12]
 800a83c:	4637      	mov	r7, r6
 800a83e:	2800      	cmp	r0, #0
 800a840:	f040 8245 	bne.w	800acce <_dtoa_r+0x93e>
 800a844:	9d01      	ldr	r5, [sp, #4]
 800a846:	2331      	movs	r3, #49	; 0x31
 800a848:	f805 3b01 	strb.w	r3, [r5], #1
 800a84c:	9b00      	ldr	r3, [sp, #0]
 800a84e:	3301      	adds	r3, #1
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	e240      	b.n	800acd6 <_dtoa_r+0x946>
 800a854:	07f2      	lsls	r2, r6, #31
 800a856:	d505      	bpl.n	800a864 <_dtoa_r+0x4d4>
 800a858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a85c:	f7f5 fecc 	bl	80005f8 <__aeabi_dmul>
 800a860:	3501      	adds	r5, #1
 800a862:	2301      	movs	r3, #1
 800a864:	1076      	asrs	r6, r6, #1
 800a866:	3708      	adds	r7, #8
 800a868:	e777      	b.n	800a75a <_dtoa_r+0x3ca>
 800a86a:	2502      	movs	r5, #2
 800a86c:	e779      	b.n	800a762 <_dtoa_r+0x3d2>
 800a86e:	9f00      	ldr	r7, [sp, #0]
 800a870:	9e03      	ldr	r6, [sp, #12]
 800a872:	e794      	b.n	800a79e <_dtoa_r+0x40e>
 800a874:	9901      	ldr	r1, [sp, #4]
 800a876:	4b4c      	ldr	r3, [pc, #304]	; (800a9a8 <_dtoa_r+0x618>)
 800a878:	4431      	add	r1, r6
 800a87a:	910d      	str	r1, [sp, #52]	; 0x34
 800a87c:	9908      	ldr	r1, [sp, #32]
 800a87e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a882:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a886:	2900      	cmp	r1, #0
 800a888:	d043      	beq.n	800a912 <_dtoa_r+0x582>
 800a88a:	494d      	ldr	r1, [pc, #308]	; (800a9c0 <_dtoa_r+0x630>)
 800a88c:	2000      	movs	r0, #0
 800a88e:	f7f5 ffdd 	bl	800084c <__aeabi_ddiv>
 800a892:	4652      	mov	r2, sl
 800a894:	465b      	mov	r3, fp
 800a896:	f7f5 fcf7 	bl	8000288 <__aeabi_dsub>
 800a89a:	9d01      	ldr	r5, [sp, #4]
 800a89c:	4682      	mov	sl, r0
 800a89e:	468b      	mov	fp, r1
 800a8a0:	4649      	mov	r1, r9
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	f7f6 f958 	bl	8000b58 <__aeabi_d2iz>
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	f7f5 fe3b 	bl	8000524 <__aeabi_i2d>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4649      	mov	r1, r9
 800a8b6:	f7f5 fce7 	bl	8000288 <__aeabi_dsub>
 800a8ba:	3630      	adds	r6, #48	; 0x30
 800a8bc:	f805 6b01 	strb.w	r6, [r5], #1
 800a8c0:	4652      	mov	r2, sl
 800a8c2:	465b      	mov	r3, fp
 800a8c4:	4680      	mov	r8, r0
 800a8c6:	4689      	mov	r9, r1
 800a8c8:	f7f6 f908 	bl	8000adc <__aeabi_dcmplt>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d163      	bne.n	800a998 <_dtoa_r+0x608>
 800a8d0:	4642      	mov	r2, r8
 800a8d2:	464b      	mov	r3, r9
 800a8d4:	4936      	ldr	r1, [pc, #216]	; (800a9b0 <_dtoa_r+0x620>)
 800a8d6:	2000      	movs	r0, #0
 800a8d8:	f7f5 fcd6 	bl	8000288 <__aeabi_dsub>
 800a8dc:	4652      	mov	r2, sl
 800a8de:	465b      	mov	r3, fp
 800a8e0:	f7f6 f8fc 	bl	8000adc <__aeabi_dcmplt>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f040 80b5 	bne.w	800aa54 <_dtoa_r+0x6c4>
 800a8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	d081      	beq.n	800a7f4 <_dtoa_r+0x464>
 800a8f0:	4b30      	ldr	r3, [pc, #192]	; (800a9b4 <_dtoa_r+0x624>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	4650      	mov	r0, sl
 800a8f6:	4659      	mov	r1, fp
 800a8f8:	f7f5 fe7e 	bl	80005f8 <__aeabi_dmul>
 800a8fc:	4b2d      	ldr	r3, [pc, #180]	; (800a9b4 <_dtoa_r+0x624>)
 800a8fe:	4682      	mov	sl, r0
 800a900:	468b      	mov	fp, r1
 800a902:	4640      	mov	r0, r8
 800a904:	4649      	mov	r1, r9
 800a906:	2200      	movs	r2, #0
 800a908:	f7f5 fe76 	bl	80005f8 <__aeabi_dmul>
 800a90c:	4680      	mov	r8, r0
 800a90e:	4689      	mov	r9, r1
 800a910:	e7c6      	b.n	800a8a0 <_dtoa_r+0x510>
 800a912:	4650      	mov	r0, sl
 800a914:	4659      	mov	r1, fp
 800a916:	f7f5 fe6f 	bl	80005f8 <__aeabi_dmul>
 800a91a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a91c:	9d01      	ldr	r5, [sp, #4]
 800a91e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a920:	4682      	mov	sl, r0
 800a922:	468b      	mov	fp, r1
 800a924:	4649      	mov	r1, r9
 800a926:	4640      	mov	r0, r8
 800a928:	f7f6 f916 	bl	8000b58 <__aeabi_d2iz>
 800a92c:	4606      	mov	r6, r0
 800a92e:	f7f5 fdf9 	bl	8000524 <__aeabi_i2d>
 800a932:	3630      	adds	r6, #48	; 0x30
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4640      	mov	r0, r8
 800a93a:	4649      	mov	r1, r9
 800a93c:	f7f5 fca4 	bl	8000288 <__aeabi_dsub>
 800a940:	f805 6b01 	strb.w	r6, [r5], #1
 800a944:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a946:	429d      	cmp	r5, r3
 800a948:	4680      	mov	r8, r0
 800a94a:	4689      	mov	r9, r1
 800a94c:	f04f 0200 	mov.w	r2, #0
 800a950:	d124      	bne.n	800a99c <_dtoa_r+0x60c>
 800a952:	4b1b      	ldr	r3, [pc, #108]	; (800a9c0 <_dtoa_r+0x630>)
 800a954:	4650      	mov	r0, sl
 800a956:	4659      	mov	r1, fp
 800a958:	f7f5 fc98 	bl	800028c <__adddf3>
 800a95c:	4602      	mov	r2, r0
 800a95e:	460b      	mov	r3, r1
 800a960:	4640      	mov	r0, r8
 800a962:	4649      	mov	r1, r9
 800a964:	f7f6 f8d8 	bl	8000b18 <__aeabi_dcmpgt>
 800a968:	2800      	cmp	r0, #0
 800a96a:	d173      	bne.n	800aa54 <_dtoa_r+0x6c4>
 800a96c:	4652      	mov	r2, sl
 800a96e:	465b      	mov	r3, fp
 800a970:	4913      	ldr	r1, [pc, #76]	; (800a9c0 <_dtoa_r+0x630>)
 800a972:	2000      	movs	r0, #0
 800a974:	f7f5 fc88 	bl	8000288 <__aeabi_dsub>
 800a978:	4602      	mov	r2, r0
 800a97a:	460b      	mov	r3, r1
 800a97c:	4640      	mov	r0, r8
 800a97e:	4649      	mov	r1, r9
 800a980:	f7f6 f8ac 	bl	8000adc <__aeabi_dcmplt>
 800a984:	2800      	cmp	r0, #0
 800a986:	f43f af35 	beq.w	800a7f4 <_dtoa_r+0x464>
 800a98a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a98c:	1e6b      	subs	r3, r5, #1
 800a98e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a990:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a994:	2b30      	cmp	r3, #48	; 0x30
 800a996:	d0f8      	beq.n	800a98a <_dtoa_r+0x5fa>
 800a998:	9700      	str	r7, [sp, #0]
 800a99a:	e049      	b.n	800aa30 <_dtoa_r+0x6a0>
 800a99c:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <_dtoa_r+0x624>)
 800a99e:	f7f5 fe2b 	bl	80005f8 <__aeabi_dmul>
 800a9a2:	4680      	mov	r8, r0
 800a9a4:	4689      	mov	r9, r1
 800a9a6:	e7bd      	b.n	800a924 <_dtoa_r+0x594>
 800a9a8:	0800caa0 	.word	0x0800caa0
 800a9ac:	0800ca78 	.word	0x0800ca78
 800a9b0:	3ff00000 	.word	0x3ff00000
 800a9b4:	40240000 	.word	0x40240000
 800a9b8:	401c0000 	.word	0x401c0000
 800a9bc:	40140000 	.word	0x40140000
 800a9c0:	3fe00000 	.word	0x3fe00000
 800a9c4:	9d01      	ldr	r5, [sp, #4]
 800a9c6:	4656      	mov	r6, sl
 800a9c8:	465f      	mov	r7, fp
 800a9ca:	4642      	mov	r2, r8
 800a9cc:	464b      	mov	r3, r9
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f5 ff3b 	bl	800084c <__aeabi_ddiv>
 800a9d6:	f7f6 f8bf 	bl	8000b58 <__aeabi_d2iz>
 800a9da:	4682      	mov	sl, r0
 800a9dc:	f7f5 fda2 	bl	8000524 <__aeabi_i2d>
 800a9e0:	4642      	mov	r2, r8
 800a9e2:	464b      	mov	r3, r9
 800a9e4:	f7f5 fe08 	bl	80005f8 <__aeabi_dmul>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	4639      	mov	r1, r7
 800a9f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9f4:	f7f5 fc48 	bl	8000288 <__aeabi_dsub>
 800a9f8:	f805 6b01 	strb.w	r6, [r5], #1
 800a9fc:	9e01      	ldr	r6, [sp, #4]
 800a9fe:	9f03      	ldr	r7, [sp, #12]
 800aa00:	1bae      	subs	r6, r5, r6
 800aa02:	42b7      	cmp	r7, r6
 800aa04:	4602      	mov	r2, r0
 800aa06:	460b      	mov	r3, r1
 800aa08:	d135      	bne.n	800aa76 <_dtoa_r+0x6e6>
 800aa0a:	f7f5 fc3f 	bl	800028c <__adddf3>
 800aa0e:	4642      	mov	r2, r8
 800aa10:	464b      	mov	r3, r9
 800aa12:	4606      	mov	r6, r0
 800aa14:	460f      	mov	r7, r1
 800aa16:	f7f6 f87f 	bl	8000b18 <__aeabi_dcmpgt>
 800aa1a:	b9d0      	cbnz	r0, 800aa52 <_dtoa_r+0x6c2>
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	464b      	mov	r3, r9
 800aa20:	4630      	mov	r0, r6
 800aa22:	4639      	mov	r1, r7
 800aa24:	f7f6 f850 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa28:	b110      	cbz	r0, 800aa30 <_dtoa_r+0x6a0>
 800aa2a:	f01a 0f01 	tst.w	sl, #1
 800aa2e:	d110      	bne.n	800aa52 <_dtoa_r+0x6c2>
 800aa30:	4620      	mov	r0, r4
 800aa32:	ee18 1a10 	vmov	r1, s16
 800aa36:	f000 fae5 	bl	800b004 <_Bfree>
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	9800      	ldr	r0, [sp, #0]
 800aa3e:	702b      	strb	r3, [r5, #0]
 800aa40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa42:	3001      	adds	r0, #1
 800aa44:	6018      	str	r0, [r3, #0]
 800aa46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	f43f acf1 	beq.w	800a430 <_dtoa_r+0xa0>
 800aa4e:	601d      	str	r5, [r3, #0]
 800aa50:	e4ee      	b.n	800a430 <_dtoa_r+0xa0>
 800aa52:	9f00      	ldr	r7, [sp, #0]
 800aa54:	462b      	mov	r3, r5
 800aa56:	461d      	mov	r5, r3
 800aa58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa5c:	2a39      	cmp	r2, #57	; 0x39
 800aa5e:	d106      	bne.n	800aa6e <_dtoa_r+0x6de>
 800aa60:	9a01      	ldr	r2, [sp, #4]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d1f7      	bne.n	800aa56 <_dtoa_r+0x6c6>
 800aa66:	9901      	ldr	r1, [sp, #4]
 800aa68:	2230      	movs	r2, #48	; 0x30
 800aa6a:	3701      	adds	r7, #1
 800aa6c:	700a      	strb	r2, [r1, #0]
 800aa6e:	781a      	ldrb	r2, [r3, #0]
 800aa70:	3201      	adds	r2, #1
 800aa72:	701a      	strb	r2, [r3, #0]
 800aa74:	e790      	b.n	800a998 <_dtoa_r+0x608>
 800aa76:	4ba6      	ldr	r3, [pc, #664]	; (800ad10 <_dtoa_r+0x980>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f7f5 fdbd 	bl	80005f8 <__aeabi_dmul>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	2300      	movs	r3, #0
 800aa82:	4606      	mov	r6, r0
 800aa84:	460f      	mov	r7, r1
 800aa86:	f7f6 f81f 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d09d      	beq.n	800a9ca <_dtoa_r+0x63a>
 800aa8e:	e7cf      	b.n	800aa30 <_dtoa_r+0x6a0>
 800aa90:	9a08      	ldr	r2, [sp, #32]
 800aa92:	2a00      	cmp	r2, #0
 800aa94:	f000 80d7 	beq.w	800ac46 <_dtoa_r+0x8b6>
 800aa98:	9a06      	ldr	r2, [sp, #24]
 800aa9a:	2a01      	cmp	r2, #1
 800aa9c:	f300 80ba 	bgt.w	800ac14 <_dtoa_r+0x884>
 800aaa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aaa2:	2a00      	cmp	r2, #0
 800aaa4:	f000 80b2 	beq.w	800ac0c <_dtoa_r+0x87c>
 800aaa8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaac:	9e07      	ldr	r6, [sp, #28]
 800aaae:	9d04      	ldr	r5, [sp, #16]
 800aab0:	9a04      	ldr	r2, [sp, #16]
 800aab2:	441a      	add	r2, r3
 800aab4:	9204      	str	r2, [sp, #16]
 800aab6:	9a05      	ldr	r2, [sp, #20]
 800aab8:	2101      	movs	r1, #1
 800aaba:	441a      	add	r2, r3
 800aabc:	4620      	mov	r0, r4
 800aabe:	9205      	str	r2, [sp, #20]
 800aac0:	f000 fb58 	bl	800b174 <__i2b>
 800aac4:	4607      	mov	r7, r0
 800aac6:	2d00      	cmp	r5, #0
 800aac8:	dd0c      	ble.n	800aae4 <_dtoa_r+0x754>
 800aaca:	9b05      	ldr	r3, [sp, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dd09      	ble.n	800aae4 <_dtoa_r+0x754>
 800aad0:	42ab      	cmp	r3, r5
 800aad2:	9a04      	ldr	r2, [sp, #16]
 800aad4:	bfa8      	it	ge
 800aad6:	462b      	movge	r3, r5
 800aad8:	1ad2      	subs	r2, r2, r3
 800aada:	9204      	str	r2, [sp, #16]
 800aadc:	9a05      	ldr	r2, [sp, #20]
 800aade:	1aed      	subs	r5, r5, r3
 800aae0:	1ad3      	subs	r3, r2, r3
 800aae2:	9305      	str	r3, [sp, #20]
 800aae4:	9b07      	ldr	r3, [sp, #28]
 800aae6:	b31b      	cbz	r3, 800ab30 <_dtoa_r+0x7a0>
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 80af 	beq.w	800ac4e <_dtoa_r+0x8be>
 800aaf0:	2e00      	cmp	r6, #0
 800aaf2:	dd13      	ble.n	800ab1c <_dtoa_r+0x78c>
 800aaf4:	4639      	mov	r1, r7
 800aaf6:	4632      	mov	r2, r6
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f000 fbfb 	bl	800b2f4 <__pow5mult>
 800aafe:	ee18 2a10 	vmov	r2, s16
 800ab02:	4601      	mov	r1, r0
 800ab04:	4607      	mov	r7, r0
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fb4a 	bl	800b1a0 <__multiply>
 800ab0c:	ee18 1a10 	vmov	r1, s16
 800ab10:	4680      	mov	r8, r0
 800ab12:	4620      	mov	r0, r4
 800ab14:	f000 fa76 	bl	800b004 <_Bfree>
 800ab18:	ee08 8a10 	vmov	s16, r8
 800ab1c:	9b07      	ldr	r3, [sp, #28]
 800ab1e:	1b9a      	subs	r2, r3, r6
 800ab20:	d006      	beq.n	800ab30 <_dtoa_r+0x7a0>
 800ab22:	ee18 1a10 	vmov	r1, s16
 800ab26:	4620      	mov	r0, r4
 800ab28:	f000 fbe4 	bl	800b2f4 <__pow5mult>
 800ab2c:	ee08 0a10 	vmov	s16, r0
 800ab30:	2101      	movs	r1, #1
 800ab32:	4620      	mov	r0, r4
 800ab34:	f000 fb1e 	bl	800b174 <__i2b>
 800ab38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	4606      	mov	r6, r0
 800ab3e:	f340 8088 	ble.w	800ac52 <_dtoa_r+0x8c2>
 800ab42:	461a      	mov	r2, r3
 800ab44:	4601      	mov	r1, r0
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fbd4 	bl	800b2f4 <__pow5mult>
 800ab4c:	9b06      	ldr	r3, [sp, #24]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	4606      	mov	r6, r0
 800ab52:	f340 8081 	ble.w	800ac58 <_dtoa_r+0x8c8>
 800ab56:	f04f 0800 	mov.w	r8, #0
 800ab5a:	6933      	ldr	r3, [r6, #16]
 800ab5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab60:	6918      	ldr	r0, [r3, #16]
 800ab62:	f000 fab7 	bl	800b0d4 <__hi0bits>
 800ab66:	f1c0 0020 	rsb	r0, r0, #32
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	4418      	add	r0, r3
 800ab6e:	f010 001f 	ands.w	r0, r0, #31
 800ab72:	f000 8092 	beq.w	800ac9a <_dtoa_r+0x90a>
 800ab76:	f1c0 0320 	rsb	r3, r0, #32
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	f340 808a 	ble.w	800ac94 <_dtoa_r+0x904>
 800ab80:	f1c0 001c 	rsb	r0, r0, #28
 800ab84:	9b04      	ldr	r3, [sp, #16]
 800ab86:	4403      	add	r3, r0
 800ab88:	9304      	str	r3, [sp, #16]
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	4403      	add	r3, r0
 800ab8e:	4405      	add	r5, r0
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	dd07      	ble.n	800aba8 <_dtoa_r+0x818>
 800ab98:	ee18 1a10 	vmov	r1, s16
 800ab9c:	461a      	mov	r2, r3
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 fc02 	bl	800b3a8 <__lshift>
 800aba4:	ee08 0a10 	vmov	s16, r0
 800aba8:	9b05      	ldr	r3, [sp, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	dd05      	ble.n	800abba <_dtoa_r+0x82a>
 800abae:	4631      	mov	r1, r6
 800abb0:	461a      	mov	r2, r3
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 fbf8 	bl	800b3a8 <__lshift>
 800abb8:	4606      	mov	r6, r0
 800abba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d06e      	beq.n	800ac9e <_dtoa_r+0x90e>
 800abc0:	ee18 0a10 	vmov	r0, s16
 800abc4:	4631      	mov	r1, r6
 800abc6:	f000 fc5f 	bl	800b488 <__mcmp>
 800abca:	2800      	cmp	r0, #0
 800abcc:	da67      	bge.n	800ac9e <_dtoa_r+0x90e>
 800abce:	9b00      	ldr	r3, [sp, #0]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	ee18 1a10 	vmov	r1, s16
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	220a      	movs	r2, #10
 800abda:	2300      	movs	r3, #0
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 fa33 	bl	800b048 <__multadd>
 800abe2:	9b08      	ldr	r3, [sp, #32]
 800abe4:	ee08 0a10 	vmov	s16, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 81b1 	beq.w	800af50 <_dtoa_r+0xbc0>
 800abee:	2300      	movs	r3, #0
 800abf0:	4639      	mov	r1, r7
 800abf2:	220a      	movs	r2, #10
 800abf4:	4620      	mov	r0, r4
 800abf6:	f000 fa27 	bl	800b048 <__multadd>
 800abfa:	9b02      	ldr	r3, [sp, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	4607      	mov	r7, r0
 800ac00:	f300 808e 	bgt.w	800ad20 <_dtoa_r+0x990>
 800ac04:	9b06      	ldr	r3, [sp, #24]
 800ac06:	2b02      	cmp	r3, #2
 800ac08:	dc51      	bgt.n	800acae <_dtoa_r+0x91e>
 800ac0a:	e089      	b.n	800ad20 <_dtoa_r+0x990>
 800ac0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ac0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac12:	e74b      	b.n	800aaac <_dtoa_r+0x71c>
 800ac14:	9b03      	ldr	r3, [sp, #12]
 800ac16:	1e5e      	subs	r6, r3, #1
 800ac18:	9b07      	ldr	r3, [sp, #28]
 800ac1a:	42b3      	cmp	r3, r6
 800ac1c:	bfbf      	itttt	lt
 800ac1e:	9b07      	ldrlt	r3, [sp, #28]
 800ac20:	9607      	strlt	r6, [sp, #28]
 800ac22:	1af2      	sublt	r2, r6, r3
 800ac24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ac26:	bfb6      	itet	lt
 800ac28:	189b      	addlt	r3, r3, r2
 800ac2a:	1b9e      	subge	r6, r3, r6
 800ac2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	bfb8      	it	lt
 800ac32:	2600      	movlt	r6, #0
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	bfb7      	itett	lt
 800ac38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ac3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac40:	1a9d      	sublt	r5, r3, r2
 800ac42:	2300      	movlt	r3, #0
 800ac44:	e734      	b.n	800aab0 <_dtoa_r+0x720>
 800ac46:	9e07      	ldr	r6, [sp, #28]
 800ac48:	9d04      	ldr	r5, [sp, #16]
 800ac4a:	9f08      	ldr	r7, [sp, #32]
 800ac4c:	e73b      	b.n	800aac6 <_dtoa_r+0x736>
 800ac4e:	9a07      	ldr	r2, [sp, #28]
 800ac50:	e767      	b.n	800ab22 <_dtoa_r+0x792>
 800ac52:	9b06      	ldr	r3, [sp, #24]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	dc18      	bgt.n	800ac8a <_dtoa_r+0x8fa>
 800ac58:	f1ba 0f00 	cmp.w	sl, #0
 800ac5c:	d115      	bne.n	800ac8a <_dtoa_r+0x8fa>
 800ac5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac62:	b993      	cbnz	r3, 800ac8a <_dtoa_r+0x8fa>
 800ac64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac68:	0d1b      	lsrs	r3, r3, #20
 800ac6a:	051b      	lsls	r3, r3, #20
 800ac6c:	b183      	cbz	r3, 800ac90 <_dtoa_r+0x900>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	3301      	adds	r3, #1
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	9b05      	ldr	r3, [sp, #20]
 800ac76:	3301      	adds	r3, #1
 800ac78:	9305      	str	r3, [sp, #20]
 800ac7a:	f04f 0801 	mov.w	r8, #1
 800ac7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f47f af6a 	bne.w	800ab5a <_dtoa_r+0x7ca>
 800ac86:	2001      	movs	r0, #1
 800ac88:	e76f      	b.n	800ab6a <_dtoa_r+0x7da>
 800ac8a:	f04f 0800 	mov.w	r8, #0
 800ac8e:	e7f6      	b.n	800ac7e <_dtoa_r+0x8ee>
 800ac90:	4698      	mov	r8, r3
 800ac92:	e7f4      	b.n	800ac7e <_dtoa_r+0x8ee>
 800ac94:	f43f af7d 	beq.w	800ab92 <_dtoa_r+0x802>
 800ac98:	4618      	mov	r0, r3
 800ac9a:	301c      	adds	r0, #28
 800ac9c:	e772      	b.n	800ab84 <_dtoa_r+0x7f4>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dc37      	bgt.n	800ad14 <_dtoa_r+0x984>
 800aca4:	9b06      	ldr	r3, [sp, #24]
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	dd34      	ble.n	800ad14 <_dtoa_r+0x984>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	9302      	str	r3, [sp, #8]
 800acae:	9b02      	ldr	r3, [sp, #8]
 800acb0:	b96b      	cbnz	r3, 800acce <_dtoa_r+0x93e>
 800acb2:	4631      	mov	r1, r6
 800acb4:	2205      	movs	r2, #5
 800acb6:	4620      	mov	r0, r4
 800acb8:	f000 f9c6 	bl	800b048 <__multadd>
 800acbc:	4601      	mov	r1, r0
 800acbe:	4606      	mov	r6, r0
 800acc0:	ee18 0a10 	vmov	r0, s16
 800acc4:	f000 fbe0 	bl	800b488 <__mcmp>
 800acc8:	2800      	cmp	r0, #0
 800acca:	f73f adbb 	bgt.w	800a844 <_dtoa_r+0x4b4>
 800acce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd0:	9d01      	ldr	r5, [sp, #4]
 800acd2:	43db      	mvns	r3, r3
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	f04f 0800 	mov.w	r8, #0
 800acda:	4631      	mov	r1, r6
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 f991 	bl	800b004 <_Bfree>
 800ace2:	2f00      	cmp	r7, #0
 800ace4:	f43f aea4 	beq.w	800aa30 <_dtoa_r+0x6a0>
 800ace8:	f1b8 0f00 	cmp.w	r8, #0
 800acec:	d005      	beq.n	800acfa <_dtoa_r+0x96a>
 800acee:	45b8      	cmp	r8, r7
 800acf0:	d003      	beq.n	800acfa <_dtoa_r+0x96a>
 800acf2:	4641      	mov	r1, r8
 800acf4:	4620      	mov	r0, r4
 800acf6:	f000 f985 	bl	800b004 <_Bfree>
 800acfa:	4639      	mov	r1, r7
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 f981 	bl	800b004 <_Bfree>
 800ad02:	e695      	b.n	800aa30 <_dtoa_r+0x6a0>
 800ad04:	2600      	movs	r6, #0
 800ad06:	4637      	mov	r7, r6
 800ad08:	e7e1      	b.n	800acce <_dtoa_r+0x93e>
 800ad0a:	9700      	str	r7, [sp, #0]
 800ad0c:	4637      	mov	r7, r6
 800ad0e:	e599      	b.n	800a844 <_dtoa_r+0x4b4>
 800ad10:	40240000 	.word	0x40240000
 800ad14:	9b08      	ldr	r3, [sp, #32]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	f000 80ca 	beq.w	800aeb0 <_dtoa_r+0xb20>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	9302      	str	r3, [sp, #8]
 800ad20:	2d00      	cmp	r5, #0
 800ad22:	dd05      	ble.n	800ad30 <_dtoa_r+0x9a0>
 800ad24:	4639      	mov	r1, r7
 800ad26:	462a      	mov	r2, r5
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fb3d 	bl	800b3a8 <__lshift>
 800ad2e:	4607      	mov	r7, r0
 800ad30:	f1b8 0f00 	cmp.w	r8, #0
 800ad34:	d05b      	beq.n	800adee <_dtoa_r+0xa5e>
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	4620      	mov	r0, r4
 800ad3a:	f000 f923 	bl	800af84 <_Balloc>
 800ad3e:	4605      	mov	r5, r0
 800ad40:	b928      	cbnz	r0, 800ad4e <_dtoa_r+0x9be>
 800ad42:	4b87      	ldr	r3, [pc, #540]	; (800af60 <_dtoa_r+0xbd0>)
 800ad44:	4602      	mov	r2, r0
 800ad46:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad4a:	f7ff bb3b 	b.w	800a3c4 <_dtoa_r+0x34>
 800ad4e:	693a      	ldr	r2, [r7, #16]
 800ad50:	3202      	adds	r2, #2
 800ad52:	0092      	lsls	r2, r2, #2
 800ad54:	f107 010c 	add.w	r1, r7, #12
 800ad58:	300c      	adds	r0, #12
 800ad5a:	f7fe fda1 	bl	80098a0 <memcpy>
 800ad5e:	2201      	movs	r2, #1
 800ad60:	4629      	mov	r1, r5
 800ad62:	4620      	mov	r0, r4
 800ad64:	f000 fb20 	bl	800b3a8 <__lshift>
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	f103 0901 	add.w	r9, r3, #1
 800ad6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad72:	4413      	add	r3, r2
 800ad74:	9305      	str	r3, [sp, #20]
 800ad76:	f00a 0301 	and.w	r3, sl, #1
 800ad7a:	46b8      	mov	r8, r7
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	4607      	mov	r7, r0
 800ad80:	4631      	mov	r1, r6
 800ad82:	ee18 0a10 	vmov	r0, s16
 800ad86:	f7ff fa77 	bl	800a278 <quorem>
 800ad8a:	4641      	mov	r1, r8
 800ad8c:	9002      	str	r0, [sp, #8]
 800ad8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad92:	ee18 0a10 	vmov	r0, s16
 800ad96:	f000 fb77 	bl	800b488 <__mcmp>
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	9003      	str	r0, [sp, #12]
 800ad9e:	4631      	mov	r1, r6
 800ada0:	4620      	mov	r0, r4
 800ada2:	f000 fb8d 	bl	800b4c0 <__mdiff>
 800ada6:	68c2      	ldr	r2, [r0, #12]
 800ada8:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800adac:	4605      	mov	r5, r0
 800adae:	bb02      	cbnz	r2, 800adf2 <_dtoa_r+0xa62>
 800adb0:	4601      	mov	r1, r0
 800adb2:	ee18 0a10 	vmov	r0, s16
 800adb6:	f000 fb67 	bl	800b488 <__mcmp>
 800adba:	4602      	mov	r2, r0
 800adbc:	4629      	mov	r1, r5
 800adbe:	4620      	mov	r0, r4
 800adc0:	9207      	str	r2, [sp, #28]
 800adc2:	f000 f91f 	bl	800b004 <_Bfree>
 800adc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800adca:	ea43 0102 	orr.w	r1, r3, r2
 800adce:	9b04      	ldr	r3, [sp, #16]
 800add0:	430b      	orrs	r3, r1
 800add2:	464d      	mov	r5, r9
 800add4:	d10f      	bne.n	800adf6 <_dtoa_r+0xa66>
 800add6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adda:	d02a      	beq.n	800ae32 <_dtoa_r+0xaa2>
 800addc:	9b03      	ldr	r3, [sp, #12]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	dd02      	ble.n	800ade8 <_dtoa_r+0xa58>
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ade8:	f88b a000 	strb.w	sl, [fp]
 800adec:	e775      	b.n	800acda <_dtoa_r+0x94a>
 800adee:	4638      	mov	r0, r7
 800adf0:	e7ba      	b.n	800ad68 <_dtoa_r+0x9d8>
 800adf2:	2201      	movs	r2, #1
 800adf4:	e7e2      	b.n	800adbc <_dtoa_r+0xa2c>
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	db04      	blt.n	800ae06 <_dtoa_r+0xa76>
 800adfc:	9906      	ldr	r1, [sp, #24]
 800adfe:	430b      	orrs	r3, r1
 800ae00:	9904      	ldr	r1, [sp, #16]
 800ae02:	430b      	orrs	r3, r1
 800ae04:	d122      	bne.n	800ae4c <_dtoa_r+0xabc>
 800ae06:	2a00      	cmp	r2, #0
 800ae08:	ddee      	ble.n	800ade8 <_dtoa_r+0xa58>
 800ae0a:	ee18 1a10 	vmov	r1, s16
 800ae0e:	2201      	movs	r2, #1
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 fac9 	bl	800b3a8 <__lshift>
 800ae16:	4631      	mov	r1, r6
 800ae18:	ee08 0a10 	vmov	s16, r0
 800ae1c:	f000 fb34 	bl	800b488 <__mcmp>
 800ae20:	2800      	cmp	r0, #0
 800ae22:	dc03      	bgt.n	800ae2c <_dtoa_r+0xa9c>
 800ae24:	d1e0      	bne.n	800ade8 <_dtoa_r+0xa58>
 800ae26:	f01a 0f01 	tst.w	sl, #1
 800ae2a:	d0dd      	beq.n	800ade8 <_dtoa_r+0xa58>
 800ae2c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae30:	d1d7      	bne.n	800ade2 <_dtoa_r+0xa52>
 800ae32:	2339      	movs	r3, #57	; 0x39
 800ae34:	f88b 3000 	strb.w	r3, [fp]
 800ae38:	462b      	mov	r3, r5
 800ae3a:	461d      	mov	r5, r3
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae42:	2a39      	cmp	r2, #57	; 0x39
 800ae44:	d071      	beq.n	800af2a <_dtoa_r+0xb9a>
 800ae46:	3201      	adds	r2, #1
 800ae48:	701a      	strb	r2, [r3, #0]
 800ae4a:	e746      	b.n	800acda <_dtoa_r+0x94a>
 800ae4c:	2a00      	cmp	r2, #0
 800ae4e:	dd07      	ble.n	800ae60 <_dtoa_r+0xad0>
 800ae50:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae54:	d0ed      	beq.n	800ae32 <_dtoa_r+0xaa2>
 800ae56:	f10a 0301 	add.w	r3, sl, #1
 800ae5a:	f88b 3000 	strb.w	r3, [fp]
 800ae5e:	e73c      	b.n	800acda <_dtoa_r+0x94a>
 800ae60:	9b05      	ldr	r3, [sp, #20]
 800ae62:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae66:	4599      	cmp	r9, r3
 800ae68:	d047      	beq.n	800aefa <_dtoa_r+0xb6a>
 800ae6a:	ee18 1a10 	vmov	r1, s16
 800ae6e:	2300      	movs	r3, #0
 800ae70:	220a      	movs	r2, #10
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 f8e8 	bl	800b048 <__multadd>
 800ae78:	45b8      	cmp	r8, r7
 800ae7a:	ee08 0a10 	vmov	s16, r0
 800ae7e:	f04f 0300 	mov.w	r3, #0
 800ae82:	f04f 020a 	mov.w	r2, #10
 800ae86:	4641      	mov	r1, r8
 800ae88:	4620      	mov	r0, r4
 800ae8a:	d106      	bne.n	800ae9a <_dtoa_r+0xb0a>
 800ae8c:	f000 f8dc 	bl	800b048 <__multadd>
 800ae90:	4680      	mov	r8, r0
 800ae92:	4607      	mov	r7, r0
 800ae94:	f109 0901 	add.w	r9, r9, #1
 800ae98:	e772      	b.n	800ad80 <_dtoa_r+0x9f0>
 800ae9a:	f000 f8d5 	bl	800b048 <__multadd>
 800ae9e:	4639      	mov	r1, r7
 800aea0:	4680      	mov	r8, r0
 800aea2:	2300      	movs	r3, #0
 800aea4:	220a      	movs	r2, #10
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 f8ce 	bl	800b048 <__multadd>
 800aeac:	4607      	mov	r7, r0
 800aeae:	e7f1      	b.n	800ae94 <_dtoa_r+0xb04>
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	9302      	str	r3, [sp, #8]
 800aeb4:	9d01      	ldr	r5, [sp, #4]
 800aeb6:	ee18 0a10 	vmov	r0, s16
 800aeba:	4631      	mov	r1, r6
 800aebc:	f7ff f9dc 	bl	800a278 <quorem>
 800aec0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800aec4:	9b01      	ldr	r3, [sp, #4]
 800aec6:	f805 ab01 	strb.w	sl, [r5], #1
 800aeca:	1aea      	subs	r2, r5, r3
 800aecc:	9b02      	ldr	r3, [sp, #8]
 800aece:	4293      	cmp	r3, r2
 800aed0:	dd09      	ble.n	800aee6 <_dtoa_r+0xb56>
 800aed2:	ee18 1a10 	vmov	r1, s16
 800aed6:	2300      	movs	r3, #0
 800aed8:	220a      	movs	r2, #10
 800aeda:	4620      	mov	r0, r4
 800aedc:	f000 f8b4 	bl	800b048 <__multadd>
 800aee0:	ee08 0a10 	vmov	s16, r0
 800aee4:	e7e7      	b.n	800aeb6 <_dtoa_r+0xb26>
 800aee6:	9b02      	ldr	r3, [sp, #8]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	bfc8      	it	gt
 800aeec:	461d      	movgt	r5, r3
 800aeee:	9b01      	ldr	r3, [sp, #4]
 800aef0:	bfd8      	it	le
 800aef2:	2501      	movle	r5, #1
 800aef4:	441d      	add	r5, r3
 800aef6:	f04f 0800 	mov.w	r8, #0
 800aefa:	ee18 1a10 	vmov	r1, s16
 800aefe:	2201      	movs	r2, #1
 800af00:	4620      	mov	r0, r4
 800af02:	f000 fa51 	bl	800b3a8 <__lshift>
 800af06:	4631      	mov	r1, r6
 800af08:	ee08 0a10 	vmov	s16, r0
 800af0c:	f000 fabc 	bl	800b488 <__mcmp>
 800af10:	2800      	cmp	r0, #0
 800af12:	dc91      	bgt.n	800ae38 <_dtoa_r+0xaa8>
 800af14:	d102      	bne.n	800af1c <_dtoa_r+0xb8c>
 800af16:	f01a 0f01 	tst.w	sl, #1
 800af1a:	d18d      	bne.n	800ae38 <_dtoa_r+0xaa8>
 800af1c:	462b      	mov	r3, r5
 800af1e:	461d      	mov	r5, r3
 800af20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af24:	2a30      	cmp	r2, #48	; 0x30
 800af26:	d0fa      	beq.n	800af1e <_dtoa_r+0xb8e>
 800af28:	e6d7      	b.n	800acda <_dtoa_r+0x94a>
 800af2a:	9a01      	ldr	r2, [sp, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d184      	bne.n	800ae3a <_dtoa_r+0xaaa>
 800af30:	9b00      	ldr	r3, [sp, #0]
 800af32:	3301      	adds	r3, #1
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	2331      	movs	r3, #49	; 0x31
 800af38:	7013      	strb	r3, [r2, #0]
 800af3a:	e6ce      	b.n	800acda <_dtoa_r+0x94a>
 800af3c:	4b09      	ldr	r3, [pc, #36]	; (800af64 <_dtoa_r+0xbd4>)
 800af3e:	f7ff ba95 	b.w	800a46c <_dtoa_r+0xdc>
 800af42:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af44:	2b00      	cmp	r3, #0
 800af46:	f47f aa6e 	bne.w	800a426 <_dtoa_r+0x96>
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <_dtoa_r+0xbd8>)
 800af4c:	f7ff ba8e 	b.w	800a46c <_dtoa_r+0xdc>
 800af50:	9b02      	ldr	r3, [sp, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	dcae      	bgt.n	800aeb4 <_dtoa_r+0xb24>
 800af56:	9b06      	ldr	r3, [sp, #24]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	f73f aea8 	bgt.w	800acae <_dtoa_r+0x91e>
 800af5e:	e7a9      	b.n	800aeb4 <_dtoa_r+0xb24>
 800af60:	0800ca07 	.word	0x0800ca07
 800af64:	0800c964 	.word	0x0800c964
 800af68:	0800c988 	.word	0x0800c988

0800af6c <_localeconv_r>:
 800af6c:	4800      	ldr	r0, [pc, #0]	; (800af70 <_localeconv_r+0x4>)
 800af6e:	4770      	bx	lr
 800af70:	20000164 	.word	0x20000164

0800af74 <malloc>:
 800af74:	4b02      	ldr	r3, [pc, #8]	; (800af80 <malloc+0xc>)
 800af76:	4601      	mov	r1, r0
 800af78:	6818      	ldr	r0, [r3, #0]
 800af7a:	f000 bc09 	b.w	800b790 <_malloc_r>
 800af7e:	bf00      	nop
 800af80:	20000010 	.word	0x20000010

0800af84 <_Balloc>:
 800af84:	b570      	push	{r4, r5, r6, lr}
 800af86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af88:	4604      	mov	r4, r0
 800af8a:	460d      	mov	r5, r1
 800af8c:	b976      	cbnz	r6, 800afac <_Balloc+0x28>
 800af8e:	2010      	movs	r0, #16
 800af90:	f7ff fff0 	bl	800af74 <malloc>
 800af94:	4602      	mov	r2, r0
 800af96:	6260      	str	r0, [r4, #36]	; 0x24
 800af98:	b920      	cbnz	r0, 800afa4 <_Balloc+0x20>
 800af9a:	4b18      	ldr	r3, [pc, #96]	; (800affc <_Balloc+0x78>)
 800af9c:	4818      	ldr	r0, [pc, #96]	; (800b000 <_Balloc+0x7c>)
 800af9e:	2166      	movs	r1, #102	; 0x66
 800afa0:	f000 fe04 	bl	800bbac <__assert_func>
 800afa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afa8:	6006      	str	r6, [r0, #0]
 800afaa:	60c6      	str	r6, [r0, #12]
 800afac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800afae:	68f3      	ldr	r3, [r6, #12]
 800afb0:	b183      	cbz	r3, 800afd4 <_Balloc+0x50>
 800afb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800afba:	b9b8      	cbnz	r0, 800afec <_Balloc+0x68>
 800afbc:	2101      	movs	r1, #1
 800afbe:	fa01 f605 	lsl.w	r6, r1, r5
 800afc2:	1d72      	adds	r2, r6, #5
 800afc4:	0092      	lsls	r2, r2, #2
 800afc6:	4620      	mov	r0, r4
 800afc8:	f000 fb60 	bl	800b68c <_calloc_r>
 800afcc:	b160      	cbz	r0, 800afe8 <_Balloc+0x64>
 800afce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afd2:	e00e      	b.n	800aff2 <_Balloc+0x6e>
 800afd4:	2221      	movs	r2, #33	; 0x21
 800afd6:	2104      	movs	r1, #4
 800afd8:	4620      	mov	r0, r4
 800afda:	f000 fb57 	bl	800b68c <_calloc_r>
 800afde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afe0:	60f0      	str	r0, [r6, #12]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e4      	bne.n	800afb2 <_Balloc+0x2e>
 800afe8:	2000      	movs	r0, #0
 800afea:	bd70      	pop	{r4, r5, r6, pc}
 800afec:	6802      	ldr	r2, [r0, #0]
 800afee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aff2:	2300      	movs	r3, #0
 800aff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aff8:	e7f7      	b.n	800afea <_Balloc+0x66>
 800affa:	bf00      	nop
 800affc:	0800c995 	.word	0x0800c995
 800b000:	0800ca18 	.word	0x0800ca18

0800b004 <_Bfree>:
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b008:	4605      	mov	r5, r0
 800b00a:	460c      	mov	r4, r1
 800b00c:	b976      	cbnz	r6, 800b02c <_Bfree+0x28>
 800b00e:	2010      	movs	r0, #16
 800b010:	f7ff ffb0 	bl	800af74 <malloc>
 800b014:	4602      	mov	r2, r0
 800b016:	6268      	str	r0, [r5, #36]	; 0x24
 800b018:	b920      	cbnz	r0, 800b024 <_Bfree+0x20>
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <_Bfree+0x3c>)
 800b01c:	4809      	ldr	r0, [pc, #36]	; (800b044 <_Bfree+0x40>)
 800b01e:	218a      	movs	r1, #138	; 0x8a
 800b020:	f000 fdc4 	bl	800bbac <__assert_func>
 800b024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b028:	6006      	str	r6, [r0, #0]
 800b02a:	60c6      	str	r6, [r0, #12]
 800b02c:	b13c      	cbz	r4, 800b03e <_Bfree+0x3a>
 800b02e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b030:	6862      	ldr	r2, [r4, #4]
 800b032:	68db      	ldr	r3, [r3, #12]
 800b034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b038:	6021      	str	r1, [r4, #0]
 800b03a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b03e:	bd70      	pop	{r4, r5, r6, pc}
 800b040:	0800c995 	.word	0x0800c995
 800b044:	0800ca18 	.word	0x0800ca18

0800b048 <__multadd>:
 800b048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b04c:	690d      	ldr	r5, [r1, #16]
 800b04e:	4607      	mov	r7, r0
 800b050:	460c      	mov	r4, r1
 800b052:	461e      	mov	r6, r3
 800b054:	f101 0c14 	add.w	ip, r1, #20
 800b058:	2000      	movs	r0, #0
 800b05a:	f8dc 3000 	ldr.w	r3, [ip]
 800b05e:	b299      	uxth	r1, r3
 800b060:	fb02 6101 	mla	r1, r2, r1, r6
 800b064:	0c1e      	lsrs	r6, r3, #16
 800b066:	0c0b      	lsrs	r3, r1, #16
 800b068:	fb02 3306 	mla	r3, r2, r6, r3
 800b06c:	b289      	uxth	r1, r1
 800b06e:	3001      	adds	r0, #1
 800b070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b074:	4285      	cmp	r5, r0
 800b076:	f84c 1b04 	str.w	r1, [ip], #4
 800b07a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b07e:	dcec      	bgt.n	800b05a <__multadd+0x12>
 800b080:	b30e      	cbz	r6, 800b0c6 <__multadd+0x7e>
 800b082:	68a3      	ldr	r3, [r4, #8]
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc19      	bgt.n	800b0bc <__multadd+0x74>
 800b088:	6861      	ldr	r1, [r4, #4]
 800b08a:	4638      	mov	r0, r7
 800b08c:	3101      	adds	r1, #1
 800b08e:	f7ff ff79 	bl	800af84 <_Balloc>
 800b092:	4680      	mov	r8, r0
 800b094:	b928      	cbnz	r0, 800b0a2 <__multadd+0x5a>
 800b096:	4602      	mov	r2, r0
 800b098:	4b0c      	ldr	r3, [pc, #48]	; (800b0cc <__multadd+0x84>)
 800b09a:	480d      	ldr	r0, [pc, #52]	; (800b0d0 <__multadd+0x88>)
 800b09c:	21b5      	movs	r1, #181	; 0xb5
 800b09e:	f000 fd85 	bl	800bbac <__assert_func>
 800b0a2:	6922      	ldr	r2, [r4, #16]
 800b0a4:	3202      	adds	r2, #2
 800b0a6:	f104 010c 	add.w	r1, r4, #12
 800b0aa:	0092      	lsls	r2, r2, #2
 800b0ac:	300c      	adds	r0, #12
 800b0ae:	f7fe fbf7 	bl	80098a0 <memcpy>
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	4638      	mov	r0, r7
 800b0b6:	f7ff ffa5 	bl	800b004 <_Bfree>
 800b0ba:	4644      	mov	r4, r8
 800b0bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0c0:	3501      	adds	r5, #1
 800b0c2:	615e      	str	r6, [r3, #20]
 800b0c4:	6125      	str	r5, [r4, #16]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	0800ca07 	.word	0x0800ca07
 800b0d0:	0800ca18 	.word	0x0800ca18

0800b0d4 <__hi0bits>:
 800b0d4:	0c03      	lsrs	r3, r0, #16
 800b0d6:	041b      	lsls	r3, r3, #16
 800b0d8:	b9d3      	cbnz	r3, 800b110 <__hi0bits+0x3c>
 800b0da:	0400      	lsls	r0, r0, #16
 800b0dc:	2310      	movs	r3, #16
 800b0de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0e2:	bf04      	itt	eq
 800b0e4:	0200      	lsleq	r0, r0, #8
 800b0e6:	3308      	addeq	r3, #8
 800b0e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0ec:	bf04      	itt	eq
 800b0ee:	0100      	lsleq	r0, r0, #4
 800b0f0:	3304      	addeq	r3, #4
 800b0f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0f6:	bf04      	itt	eq
 800b0f8:	0080      	lsleq	r0, r0, #2
 800b0fa:	3302      	addeq	r3, #2
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	db05      	blt.n	800b10c <__hi0bits+0x38>
 800b100:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b104:	f103 0301 	add.w	r3, r3, #1
 800b108:	bf08      	it	eq
 800b10a:	2320      	moveq	r3, #32
 800b10c:	4618      	mov	r0, r3
 800b10e:	4770      	bx	lr
 800b110:	2300      	movs	r3, #0
 800b112:	e7e4      	b.n	800b0de <__hi0bits+0xa>

0800b114 <__lo0bits>:
 800b114:	6803      	ldr	r3, [r0, #0]
 800b116:	f013 0207 	ands.w	r2, r3, #7
 800b11a:	4601      	mov	r1, r0
 800b11c:	d00b      	beq.n	800b136 <__lo0bits+0x22>
 800b11e:	07da      	lsls	r2, r3, #31
 800b120:	d423      	bmi.n	800b16a <__lo0bits+0x56>
 800b122:	0798      	lsls	r0, r3, #30
 800b124:	bf49      	itett	mi
 800b126:	085b      	lsrmi	r3, r3, #1
 800b128:	089b      	lsrpl	r3, r3, #2
 800b12a:	2001      	movmi	r0, #1
 800b12c:	600b      	strmi	r3, [r1, #0]
 800b12e:	bf5c      	itt	pl
 800b130:	600b      	strpl	r3, [r1, #0]
 800b132:	2002      	movpl	r0, #2
 800b134:	4770      	bx	lr
 800b136:	b298      	uxth	r0, r3
 800b138:	b9a8      	cbnz	r0, 800b166 <__lo0bits+0x52>
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	2010      	movs	r0, #16
 800b13e:	b2da      	uxtb	r2, r3
 800b140:	b90a      	cbnz	r2, 800b146 <__lo0bits+0x32>
 800b142:	3008      	adds	r0, #8
 800b144:	0a1b      	lsrs	r3, r3, #8
 800b146:	071a      	lsls	r2, r3, #28
 800b148:	bf04      	itt	eq
 800b14a:	091b      	lsreq	r3, r3, #4
 800b14c:	3004      	addeq	r0, #4
 800b14e:	079a      	lsls	r2, r3, #30
 800b150:	bf04      	itt	eq
 800b152:	089b      	lsreq	r3, r3, #2
 800b154:	3002      	addeq	r0, #2
 800b156:	07da      	lsls	r2, r3, #31
 800b158:	d403      	bmi.n	800b162 <__lo0bits+0x4e>
 800b15a:	085b      	lsrs	r3, r3, #1
 800b15c:	f100 0001 	add.w	r0, r0, #1
 800b160:	d005      	beq.n	800b16e <__lo0bits+0x5a>
 800b162:	600b      	str	r3, [r1, #0]
 800b164:	4770      	bx	lr
 800b166:	4610      	mov	r0, r2
 800b168:	e7e9      	b.n	800b13e <__lo0bits+0x2a>
 800b16a:	2000      	movs	r0, #0
 800b16c:	4770      	bx	lr
 800b16e:	2020      	movs	r0, #32
 800b170:	4770      	bx	lr
	...

0800b174 <__i2b>:
 800b174:	b510      	push	{r4, lr}
 800b176:	460c      	mov	r4, r1
 800b178:	2101      	movs	r1, #1
 800b17a:	f7ff ff03 	bl	800af84 <_Balloc>
 800b17e:	4602      	mov	r2, r0
 800b180:	b928      	cbnz	r0, 800b18e <__i2b+0x1a>
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <__i2b+0x24>)
 800b184:	4805      	ldr	r0, [pc, #20]	; (800b19c <__i2b+0x28>)
 800b186:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b18a:	f000 fd0f 	bl	800bbac <__assert_func>
 800b18e:	2301      	movs	r3, #1
 800b190:	6144      	str	r4, [r0, #20]
 800b192:	6103      	str	r3, [r0, #16]
 800b194:	bd10      	pop	{r4, pc}
 800b196:	bf00      	nop
 800b198:	0800ca07 	.word	0x0800ca07
 800b19c:	0800ca18 	.word	0x0800ca18

0800b1a0 <__multiply>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	4691      	mov	r9, r2
 800b1a6:	690a      	ldr	r2, [r1, #16]
 800b1a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	bfb8      	it	lt
 800b1b0:	460b      	movlt	r3, r1
 800b1b2:	460c      	mov	r4, r1
 800b1b4:	bfbc      	itt	lt
 800b1b6:	464c      	movlt	r4, r9
 800b1b8:	4699      	movlt	r9, r3
 800b1ba:	6927      	ldr	r7, [r4, #16]
 800b1bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1c0:	68a3      	ldr	r3, [r4, #8]
 800b1c2:	6861      	ldr	r1, [r4, #4]
 800b1c4:	eb07 060a 	add.w	r6, r7, sl
 800b1c8:	42b3      	cmp	r3, r6
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	bfb8      	it	lt
 800b1ce:	3101      	addlt	r1, #1
 800b1d0:	f7ff fed8 	bl	800af84 <_Balloc>
 800b1d4:	b930      	cbnz	r0, 800b1e4 <__multiply+0x44>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	4b44      	ldr	r3, [pc, #272]	; (800b2ec <__multiply+0x14c>)
 800b1da:	4845      	ldr	r0, [pc, #276]	; (800b2f0 <__multiply+0x150>)
 800b1dc:	f240 115d 	movw	r1, #349	; 0x15d
 800b1e0:	f000 fce4 	bl	800bbac <__assert_func>
 800b1e4:	f100 0514 	add.w	r5, r0, #20
 800b1e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1ec:	462b      	mov	r3, r5
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4543      	cmp	r3, r8
 800b1f2:	d321      	bcc.n	800b238 <__multiply+0x98>
 800b1f4:	f104 0314 	add.w	r3, r4, #20
 800b1f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1fc:	f109 0314 	add.w	r3, r9, #20
 800b200:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b204:	9202      	str	r2, [sp, #8]
 800b206:	1b3a      	subs	r2, r7, r4
 800b208:	3a15      	subs	r2, #21
 800b20a:	f022 0203 	bic.w	r2, r2, #3
 800b20e:	3204      	adds	r2, #4
 800b210:	f104 0115 	add.w	r1, r4, #21
 800b214:	428f      	cmp	r7, r1
 800b216:	bf38      	it	cc
 800b218:	2204      	movcc	r2, #4
 800b21a:	9201      	str	r2, [sp, #4]
 800b21c:	9a02      	ldr	r2, [sp, #8]
 800b21e:	9303      	str	r3, [sp, #12]
 800b220:	429a      	cmp	r2, r3
 800b222:	d80c      	bhi.n	800b23e <__multiply+0x9e>
 800b224:	2e00      	cmp	r6, #0
 800b226:	dd03      	ble.n	800b230 <__multiply+0x90>
 800b228:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d05a      	beq.n	800b2e6 <__multiply+0x146>
 800b230:	6106      	str	r6, [r0, #16]
 800b232:	b005      	add	sp, #20
 800b234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b238:	f843 2b04 	str.w	r2, [r3], #4
 800b23c:	e7d8      	b.n	800b1f0 <__multiply+0x50>
 800b23e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b242:	f1ba 0f00 	cmp.w	sl, #0
 800b246:	d024      	beq.n	800b292 <__multiply+0xf2>
 800b248:	f104 0e14 	add.w	lr, r4, #20
 800b24c:	46a9      	mov	r9, r5
 800b24e:	f04f 0c00 	mov.w	ip, #0
 800b252:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b256:	f8d9 1000 	ldr.w	r1, [r9]
 800b25a:	fa1f fb82 	uxth.w	fp, r2
 800b25e:	b289      	uxth	r1, r1
 800b260:	fb0a 110b 	mla	r1, sl, fp, r1
 800b264:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b268:	f8d9 2000 	ldr.w	r2, [r9]
 800b26c:	4461      	add	r1, ip
 800b26e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b272:	fb0a c20b 	mla	r2, sl, fp, ip
 800b276:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b27a:	b289      	uxth	r1, r1
 800b27c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b280:	4577      	cmp	r7, lr
 800b282:	f849 1b04 	str.w	r1, [r9], #4
 800b286:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b28a:	d8e2      	bhi.n	800b252 <__multiply+0xb2>
 800b28c:	9a01      	ldr	r2, [sp, #4]
 800b28e:	f845 c002 	str.w	ip, [r5, r2]
 800b292:	9a03      	ldr	r2, [sp, #12]
 800b294:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b298:	3304      	adds	r3, #4
 800b29a:	f1b9 0f00 	cmp.w	r9, #0
 800b29e:	d020      	beq.n	800b2e2 <__multiply+0x142>
 800b2a0:	6829      	ldr	r1, [r5, #0]
 800b2a2:	f104 0c14 	add.w	ip, r4, #20
 800b2a6:	46ae      	mov	lr, r5
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b2b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2b4:	fb09 220b 	mla	r2, r9, fp, r2
 800b2b8:	4492      	add	sl, r2
 800b2ba:	b289      	uxth	r1, r1
 800b2bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2c0:	f84e 1b04 	str.w	r1, [lr], #4
 800b2c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b2cc:	0c12      	lsrs	r2, r2, #16
 800b2ce:	fb09 1102 	mla	r1, r9, r2, r1
 800b2d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2d6:	4567      	cmp	r7, ip
 800b2d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2dc:	d8e6      	bhi.n	800b2ac <__multiply+0x10c>
 800b2de:	9a01      	ldr	r2, [sp, #4]
 800b2e0:	50a9      	str	r1, [r5, r2]
 800b2e2:	3504      	adds	r5, #4
 800b2e4:	e79a      	b.n	800b21c <__multiply+0x7c>
 800b2e6:	3e01      	subs	r6, #1
 800b2e8:	e79c      	b.n	800b224 <__multiply+0x84>
 800b2ea:	bf00      	nop
 800b2ec:	0800ca07 	.word	0x0800ca07
 800b2f0:	0800ca18 	.word	0x0800ca18

0800b2f4 <__pow5mult>:
 800b2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2f8:	4615      	mov	r5, r2
 800b2fa:	f012 0203 	ands.w	r2, r2, #3
 800b2fe:	4606      	mov	r6, r0
 800b300:	460f      	mov	r7, r1
 800b302:	d007      	beq.n	800b314 <__pow5mult+0x20>
 800b304:	4c25      	ldr	r4, [pc, #148]	; (800b39c <__pow5mult+0xa8>)
 800b306:	3a01      	subs	r2, #1
 800b308:	2300      	movs	r3, #0
 800b30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b30e:	f7ff fe9b 	bl	800b048 <__multadd>
 800b312:	4607      	mov	r7, r0
 800b314:	10ad      	asrs	r5, r5, #2
 800b316:	d03d      	beq.n	800b394 <__pow5mult+0xa0>
 800b318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b31a:	b97c      	cbnz	r4, 800b33c <__pow5mult+0x48>
 800b31c:	2010      	movs	r0, #16
 800b31e:	f7ff fe29 	bl	800af74 <malloc>
 800b322:	4602      	mov	r2, r0
 800b324:	6270      	str	r0, [r6, #36]	; 0x24
 800b326:	b928      	cbnz	r0, 800b334 <__pow5mult+0x40>
 800b328:	4b1d      	ldr	r3, [pc, #116]	; (800b3a0 <__pow5mult+0xac>)
 800b32a:	481e      	ldr	r0, [pc, #120]	; (800b3a4 <__pow5mult+0xb0>)
 800b32c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b330:	f000 fc3c 	bl	800bbac <__assert_func>
 800b334:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b338:	6004      	str	r4, [r0, #0]
 800b33a:	60c4      	str	r4, [r0, #12]
 800b33c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b340:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b344:	b94c      	cbnz	r4, 800b35a <__pow5mult+0x66>
 800b346:	f240 2171 	movw	r1, #625	; 0x271
 800b34a:	4630      	mov	r0, r6
 800b34c:	f7ff ff12 	bl	800b174 <__i2b>
 800b350:	2300      	movs	r3, #0
 800b352:	f8c8 0008 	str.w	r0, [r8, #8]
 800b356:	4604      	mov	r4, r0
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	f04f 0900 	mov.w	r9, #0
 800b35e:	07eb      	lsls	r3, r5, #31
 800b360:	d50a      	bpl.n	800b378 <__pow5mult+0x84>
 800b362:	4639      	mov	r1, r7
 800b364:	4622      	mov	r2, r4
 800b366:	4630      	mov	r0, r6
 800b368:	f7ff ff1a 	bl	800b1a0 <__multiply>
 800b36c:	4639      	mov	r1, r7
 800b36e:	4680      	mov	r8, r0
 800b370:	4630      	mov	r0, r6
 800b372:	f7ff fe47 	bl	800b004 <_Bfree>
 800b376:	4647      	mov	r7, r8
 800b378:	106d      	asrs	r5, r5, #1
 800b37a:	d00b      	beq.n	800b394 <__pow5mult+0xa0>
 800b37c:	6820      	ldr	r0, [r4, #0]
 800b37e:	b938      	cbnz	r0, 800b390 <__pow5mult+0x9c>
 800b380:	4622      	mov	r2, r4
 800b382:	4621      	mov	r1, r4
 800b384:	4630      	mov	r0, r6
 800b386:	f7ff ff0b 	bl	800b1a0 <__multiply>
 800b38a:	6020      	str	r0, [r4, #0]
 800b38c:	f8c0 9000 	str.w	r9, [r0]
 800b390:	4604      	mov	r4, r0
 800b392:	e7e4      	b.n	800b35e <__pow5mult+0x6a>
 800b394:	4638      	mov	r0, r7
 800b396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b39a:	bf00      	nop
 800b39c:	0800cb68 	.word	0x0800cb68
 800b3a0:	0800c995 	.word	0x0800c995
 800b3a4:	0800ca18 	.word	0x0800ca18

0800b3a8 <__lshift>:
 800b3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	6849      	ldr	r1, [r1, #4]
 800b3b0:	6923      	ldr	r3, [r4, #16]
 800b3b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3b6:	68a3      	ldr	r3, [r4, #8]
 800b3b8:	4607      	mov	r7, r0
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3c0:	f108 0601 	add.w	r6, r8, #1
 800b3c4:	42b3      	cmp	r3, r6
 800b3c6:	db0b      	blt.n	800b3e0 <__lshift+0x38>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff fddb 	bl	800af84 <_Balloc>
 800b3ce:	4605      	mov	r5, r0
 800b3d0:	b948      	cbnz	r0, 800b3e6 <__lshift+0x3e>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	4b2a      	ldr	r3, [pc, #168]	; (800b480 <__lshift+0xd8>)
 800b3d6:	482b      	ldr	r0, [pc, #172]	; (800b484 <__lshift+0xdc>)
 800b3d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3dc:	f000 fbe6 	bl	800bbac <__assert_func>
 800b3e0:	3101      	adds	r1, #1
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	e7ee      	b.n	800b3c4 <__lshift+0x1c>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f100 0114 	add.w	r1, r0, #20
 800b3ec:	f100 0210 	add.w	r2, r0, #16
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	4553      	cmp	r3, sl
 800b3f4:	db37      	blt.n	800b466 <__lshift+0xbe>
 800b3f6:	6920      	ldr	r0, [r4, #16]
 800b3f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3fc:	f104 0314 	add.w	r3, r4, #20
 800b400:	f019 091f 	ands.w	r9, r9, #31
 800b404:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b40c:	d02f      	beq.n	800b46e <__lshift+0xc6>
 800b40e:	f1c9 0e20 	rsb	lr, r9, #32
 800b412:	468a      	mov	sl, r1
 800b414:	f04f 0c00 	mov.w	ip, #0
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	fa02 f209 	lsl.w	r2, r2, r9
 800b41e:	ea42 020c 	orr.w	r2, r2, ip
 800b422:	f84a 2b04 	str.w	r2, [sl], #4
 800b426:	f853 2b04 	ldr.w	r2, [r3], #4
 800b42a:	4298      	cmp	r0, r3
 800b42c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b430:	d8f2      	bhi.n	800b418 <__lshift+0x70>
 800b432:	1b03      	subs	r3, r0, r4
 800b434:	3b15      	subs	r3, #21
 800b436:	f023 0303 	bic.w	r3, r3, #3
 800b43a:	3304      	adds	r3, #4
 800b43c:	f104 0215 	add.w	r2, r4, #21
 800b440:	4290      	cmp	r0, r2
 800b442:	bf38      	it	cc
 800b444:	2304      	movcc	r3, #4
 800b446:	f841 c003 	str.w	ip, [r1, r3]
 800b44a:	f1bc 0f00 	cmp.w	ip, #0
 800b44e:	d001      	beq.n	800b454 <__lshift+0xac>
 800b450:	f108 0602 	add.w	r6, r8, #2
 800b454:	3e01      	subs	r6, #1
 800b456:	4638      	mov	r0, r7
 800b458:	612e      	str	r6, [r5, #16]
 800b45a:	4621      	mov	r1, r4
 800b45c:	f7ff fdd2 	bl	800b004 <_Bfree>
 800b460:	4628      	mov	r0, r5
 800b462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b466:	f842 0f04 	str.w	r0, [r2, #4]!
 800b46a:	3301      	adds	r3, #1
 800b46c:	e7c1      	b.n	800b3f2 <__lshift+0x4a>
 800b46e:	3904      	subs	r1, #4
 800b470:	f853 2b04 	ldr.w	r2, [r3], #4
 800b474:	f841 2f04 	str.w	r2, [r1, #4]!
 800b478:	4298      	cmp	r0, r3
 800b47a:	d8f9      	bhi.n	800b470 <__lshift+0xc8>
 800b47c:	e7ea      	b.n	800b454 <__lshift+0xac>
 800b47e:	bf00      	nop
 800b480:	0800ca07 	.word	0x0800ca07
 800b484:	0800ca18 	.word	0x0800ca18

0800b488 <__mcmp>:
 800b488:	b530      	push	{r4, r5, lr}
 800b48a:	6902      	ldr	r2, [r0, #16]
 800b48c:	690c      	ldr	r4, [r1, #16]
 800b48e:	1b12      	subs	r2, r2, r4
 800b490:	d10e      	bne.n	800b4b0 <__mcmp+0x28>
 800b492:	f100 0314 	add.w	r3, r0, #20
 800b496:	3114      	adds	r1, #20
 800b498:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b49c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4a8:	42a5      	cmp	r5, r4
 800b4aa:	d003      	beq.n	800b4b4 <__mcmp+0x2c>
 800b4ac:	d305      	bcc.n	800b4ba <__mcmp+0x32>
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	bd30      	pop	{r4, r5, pc}
 800b4b4:	4283      	cmp	r3, r0
 800b4b6:	d3f3      	bcc.n	800b4a0 <__mcmp+0x18>
 800b4b8:	e7fa      	b.n	800b4b0 <__mcmp+0x28>
 800b4ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4be:	e7f7      	b.n	800b4b0 <__mcmp+0x28>

0800b4c0 <__mdiff>:
 800b4c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4690      	mov	r8, r2
 800b4ce:	f7ff ffdb 	bl	800b488 <__mcmp>
 800b4d2:	1e05      	subs	r5, r0, #0
 800b4d4:	d110      	bne.n	800b4f8 <__mdiff+0x38>
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f7ff fd53 	bl	800af84 <_Balloc>
 800b4de:	b930      	cbnz	r0, 800b4ee <__mdiff+0x2e>
 800b4e0:	4b3a      	ldr	r3, [pc, #232]	; (800b5cc <__mdiff+0x10c>)
 800b4e2:	4602      	mov	r2, r0
 800b4e4:	f240 2132 	movw	r1, #562	; 0x232
 800b4e8:	4839      	ldr	r0, [pc, #228]	; (800b5d0 <__mdiff+0x110>)
 800b4ea:	f000 fb5f 	bl	800bbac <__assert_func>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	bfa4      	itt	ge
 800b4fa:	4643      	movge	r3, r8
 800b4fc:	46a0      	movge	r8, r4
 800b4fe:	4630      	mov	r0, r6
 800b500:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b504:	bfa6      	itte	ge
 800b506:	461c      	movge	r4, r3
 800b508:	2500      	movge	r5, #0
 800b50a:	2501      	movlt	r5, #1
 800b50c:	f7ff fd3a 	bl	800af84 <_Balloc>
 800b510:	b920      	cbnz	r0, 800b51c <__mdiff+0x5c>
 800b512:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <__mdiff+0x10c>)
 800b514:	4602      	mov	r2, r0
 800b516:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b51a:	e7e5      	b.n	800b4e8 <__mdiff+0x28>
 800b51c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b520:	6926      	ldr	r6, [r4, #16]
 800b522:	60c5      	str	r5, [r0, #12]
 800b524:	f104 0914 	add.w	r9, r4, #20
 800b528:	f108 0514 	add.w	r5, r8, #20
 800b52c:	f100 0e14 	add.w	lr, r0, #20
 800b530:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b534:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b538:	f108 0210 	add.w	r2, r8, #16
 800b53c:	46f2      	mov	sl, lr
 800b53e:	2100      	movs	r1, #0
 800b540:	f859 3b04 	ldr.w	r3, [r9], #4
 800b544:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b548:	fa1f f883 	uxth.w	r8, r3
 800b54c:	fa11 f18b 	uxtah	r1, r1, fp
 800b550:	0c1b      	lsrs	r3, r3, #16
 800b552:	eba1 0808 	sub.w	r8, r1, r8
 800b556:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b55a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b55e:	fa1f f888 	uxth.w	r8, r8
 800b562:	1419      	asrs	r1, r3, #16
 800b564:	454e      	cmp	r6, r9
 800b566:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b56a:	f84a 3b04 	str.w	r3, [sl], #4
 800b56e:	d8e7      	bhi.n	800b540 <__mdiff+0x80>
 800b570:	1b33      	subs	r3, r6, r4
 800b572:	3b15      	subs	r3, #21
 800b574:	f023 0303 	bic.w	r3, r3, #3
 800b578:	3304      	adds	r3, #4
 800b57a:	3415      	adds	r4, #21
 800b57c:	42a6      	cmp	r6, r4
 800b57e:	bf38      	it	cc
 800b580:	2304      	movcc	r3, #4
 800b582:	441d      	add	r5, r3
 800b584:	4473      	add	r3, lr
 800b586:	469e      	mov	lr, r3
 800b588:	462e      	mov	r6, r5
 800b58a:	4566      	cmp	r6, ip
 800b58c:	d30e      	bcc.n	800b5ac <__mdiff+0xec>
 800b58e:	f10c 0203 	add.w	r2, ip, #3
 800b592:	1b52      	subs	r2, r2, r5
 800b594:	f022 0203 	bic.w	r2, r2, #3
 800b598:	3d03      	subs	r5, #3
 800b59a:	45ac      	cmp	ip, r5
 800b59c:	bf38      	it	cc
 800b59e:	2200      	movcc	r2, #0
 800b5a0:	441a      	add	r2, r3
 800b5a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5a6:	b17b      	cbz	r3, 800b5c8 <__mdiff+0x108>
 800b5a8:	6107      	str	r7, [r0, #16]
 800b5aa:	e7a3      	b.n	800b4f4 <__mdiff+0x34>
 800b5ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5b0:	fa11 f288 	uxtah	r2, r1, r8
 800b5b4:	1414      	asrs	r4, r2, #16
 800b5b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5ba:	b292      	uxth	r2, r2
 800b5bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b5c4:	1421      	asrs	r1, r4, #16
 800b5c6:	e7e0      	b.n	800b58a <__mdiff+0xca>
 800b5c8:	3f01      	subs	r7, #1
 800b5ca:	e7ea      	b.n	800b5a2 <__mdiff+0xe2>
 800b5cc:	0800ca07 	.word	0x0800ca07
 800b5d0:	0800ca18 	.word	0x0800ca18

0800b5d4 <__d2b>:
 800b5d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5d8:	4689      	mov	r9, r1
 800b5da:	2101      	movs	r1, #1
 800b5dc:	ec57 6b10 	vmov	r6, r7, d0
 800b5e0:	4690      	mov	r8, r2
 800b5e2:	f7ff fccf 	bl	800af84 <_Balloc>
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	b930      	cbnz	r0, 800b5f8 <__d2b+0x24>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b25      	ldr	r3, [pc, #148]	; (800b684 <__d2b+0xb0>)
 800b5ee:	4826      	ldr	r0, [pc, #152]	; (800b688 <__d2b+0xb4>)
 800b5f0:	f240 310a 	movw	r1, #778	; 0x30a
 800b5f4:	f000 fada 	bl	800bbac <__assert_func>
 800b5f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b600:	bb35      	cbnz	r5, 800b650 <__d2b+0x7c>
 800b602:	2e00      	cmp	r6, #0
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	d028      	beq.n	800b65a <__d2b+0x86>
 800b608:	4668      	mov	r0, sp
 800b60a:	9600      	str	r6, [sp, #0]
 800b60c:	f7ff fd82 	bl	800b114 <__lo0bits>
 800b610:	9900      	ldr	r1, [sp, #0]
 800b612:	b300      	cbz	r0, 800b656 <__d2b+0x82>
 800b614:	9a01      	ldr	r2, [sp, #4]
 800b616:	f1c0 0320 	rsb	r3, r0, #32
 800b61a:	fa02 f303 	lsl.w	r3, r2, r3
 800b61e:	430b      	orrs	r3, r1
 800b620:	40c2      	lsrs	r2, r0
 800b622:	6163      	str	r3, [r4, #20]
 800b624:	9201      	str	r2, [sp, #4]
 800b626:	9b01      	ldr	r3, [sp, #4]
 800b628:	61a3      	str	r3, [r4, #24]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bf14      	ite	ne
 800b62e:	2202      	movne	r2, #2
 800b630:	2201      	moveq	r2, #1
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	b1d5      	cbz	r5, 800b66c <__d2b+0x98>
 800b636:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b63a:	4405      	add	r5, r0
 800b63c:	f8c9 5000 	str.w	r5, [r9]
 800b640:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b644:	f8c8 0000 	str.w	r0, [r8]
 800b648:	4620      	mov	r0, r4
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b650:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b654:	e7d5      	b.n	800b602 <__d2b+0x2e>
 800b656:	6161      	str	r1, [r4, #20]
 800b658:	e7e5      	b.n	800b626 <__d2b+0x52>
 800b65a:	a801      	add	r0, sp, #4
 800b65c:	f7ff fd5a 	bl	800b114 <__lo0bits>
 800b660:	9b01      	ldr	r3, [sp, #4]
 800b662:	6163      	str	r3, [r4, #20]
 800b664:	2201      	movs	r2, #1
 800b666:	6122      	str	r2, [r4, #16]
 800b668:	3020      	adds	r0, #32
 800b66a:	e7e3      	b.n	800b634 <__d2b+0x60>
 800b66c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b670:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b674:	f8c9 0000 	str.w	r0, [r9]
 800b678:	6918      	ldr	r0, [r3, #16]
 800b67a:	f7ff fd2b 	bl	800b0d4 <__hi0bits>
 800b67e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b682:	e7df      	b.n	800b644 <__d2b+0x70>
 800b684:	0800ca07 	.word	0x0800ca07
 800b688:	0800ca18 	.word	0x0800ca18

0800b68c <_calloc_r>:
 800b68c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b68e:	fba1 2402 	umull	r2, r4, r1, r2
 800b692:	b94c      	cbnz	r4, 800b6a8 <_calloc_r+0x1c>
 800b694:	4611      	mov	r1, r2
 800b696:	9201      	str	r2, [sp, #4]
 800b698:	f000 f87a 	bl	800b790 <_malloc_r>
 800b69c:	9a01      	ldr	r2, [sp, #4]
 800b69e:	4605      	mov	r5, r0
 800b6a0:	b930      	cbnz	r0, 800b6b0 <_calloc_r+0x24>
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	b003      	add	sp, #12
 800b6a6:	bd30      	pop	{r4, r5, pc}
 800b6a8:	220c      	movs	r2, #12
 800b6aa:	6002      	str	r2, [r0, #0]
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	e7f8      	b.n	800b6a2 <_calloc_r+0x16>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	f7fe f903 	bl	80098bc <memset>
 800b6b6:	e7f4      	b.n	800b6a2 <_calloc_r+0x16>

0800b6b8 <_free_r>:
 800b6b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ba:	2900      	cmp	r1, #0
 800b6bc:	d044      	beq.n	800b748 <_free_r+0x90>
 800b6be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6c2:	9001      	str	r0, [sp, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b6ca:	bfb8      	it	lt
 800b6cc:	18e4      	addlt	r4, r4, r3
 800b6ce:	f000 fac9 	bl	800bc64 <__malloc_lock>
 800b6d2:	4a1e      	ldr	r2, [pc, #120]	; (800b74c <_free_r+0x94>)
 800b6d4:	9801      	ldr	r0, [sp, #4]
 800b6d6:	6813      	ldr	r3, [r2, #0]
 800b6d8:	b933      	cbnz	r3, 800b6e8 <_free_r+0x30>
 800b6da:	6063      	str	r3, [r4, #4]
 800b6dc:	6014      	str	r4, [r2, #0]
 800b6de:	b003      	add	sp, #12
 800b6e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6e4:	f000 bac4 	b.w	800bc70 <__malloc_unlock>
 800b6e8:	42a3      	cmp	r3, r4
 800b6ea:	d908      	bls.n	800b6fe <_free_r+0x46>
 800b6ec:	6825      	ldr	r5, [r4, #0]
 800b6ee:	1961      	adds	r1, r4, r5
 800b6f0:	428b      	cmp	r3, r1
 800b6f2:	bf01      	itttt	eq
 800b6f4:	6819      	ldreq	r1, [r3, #0]
 800b6f6:	685b      	ldreq	r3, [r3, #4]
 800b6f8:	1949      	addeq	r1, r1, r5
 800b6fa:	6021      	streq	r1, [r4, #0]
 800b6fc:	e7ed      	b.n	800b6da <_free_r+0x22>
 800b6fe:	461a      	mov	r2, r3
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	b10b      	cbz	r3, 800b708 <_free_r+0x50>
 800b704:	42a3      	cmp	r3, r4
 800b706:	d9fa      	bls.n	800b6fe <_free_r+0x46>
 800b708:	6811      	ldr	r1, [r2, #0]
 800b70a:	1855      	adds	r5, r2, r1
 800b70c:	42a5      	cmp	r5, r4
 800b70e:	d10b      	bne.n	800b728 <_free_r+0x70>
 800b710:	6824      	ldr	r4, [r4, #0]
 800b712:	4421      	add	r1, r4
 800b714:	1854      	adds	r4, r2, r1
 800b716:	42a3      	cmp	r3, r4
 800b718:	6011      	str	r1, [r2, #0]
 800b71a:	d1e0      	bne.n	800b6de <_free_r+0x26>
 800b71c:	681c      	ldr	r4, [r3, #0]
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	6053      	str	r3, [r2, #4]
 800b722:	4421      	add	r1, r4
 800b724:	6011      	str	r1, [r2, #0]
 800b726:	e7da      	b.n	800b6de <_free_r+0x26>
 800b728:	d902      	bls.n	800b730 <_free_r+0x78>
 800b72a:	230c      	movs	r3, #12
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	e7d6      	b.n	800b6de <_free_r+0x26>
 800b730:	6825      	ldr	r5, [r4, #0]
 800b732:	1961      	adds	r1, r4, r5
 800b734:	428b      	cmp	r3, r1
 800b736:	bf04      	itt	eq
 800b738:	6819      	ldreq	r1, [r3, #0]
 800b73a:	685b      	ldreq	r3, [r3, #4]
 800b73c:	6063      	str	r3, [r4, #4]
 800b73e:	bf04      	itt	eq
 800b740:	1949      	addeq	r1, r1, r5
 800b742:	6021      	streq	r1, [r4, #0]
 800b744:	6054      	str	r4, [r2, #4]
 800b746:	e7ca      	b.n	800b6de <_free_r+0x26>
 800b748:	b003      	add	sp, #12
 800b74a:	bd30      	pop	{r4, r5, pc}
 800b74c:	20000dac 	.word	0x20000dac

0800b750 <sbrk_aligned>:
 800b750:	b570      	push	{r4, r5, r6, lr}
 800b752:	4e0e      	ldr	r6, [pc, #56]	; (800b78c <sbrk_aligned+0x3c>)
 800b754:	460c      	mov	r4, r1
 800b756:	6831      	ldr	r1, [r6, #0]
 800b758:	4605      	mov	r5, r0
 800b75a:	b911      	cbnz	r1, 800b762 <sbrk_aligned+0x12>
 800b75c:	f000 fa16 	bl	800bb8c <_sbrk_r>
 800b760:	6030      	str	r0, [r6, #0]
 800b762:	4621      	mov	r1, r4
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fa11 	bl	800bb8c <_sbrk_r>
 800b76a:	1c43      	adds	r3, r0, #1
 800b76c:	d00a      	beq.n	800b784 <sbrk_aligned+0x34>
 800b76e:	1cc4      	adds	r4, r0, #3
 800b770:	f024 0403 	bic.w	r4, r4, #3
 800b774:	42a0      	cmp	r0, r4
 800b776:	d007      	beq.n	800b788 <sbrk_aligned+0x38>
 800b778:	1a21      	subs	r1, r4, r0
 800b77a:	4628      	mov	r0, r5
 800b77c:	f000 fa06 	bl	800bb8c <_sbrk_r>
 800b780:	3001      	adds	r0, #1
 800b782:	d101      	bne.n	800b788 <sbrk_aligned+0x38>
 800b784:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b788:	4620      	mov	r0, r4
 800b78a:	bd70      	pop	{r4, r5, r6, pc}
 800b78c:	20000db0 	.word	0x20000db0

0800b790 <_malloc_r>:
 800b790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b794:	1ccd      	adds	r5, r1, #3
 800b796:	f025 0503 	bic.w	r5, r5, #3
 800b79a:	3508      	adds	r5, #8
 800b79c:	2d0c      	cmp	r5, #12
 800b79e:	bf38      	it	cc
 800b7a0:	250c      	movcc	r5, #12
 800b7a2:	2d00      	cmp	r5, #0
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	db01      	blt.n	800b7ac <_malloc_r+0x1c>
 800b7a8:	42a9      	cmp	r1, r5
 800b7aa:	d905      	bls.n	800b7b8 <_malloc_r+0x28>
 800b7ac:	230c      	movs	r3, #12
 800b7ae:	603b      	str	r3, [r7, #0]
 800b7b0:	2600      	movs	r6, #0
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7b8:	4e2e      	ldr	r6, [pc, #184]	; (800b874 <_malloc_r+0xe4>)
 800b7ba:	f000 fa53 	bl	800bc64 <__malloc_lock>
 800b7be:	6833      	ldr	r3, [r6, #0]
 800b7c0:	461c      	mov	r4, r3
 800b7c2:	bb34      	cbnz	r4, 800b812 <_malloc_r+0x82>
 800b7c4:	4629      	mov	r1, r5
 800b7c6:	4638      	mov	r0, r7
 800b7c8:	f7ff ffc2 	bl	800b750 <sbrk_aligned>
 800b7cc:	1c43      	adds	r3, r0, #1
 800b7ce:	4604      	mov	r4, r0
 800b7d0:	d14d      	bne.n	800b86e <_malloc_r+0xde>
 800b7d2:	6834      	ldr	r4, [r6, #0]
 800b7d4:	4626      	mov	r6, r4
 800b7d6:	2e00      	cmp	r6, #0
 800b7d8:	d140      	bne.n	800b85c <_malloc_r+0xcc>
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4631      	mov	r1, r6
 800b7de:	4638      	mov	r0, r7
 800b7e0:	eb04 0803 	add.w	r8, r4, r3
 800b7e4:	f000 f9d2 	bl	800bb8c <_sbrk_r>
 800b7e8:	4580      	cmp	r8, r0
 800b7ea:	d13a      	bne.n	800b862 <_malloc_r+0xd2>
 800b7ec:	6821      	ldr	r1, [r4, #0]
 800b7ee:	3503      	adds	r5, #3
 800b7f0:	1a6d      	subs	r5, r5, r1
 800b7f2:	f025 0503 	bic.w	r5, r5, #3
 800b7f6:	3508      	adds	r5, #8
 800b7f8:	2d0c      	cmp	r5, #12
 800b7fa:	bf38      	it	cc
 800b7fc:	250c      	movcc	r5, #12
 800b7fe:	4629      	mov	r1, r5
 800b800:	4638      	mov	r0, r7
 800b802:	f7ff ffa5 	bl	800b750 <sbrk_aligned>
 800b806:	3001      	adds	r0, #1
 800b808:	d02b      	beq.n	800b862 <_malloc_r+0xd2>
 800b80a:	6823      	ldr	r3, [r4, #0]
 800b80c:	442b      	add	r3, r5
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	e00e      	b.n	800b830 <_malloc_r+0xa0>
 800b812:	6822      	ldr	r2, [r4, #0]
 800b814:	1b52      	subs	r2, r2, r5
 800b816:	d41e      	bmi.n	800b856 <_malloc_r+0xc6>
 800b818:	2a0b      	cmp	r2, #11
 800b81a:	d916      	bls.n	800b84a <_malloc_r+0xba>
 800b81c:	1961      	adds	r1, r4, r5
 800b81e:	42a3      	cmp	r3, r4
 800b820:	6025      	str	r5, [r4, #0]
 800b822:	bf18      	it	ne
 800b824:	6059      	strne	r1, [r3, #4]
 800b826:	6863      	ldr	r3, [r4, #4]
 800b828:	bf08      	it	eq
 800b82a:	6031      	streq	r1, [r6, #0]
 800b82c:	5162      	str	r2, [r4, r5]
 800b82e:	604b      	str	r3, [r1, #4]
 800b830:	4638      	mov	r0, r7
 800b832:	f104 060b 	add.w	r6, r4, #11
 800b836:	f000 fa1b 	bl	800bc70 <__malloc_unlock>
 800b83a:	f026 0607 	bic.w	r6, r6, #7
 800b83e:	1d23      	adds	r3, r4, #4
 800b840:	1af2      	subs	r2, r6, r3
 800b842:	d0b6      	beq.n	800b7b2 <_malloc_r+0x22>
 800b844:	1b9b      	subs	r3, r3, r6
 800b846:	50a3      	str	r3, [r4, r2]
 800b848:	e7b3      	b.n	800b7b2 <_malloc_r+0x22>
 800b84a:	6862      	ldr	r2, [r4, #4]
 800b84c:	42a3      	cmp	r3, r4
 800b84e:	bf0c      	ite	eq
 800b850:	6032      	streq	r2, [r6, #0]
 800b852:	605a      	strne	r2, [r3, #4]
 800b854:	e7ec      	b.n	800b830 <_malloc_r+0xa0>
 800b856:	4623      	mov	r3, r4
 800b858:	6864      	ldr	r4, [r4, #4]
 800b85a:	e7b2      	b.n	800b7c2 <_malloc_r+0x32>
 800b85c:	4634      	mov	r4, r6
 800b85e:	6876      	ldr	r6, [r6, #4]
 800b860:	e7b9      	b.n	800b7d6 <_malloc_r+0x46>
 800b862:	230c      	movs	r3, #12
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4638      	mov	r0, r7
 800b868:	f000 fa02 	bl	800bc70 <__malloc_unlock>
 800b86c:	e7a1      	b.n	800b7b2 <_malloc_r+0x22>
 800b86e:	6025      	str	r5, [r4, #0]
 800b870:	e7de      	b.n	800b830 <_malloc_r+0xa0>
 800b872:	bf00      	nop
 800b874:	20000dac 	.word	0x20000dac

0800b878 <_realloc_r>:
 800b878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b87c:	4680      	mov	r8, r0
 800b87e:	4614      	mov	r4, r2
 800b880:	460e      	mov	r6, r1
 800b882:	b921      	cbnz	r1, 800b88e <_realloc_r+0x16>
 800b884:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b888:	4611      	mov	r1, r2
 800b88a:	f7ff bf81 	b.w	800b790 <_malloc_r>
 800b88e:	b92a      	cbnz	r2, 800b89c <_realloc_r+0x24>
 800b890:	f7ff ff12 	bl	800b6b8 <_free_r>
 800b894:	4625      	mov	r5, r4
 800b896:	4628      	mov	r0, r5
 800b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b89c:	f000 f9ee 	bl	800bc7c <_malloc_usable_size_r>
 800b8a0:	4284      	cmp	r4, r0
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	d802      	bhi.n	800b8ac <_realloc_r+0x34>
 800b8a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8aa:	d812      	bhi.n	800b8d2 <_realloc_r+0x5a>
 800b8ac:	4621      	mov	r1, r4
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	f7ff ff6e 	bl	800b790 <_malloc_r>
 800b8b4:	4605      	mov	r5, r0
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	d0ed      	beq.n	800b896 <_realloc_r+0x1e>
 800b8ba:	42bc      	cmp	r4, r7
 800b8bc:	4622      	mov	r2, r4
 800b8be:	4631      	mov	r1, r6
 800b8c0:	bf28      	it	cs
 800b8c2:	463a      	movcs	r2, r7
 800b8c4:	f7fd ffec 	bl	80098a0 <memcpy>
 800b8c8:	4631      	mov	r1, r6
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	f7ff fef4 	bl	800b6b8 <_free_r>
 800b8d0:	e7e1      	b.n	800b896 <_realloc_r+0x1e>
 800b8d2:	4635      	mov	r5, r6
 800b8d4:	e7df      	b.n	800b896 <_realloc_r+0x1e>

0800b8d6 <__ssputs_r>:
 800b8d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8da:	688e      	ldr	r6, [r1, #8]
 800b8dc:	429e      	cmp	r6, r3
 800b8de:	4682      	mov	sl, r0
 800b8e0:	460c      	mov	r4, r1
 800b8e2:	4690      	mov	r8, r2
 800b8e4:	461f      	mov	r7, r3
 800b8e6:	d838      	bhi.n	800b95a <__ssputs_r+0x84>
 800b8e8:	898a      	ldrh	r2, [r1, #12]
 800b8ea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b8ee:	d032      	beq.n	800b956 <__ssputs_r+0x80>
 800b8f0:	6825      	ldr	r5, [r4, #0]
 800b8f2:	6909      	ldr	r1, [r1, #16]
 800b8f4:	eba5 0901 	sub.w	r9, r5, r1
 800b8f8:	6965      	ldr	r5, [r4, #20]
 800b8fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b902:	3301      	adds	r3, #1
 800b904:	444b      	add	r3, r9
 800b906:	106d      	asrs	r5, r5, #1
 800b908:	429d      	cmp	r5, r3
 800b90a:	bf38      	it	cc
 800b90c:	461d      	movcc	r5, r3
 800b90e:	0553      	lsls	r3, r2, #21
 800b910:	d531      	bpl.n	800b976 <__ssputs_r+0xa0>
 800b912:	4629      	mov	r1, r5
 800b914:	f7ff ff3c 	bl	800b790 <_malloc_r>
 800b918:	4606      	mov	r6, r0
 800b91a:	b950      	cbnz	r0, 800b932 <__ssputs_r+0x5c>
 800b91c:	230c      	movs	r3, #12
 800b91e:	f8ca 3000 	str.w	r3, [sl]
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b932:	6921      	ldr	r1, [r4, #16]
 800b934:	464a      	mov	r2, r9
 800b936:	f7fd ffb3 	bl	80098a0 <memcpy>
 800b93a:	89a3      	ldrh	r3, [r4, #12]
 800b93c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b944:	81a3      	strh	r3, [r4, #12]
 800b946:	6126      	str	r6, [r4, #16]
 800b948:	6165      	str	r5, [r4, #20]
 800b94a:	444e      	add	r6, r9
 800b94c:	eba5 0509 	sub.w	r5, r5, r9
 800b950:	6026      	str	r6, [r4, #0]
 800b952:	60a5      	str	r5, [r4, #8]
 800b954:	463e      	mov	r6, r7
 800b956:	42be      	cmp	r6, r7
 800b958:	d900      	bls.n	800b95c <__ssputs_r+0x86>
 800b95a:	463e      	mov	r6, r7
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	4632      	mov	r2, r6
 800b960:	4641      	mov	r1, r8
 800b962:	f000 f965 	bl	800bc30 <memmove>
 800b966:	68a3      	ldr	r3, [r4, #8]
 800b968:	1b9b      	subs	r3, r3, r6
 800b96a:	60a3      	str	r3, [r4, #8]
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	4433      	add	r3, r6
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	2000      	movs	r0, #0
 800b974:	e7db      	b.n	800b92e <__ssputs_r+0x58>
 800b976:	462a      	mov	r2, r5
 800b978:	f7ff ff7e 	bl	800b878 <_realloc_r>
 800b97c:	4606      	mov	r6, r0
 800b97e:	2800      	cmp	r0, #0
 800b980:	d1e1      	bne.n	800b946 <__ssputs_r+0x70>
 800b982:	6921      	ldr	r1, [r4, #16]
 800b984:	4650      	mov	r0, sl
 800b986:	f7ff fe97 	bl	800b6b8 <_free_r>
 800b98a:	e7c7      	b.n	800b91c <__ssputs_r+0x46>

0800b98c <_svfiprintf_r>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	4698      	mov	r8, r3
 800b992:	898b      	ldrh	r3, [r1, #12]
 800b994:	061b      	lsls	r3, r3, #24
 800b996:	b09d      	sub	sp, #116	; 0x74
 800b998:	4607      	mov	r7, r0
 800b99a:	460d      	mov	r5, r1
 800b99c:	4614      	mov	r4, r2
 800b99e:	d50e      	bpl.n	800b9be <_svfiprintf_r+0x32>
 800b9a0:	690b      	ldr	r3, [r1, #16]
 800b9a2:	b963      	cbnz	r3, 800b9be <_svfiprintf_r+0x32>
 800b9a4:	2140      	movs	r1, #64	; 0x40
 800b9a6:	f7ff fef3 	bl	800b790 <_malloc_r>
 800b9aa:	6028      	str	r0, [r5, #0]
 800b9ac:	6128      	str	r0, [r5, #16]
 800b9ae:	b920      	cbnz	r0, 800b9ba <_svfiprintf_r+0x2e>
 800b9b0:	230c      	movs	r3, #12
 800b9b2:	603b      	str	r3, [r7, #0]
 800b9b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9b8:	e0d1      	b.n	800bb5e <_svfiprintf_r+0x1d2>
 800b9ba:	2340      	movs	r3, #64	; 0x40
 800b9bc:	616b      	str	r3, [r5, #20]
 800b9be:	2300      	movs	r3, #0
 800b9c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b9c2:	2320      	movs	r3, #32
 800b9c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9cc:	2330      	movs	r3, #48	; 0x30
 800b9ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb78 <_svfiprintf_r+0x1ec>
 800b9d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9d6:	f04f 0901 	mov.w	r9, #1
 800b9da:	4623      	mov	r3, r4
 800b9dc:	469a      	mov	sl, r3
 800b9de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9e2:	b10a      	cbz	r2, 800b9e8 <_svfiprintf_r+0x5c>
 800b9e4:	2a25      	cmp	r2, #37	; 0x25
 800b9e6:	d1f9      	bne.n	800b9dc <_svfiprintf_r+0x50>
 800b9e8:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ec:	d00b      	beq.n	800ba06 <_svfiprintf_r+0x7a>
 800b9ee:	465b      	mov	r3, fp
 800b9f0:	4622      	mov	r2, r4
 800b9f2:	4629      	mov	r1, r5
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f7ff ff6e 	bl	800b8d6 <__ssputs_r>
 800b9fa:	3001      	adds	r0, #1
 800b9fc:	f000 80aa 	beq.w	800bb54 <_svfiprintf_r+0x1c8>
 800ba00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba02:	445a      	add	r2, fp
 800ba04:	9209      	str	r2, [sp, #36]	; 0x24
 800ba06:	f89a 3000 	ldrb.w	r3, [sl]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 80a2 	beq.w	800bb54 <_svfiprintf_r+0x1c8>
 800ba10:	2300      	movs	r3, #0
 800ba12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba1a:	f10a 0a01 	add.w	sl, sl, #1
 800ba1e:	9304      	str	r3, [sp, #16]
 800ba20:	9307      	str	r3, [sp, #28]
 800ba22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba26:	931a      	str	r3, [sp, #104]	; 0x68
 800ba28:	4654      	mov	r4, sl
 800ba2a:	2205      	movs	r2, #5
 800ba2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba30:	4851      	ldr	r0, [pc, #324]	; (800bb78 <_svfiprintf_r+0x1ec>)
 800ba32:	f7f4 fbd5 	bl	80001e0 <memchr>
 800ba36:	9a04      	ldr	r2, [sp, #16]
 800ba38:	b9d8      	cbnz	r0, 800ba72 <_svfiprintf_r+0xe6>
 800ba3a:	06d0      	lsls	r0, r2, #27
 800ba3c:	bf44      	itt	mi
 800ba3e:	2320      	movmi	r3, #32
 800ba40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba44:	0711      	lsls	r1, r2, #28
 800ba46:	bf44      	itt	mi
 800ba48:	232b      	movmi	r3, #43	; 0x2b
 800ba4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba52:	2b2a      	cmp	r3, #42	; 0x2a
 800ba54:	d015      	beq.n	800ba82 <_svfiprintf_r+0xf6>
 800ba56:	9a07      	ldr	r2, [sp, #28]
 800ba58:	4654      	mov	r4, sl
 800ba5a:	2000      	movs	r0, #0
 800ba5c:	f04f 0c0a 	mov.w	ip, #10
 800ba60:	4621      	mov	r1, r4
 800ba62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba66:	3b30      	subs	r3, #48	; 0x30
 800ba68:	2b09      	cmp	r3, #9
 800ba6a:	d94e      	bls.n	800bb0a <_svfiprintf_r+0x17e>
 800ba6c:	b1b0      	cbz	r0, 800ba9c <_svfiprintf_r+0x110>
 800ba6e:	9207      	str	r2, [sp, #28]
 800ba70:	e014      	b.n	800ba9c <_svfiprintf_r+0x110>
 800ba72:	eba0 0308 	sub.w	r3, r0, r8
 800ba76:	fa09 f303 	lsl.w	r3, r9, r3
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	9304      	str	r3, [sp, #16]
 800ba7e:	46a2      	mov	sl, r4
 800ba80:	e7d2      	b.n	800ba28 <_svfiprintf_r+0x9c>
 800ba82:	9b03      	ldr	r3, [sp, #12]
 800ba84:	1d19      	adds	r1, r3, #4
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	9103      	str	r1, [sp, #12]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	bfbb      	ittet	lt
 800ba8e:	425b      	neglt	r3, r3
 800ba90:	f042 0202 	orrlt.w	r2, r2, #2
 800ba94:	9307      	strge	r3, [sp, #28]
 800ba96:	9307      	strlt	r3, [sp, #28]
 800ba98:	bfb8      	it	lt
 800ba9a:	9204      	strlt	r2, [sp, #16]
 800ba9c:	7823      	ldrb	r3, [r4, #0]
 800ba9e:	2b2e      	cmp	r3, #46	; 0x2e
 800baa0:	d10c      	bne.n	800babc <_svfiprintf_r+0x130>
 800baa2:	7863      	ldrb	r3, [r4, #1]
 800baa4:	2b2a      	cmp	r3, #42	; 0x2a
 800baa6:	d135      	bne.n	800bb14 <_svfiprintf_r+0x188>
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	1d1a      	adds	r2, r3, #4
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	9203      	str	r2, [sp, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	bfb8      	it	lt
 800bab4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800bab8:	3402      	adds	r4, #2
 800baba:	9305      	str	r3, [sp, #20]
 800babc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb88 <_svfiprintf_r+0x1fc>
 800bac0:	7821      	ldrb	r1, [r4, #0]
 800bac2:	2203      	movs	r2, #3
 800bac4:	4650      	mov	r0, sl
 800bac6:	f7f4 fb8b 	bl	80001e0 <memchr>
 800baca:	b140      	cbz	r0, 800bade <_svfiprintf_r+0x152>
 800bacc:	2340      	movs	r3, #64	; 0x40
 800bace:	eba0 000a 	sub.w	r0, r0, sl
 800bad2:	fa03 f000 	lsl.w	r0, r3, r0
 800bad6:	9b04      	ldr	r3, [sp, #16]
 800bad8:	4303      	orrs	r3, r0
 800bada:	3401      	adds	r4, #1
 800badc:	9304      	str	r3, [sp, #16]
 800bade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bae2:	4826      	ldr	r0, [pc, #152]	; (800bb7c <_svfiprintf_r+0x1f0>)
 800bae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bae8:	2206      	movs	r2, #6
 800baea:	f7f4 fb79 	bl	80001e0 <memchr>
 800baee:	2800      	cmp	r0, #0
 800baf0:	d038      	beq.n	800bb64 <_svfiprintf_r+0x1d8>
 800baf2:	4b23      	ldr	r3, [pc, #140]	; (800bb80 <_svfiprintf_r+0x1f4>)
 800baf4:	bb1b      	cbnz	r3, 800bb3e <_svfiprintf_r+0x1b2>
 800baf6:	9b03      	ldr	r3, [sp, #12]
 800baf8:	3307      	adds	r3, #7
 800bafa:	f023 0307 	bic.w	r3, r3, #7
 800bafe:	3308      	adds	r3, #8
 800bb00:	9303      	str	r3, [sp, #12]
 800bb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb04:	4433      	add	r3, r6
 800bb06:	9309      	str	r3, [sp, #36]	; 0x24
 800bb08:	e767      	b.n	800b9da <_svfiprintf_r+0x4e>
 800bb0a:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb0e:	460c      	mov	r4, r1
 800bb10:	2001      	movs	r0, #1
 800bb12:	e7a5      	b.n	800ba60 <_svfiprintf_r+0xd4>
 800bb14:	2300      	movs	r3, #0
 800bb16:	3401      	adds	r4, #1
 800bb18:	9305      	str	r3, [sp, #20]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	f04f 0c0a 	mov.w	ip, #10
 800bb20:	4620      	mov	r0, r4
 800bb22:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb26:	3a30      	subs	r2, #48	; 0x30
 800bb28:	2a09      	cmp	r2, #9
 800bb2a:	d903      	bls.n	800bb34 <_svfiprintf_r+0x1a8>
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d0c5      	beq.n	800babc <_svfiprintf_r+0x130>
 800bb30:	9105      	str	r1, [sp, #20]
 800bb32:	e7c3      	b.n	800babc <_svfiprintf_r+0x130>
 800bb34:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb38:	4604      	mov	r4, r0
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e7f0      	b.n	800bb20 <_svfiprintf_r+0x194>
 800bb3e:	ab03      	add	r3, sp, #12
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	462a      	mov	r2, r5
 800bb44:	4b0f      	ldr	r3, [pc, #60]	; (800bb84 <_svfiprintf_r+0x1f8>)
 800bb46:	a904      	add	r1, sp, #16
 800bb48:	4638      	mov	r0, r7
 800bb4a:	f7fd ff5f 	bl	8009a0c <_printf_float>
 800bb4e:	1c42      	adds	r2, r0, #1
 800bb50:	4606      	mov	r6, r0
 800bb52:	d1d6      	bne.n	800bb02 <_svfiprintf_r+0x176>
 800bb54:	89ab      	ldrh	r3, [r5, #12]
 800bb56:	065b      	lsls	r3, r3, #25
 800bb58:	f53f af2c 	bmi.w	800b9b4 <_svfiprintf_r+0x28>
 800bb5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb5e:	b01d      	add	sp, #116	; 0x74
 800bb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb64:	ab03      	add	r3, sp, #12
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	462a      	mov	r2, r5
 800bb6a:	4b06      	ldr	r3, [pc, #24]	; (800bb84 <_svfiprintf_r+0x1f8>)
 800bb6c:	a904      	add	r1, sp, #16
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f7fe f9f0 	bl	8009f54 <_printf_i>
 800bb74:	e7eb      	b.n	800bb4e <_svfiprintf_r+0x1c2>
 800bb76:	bf00      	nop
 800bb78:	0800cb74 	.word	0x0800cb74
 800bb7c:	0800cb7e 	.word	0x0800cb7e
 800bb80:	08009a0d 	.word	0x08009a0d
 800bb84:	0800b8d7 	.word	0x0800b8d7
 800bb88:	0800cb7a 	.word	0x0800cb7a

0800bb8c <_sbrk_r>:
 800bb8c:	b538      	push	{r3, r4, r5, lr}
 800bb8e:	4d06      	ldr	r5, [pc, #24]	; (800bba8 <_sbrk_r+0x1c>)
 800bb90:	2300      	movs	r3, #0
 800bb92:	4604      	mov	r4, r0
 800bb94:	4608      	mov	r0, r1
 800bb96:	602b      	str	r3, [r5, #0]
 800bb98:	f7f8 f94e 	bl	8003e38 <_sbrk>
 800bb9c:	1c43      	adds	r3, r0, #1
 800bb9e:	d102      	bne.n	800bba6 <_sbrk_r+0x1a>
 800bba0:	682b      	ldr	r3, [r5, #0]
 800bba2:	b103      	cbz	r3, 800bba6 <_sbrk_r+0x1a>
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	bd38      	pop	{r3, r4, r5, pc}
 800bba8:	20000db4 	.word	0x20000db4

0800bbac <__assert_func>:
 800bbac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bbae:	4614      	mov	r4, r2
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <__assert_func+0x2c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4605      	mov	r5, r0
 800bbb8:	68d8      	ldr	r0, [r3, #12]
 800bbba:	b14c      	cbz	r4, 800bbd0 <__assert_func+0x24>
 800bbbc:	4b07      	ldr	r3, [pc, #28]	; (800bbdc <__assert_func+0x30>)
 800bbbe:	9100      	str	r1, [sp, #0]
 800bbc0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbc4:	4906      	ldr	r1, [pc, #24]	; (800bbe0 <__assert_func+0x34>)
 800bbc6:	462b      	mov	r3, r5
 800bbc8:	f000 f80e 	bl	800bbe8 <fiprintf>
 800bbcc:	f7fd fe36 	bl	800983c <abort>
 800bbd0:	4b04      	ldr	r3, [pc, #16]	; (800bbe4 <__assert_func+0x38>)
 800bbd2:	461c      	mov	r4, r3
 800bbd4:	e7f3      	b.n	800bbbe <__assert_func+0x12>
 800bbd6:	bf00      	nop
 800bbd8:	20000010 	.word	0x20000010
 800bbdc:	0800cb85 	.word	0x0800cb85
 800bbe0:	0800cb92 	.word	0x0800cb92
 800bbe4:	0800cbc0 	.word	0x0800cbc0

0800bbe8 <fiprintf>:
 800bbe8:	b40e      	push	{r1, r2, r3}
 800bbea:	b503      	push	{r0, r1, lr}
 800bbec:	4601      	mov	r1, r0
 800bbee:	ab03      	add	r3, sp, #12
 800bbf0:	4805      	ldr	r0, [pc, #20]	; (800bc08 <fiprintf+0x20>)
 800bbf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbf6:	6800      	ldr	r0, [r0, #0]
 800bbf8:	9301      	str	r3, [sp, #4]
 800bbfa:	f000 f871 	bl	800bce0 <_vfiprintf_r>
 800bbfe:	b002      	add	sp, #8
 800bc00:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc04:	b003      	add	sp, #12
 800bc06:	4770      	bx	lr
 800bc08:	20000010 	.word	0x20000010

0800bc0c <__ascii_mbtowc>:
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	b901      	cbnz	r1, 800bc12 <__ascii_mbtowc+0x6>
 800bc10:	a901      	add	r1, sp, #4
 800bc12:	b142      	cbz	r2, 800bc26 <__ascii_mbtowc+0x1a>
 800bc14:	b14b      	cbz	r3, 800bc2a <__ascii_mbtowc+0x1e>
 800bc16:	7813      	ldrb	r3, [r2, #0]
 800bc18:	600b      	str	r3, [r1, #0]
 800bc1a:	7812      	ldrb	r2, [r2, #0]
 800bc1c:	1e10      	subs	r0, r2, #0
 800bc1e:	bf18      	it	ne
 800bc20:	2001      	movne	r0, #1
 800bc22:	b002      	add	sp, #8
 800bc24:	4770      	bx	lr
 800bc26:	4610      	mov	r0, r2
 800bc28:	e7fb      	b.n	800bc22 <__ascii_mbtowc+0x16>
 800bc2a:	f06f 0001 	mvn.w	r0, #1
 800bc2e:	e7f8      	b.n	800bc22 <__ascii_mbtowc+0x16>

0800bc30 <memmove>:
 800bc30:	4288      	cmp	r0, r1
 800bc32:	b510      	push	{r4, lr}
 800bc34:	eb01 0402 	add.w	r4, r1, r2
 800bc38:	d902      	bls.n	800bc40 <memmove+0x10>
 800bc3a:	4284      	cmp	r4, r0
 800bc3c:	4623      	mov	r3, r4
 800bc3e:	d807      	bhi.n	800bc50 <memmove+0x20>
 800bc40:	1e43      	subs	r3, r0, #1
 800bc42:	42a1      	cmp	r1, r4
 800bc44:	d008      	beq.n	800bc58 <memmove+0x28>
 800bc46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc4e:	e7f8      	b.n	800bc42 <memmove+0x12>
 800bc50:	4402      	add	r2, r0
 800bc52:	4601      	mov	r1, r0
 800bc54:	428a      	cmp	r2, r1
 800bc56:	d100      	bne.n	800bc5a <memmove+0x2a>
 800bc58:	bd10      	pop	{r4, pc}
 800bc5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc62:	e7f7      	b.n	800bc54 <memmove+0x24>

0800bc64 <__malloc_lock>:
 800bc64:	4801      	ldr	r0, [pc, #4]	; (800bc6c <__malloc_lock+0x8>)
 800bc66:	f000 bbf1 	b.w	800c44c <__retarget_lock_acquire_recursive>
 800bc6a:	bf00      	nop
 800bc6c:	20000db8 	.word	0x20000db8

0800bc70 <__malloc_unlock>:
 800bc70:	4801      	ldr	r0, [pc, #4]	; (800bc78 <__malloc_unlock+0x8>)
 800bc72:	f000 bbec 	b.w	800c44e <__retarget_lock_release_recursive>
 800bc76:	bf00      	nop
 800bc78:	20000db8 	.word	0x20000db8

0800bc7c <_malloc_usable_size_r>:
 800bc7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc80:	1f18      	subs	r0, r3, #4
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	bfbc      	itt	lt
 800bc86:	580b      	ldrlt	r3, [r1, r0]
 800bc88:	18c0      	addlt	r0, r0, r3
 800bc8a:	4770      	bx	lr

0800bc8c <__sfputc_r>:
 800bc8c:	6893      	ldr	r3, [r2, #8]
 800bc8e:	3b01      	subs	r3, #1
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	b410      	push	{r4}
 800bc94:	6093      	str	r3, [r2, #8]
 800bc96:	da08      	bge.n	800bcaa <__sfputc_r+0x1e>
 800bc98:	6994      	ldr	r4, [r2, #24]
 800bc9a:	42a3      	cmp	r3, r4
 800bc9c:	db01      	blt.n	800bca2 <__sfputc_r+0x16>
 800bc9e:	290a      	cmp	r1, #10
 800bca0:	d103      	bne.n	800bcaa <__sfputc_r+0x1e>
 800bca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bca6:	f000 b94b 	b.w	800bf40 <__swbuf_r>
 800bcaa:	6813      	ldr	r3, [r2, #0]
 800bcac:	1c58      	adds	r0, r3, #1
 800bcae:	6010      	str	r0, [r2, #0]
 800bcb0:	7019      	strb	r1, [r3, #0]
 800bcb2:	4608      	mov	r0, r1
 800bcb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <__sfputs_r>:
 800bcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	460f      	mov	r7, r1
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	18d5      	adds	r5, r2, r3
 800bcc4:	42ac      	cmp	r4, r5
 800bcc6:	d101      	bne.n	800bccc <__sfputs_r+0x12>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	e007      	b.n	800bcdc <__sfputs_r+0x22>
 800bccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcd0:	463a      	mov	r2, r7
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	f7ff ffda 	bl	800bc8c <__sfputc_r>
 800bcd8:	1c43      	adds	r3, r0, #1
 800bcda:	d1f3      	bne.n	800bcc4 <__sfputs_r+0xa>
 800bcdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bce0 <_vfiprintf_r>:
 800bce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bce4:	460d      	mov	r5, r1
 800bce6:	b09d      	sub	sp, #116	; 0x74
 800bce8:	4614      	mov	r4, r2
 800bcea:	4698      	mov	r8, r3
 800bcec:	4606      	mov	r6, r0
 800bcee:	b118      	cbz	r0, 800bcf8 <_vfiprintf_r+0x18>
 800bcf0:	6983      	ldr	r3, [r0, #24]
 800bcf2:	b90b      	cbnz	r3, 800bcf8 <_vfiprintf_r+0x18>
 800bcf4:	f000 fb0c 	bl	800c310 <__sinit>
 800bcf8:	4b89      	ldr	r3, [pc, #548]	; (800bf20 <_vfiprintf_r+0x240>)
 800bcfa:	429d      	cmp	r5, r3
 800bcfc:	d11b      	bne.n	800bd36 <_vfiprintf_r+0x56>
 800bcfe:	6875      	ldr	r5, [r6, #4]
 800bd00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd02:	07d9      	lsls	r1, r3, #31
 800bd04:	d405      	bmi.n	800bd12 <_vfiprintf_r+0x32>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	059a      	lsls	r2, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_vfiprintf_r+0x32>
 800bd0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd0e:	f000 fb9d 	bl	800c44c <__retarget_lock_acquire_recursive>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	071b      	lsls	r3, r3, #28
 800bd16:	d501      	bpl.n	800bd1c <_vfiprintf_r+0x3c>
 800bd18:	692b      	ldr	r3, [r5, #16]
 800bd1a:	b9eb      	cbnz	r3, 800bd58 <_vfiprintf_r+0x78>
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	4630      	mov	r0, r6
 800bd20:	f000 f96e 	bl	800c000 <__swsetup_r>
 800bd24:	b1c0      	cbz	r0, 800bd58 <_vfiprintf_r+0x78>
 800bd26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd28:	07dc      	lsls	r4, r3, #31
 800bd2a:	d50e      	bpl.n	800bd4a <_vfiprintf_r+0x6a>
 800bd2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd30:	b01d      	add	sp, #116	; 0x74
 800bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd36:	4b7b      	ldr	r3, [pc, #492]	; (800bf24 <_vfiprintf_r+0x244>)
 800bd38:	429d      	cmp	r5, r3
 800bd3a:	d101      	bne.n	800bd40 <_vfiprintf_r+0x60>
 800bd3c:	68b5      	ldr	r5, [r6, #8]
 800bd3e:	e7df      	b.n	800bd00 <_vfiprintf_r+0x20>
 800bd40:	4b79      	ldr	r3, [pc, #484]	; (800bf28 <_vfiprintf_r+0x248>)
 800bd42:	429d      	cmp	r5, r3
 800bd44:	bf08      	it	eq
 800bd46:	68f5      	ldreq	r5, [r6, #12]
 800bd48:	e7da      	b.n	800bd00 <_vfiprintf_r+0x20>
 800bd4a:	89ab      	ldrh	r3, [r5, #12]
 800bd4c:	0598      	lsls	r0, r3, #22
 800bd4e:	d4ed      	bmi.n	800bd2c <_vfiprintf_r+0x4c>
 800bd50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd52:	f000 fb7c 	bl	800c44e <__retarget_lock_release_recursive>
 800bd56:	e7e9      	b.n	800bd2c <_vfiprintf_r+0x4c>
 800bd58:	2300      	movs	r3, #0
 800bd5a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd5c:	2320      	movs	r3, #32
 800bd5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd62:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd66:	2330      	movs	r3, #48	; 0x30
 800bd68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf2c <_vfiprintf_r+0x24c>
 800bd6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd70:	f04f 0901 	mov.w	r9, #1
 800bd74:	4623      	mov	r3, r4
 800bd76:	469a      	mov	sl, r3
 800bd78:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd7c:	b10a      	cbz	r2, 800bd82 <_vfiprintf_r+0xa2>
 800bd7e:	2a25      	cmp	r2, #37	; 0x25
 800bd80:	d1f9      	bne.n	800bd76 <_vfiprintf_r+0x96>
 800bd82:	ebba 0b04 	subs.w	fp, sl, r4
 800bd86:	d00b      	beq.n	800bda0 <_vfiprintf_r+0xc0>
 800bd88:	465b      	mov	r3, fp
 800bd8a:	4622      	mov	r2, r4
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4630      	mov	r0, r6
 800bd90:	f7ff ff93 	bl	800bcba <__sfputs_r>
 800bd94:	3001      	adds	r0, #1
 800bd96:	f000 80aa 	beq.w	800beee <_vfiprintf_r+0x20e>
 800bd9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd9c:	445a      	add	r2, fp
 800bd9e:	9209      	str	r2, [sp, #36]	; 0x24
 800bda0:	f89a 3000 	ldrb.w	r3, [sl]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f000 80a2 	beq.w	800beee <_vfiprintf_r+0x20e>
 800bdaa:	2300      	movs	r3, #0
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bdb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdb4:	f10a 0a01 	add.w	sl, sl, #1
 800bdb8:	9304      	str	r3, [sp, #16]
 800bdba:	9307      	str	r3, [sp, #28]
 800bdbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdc0:	931a      	str	r3, [sp, #104]	; 0x68
 800bdc2:	4654      	mov	r4, sl
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdca:	4858      	ldr	r0, [pc, #352]	; (800bf2c <_vfiprintf_r+0x24c>)
 800bdcc:	f7f4 fa08 	bl	80001e0 <memchr>
 800bdd0:	9a04      	ldr	r2, [sp, #16]
 800bdd2:	b9d8      	cbnz	r0, 800be0c <_vfiprintf_r+0x12c>
 800bdd4:	06d1      	lsls	r1, r2, #27
 800bdd6:	bf44      	itt	mi
 800bdd8:	2320      	movmi	r3, #32
 800bdda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdde:	0713      	lsls	r3, r2, #28
 800bde0:	bf44      	itt	mi
 800bde2:	232b      	movmi	r3, #43	; 0x2b
 800bde4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bde8:	f89a 3000 	ldrb.w	r3, [sl]
 800bdec:	2b2a      	cmp	r3, #42	; 0x2a
 800bdee:	d015      	beq.n	800be1c <_vfiprintf_r+0x13c>
 800bdf0:	9a07      	ldr	r2, [sp, #28]
 800bdf2:	4654      	mov	r4, sl
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	f04f 0c0a 	mov.w	ip, #10
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be00:	3b30      	subs	r3, #48	; 0x30
 800be02:	2b09      	cmp	r3, #9
 800be04:	d94e      	bls.n	800bea4 <_vfiprintf_r+0x1c4>
 800be06:	b1b0      	cbz	r0, 800be36 <_vfiprintf_r+0x156>
 800be08:	9207      	str	r2, [sp, #28]
 800be0a:	e014      	b.n	800be36 <_vfiprintf_r+0x156>
 800be0c:	eba0 0308 	sub.w	r3, r0, r8
 800be10:	fa09 f303 	lsl.w	r3, r9, r3
 800be14:	4313      	orrs	r3, r2
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	46a2      	mov	sl, r4
 800be1a:	e7d2      	b.n	800bdc2 <_vfiprintf_r+0xe2>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1d19      	adds	r1, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9103      	str	r1, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfbb      	ittet	lt
 800be28:	425b      	neglt	r3, r3
 800be2a:	f042 0202 	orrlt.w	r2, r2, #2
 800be2e:	9307      	strge	r3, [sp, #28]
 800be30:	9307      	strlt	r3, [sp, #28]
 800be32:	bfb8      	it	lt
 800be34:	9204      	strlt	r2, [sp, #16]
 800be36:	7823      	ldrb	r3, [r4, #0]
 800be38:	2b2e      	cmp	r3, #46	; 0x2e
 800be3a:	d10c      	bne.n	800be56 <_vfiprintf_r+0x176>
 800be3c:	7863      	ldrb	r3, [r4, #1]
 800be3e:	2b2a      	cmp	r3, #42	; 0x2a
 800be40:	d135      	bne.n	800beae <_vfiprintf_r+0x1ce>
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	1d1a      	adds	r2, r3, #4
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	9203      	str	r2, [sp, #12]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	bfb8      	it	lt
 800be4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800be52:	3402      	adds	r4, #2
 800be54:	9305      	str	r3, [sp, #20]
 800be56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf3c <_vfiprintf_r+0x25c>
 800be5a:	7821      	ldrb	r1, [r4, #0]
 800be5c:	2203      	movs	r2, #3
 800be5e:	4650      	mov	r0, sl
 800be60:	f7f4 f9be 	bl	80001e0 <memchr>
 800be64:	b140      	cbz	r0, 800be78 <_vfiprintf_r+0x198>
 800be66:	2340      	movs	r3, #64	; 0x40
 800be68:	eba0 000a 	sub.w	r0, r0, sl
 800be6c:	fa03 f000 	lsl.w	r0, r3, r0
 800be70:	9b04      	ldr	r3, [sp, #16]
 800be72:	4303      	orrs	r3, r0
 800be74:	3401      	adds	r4, #1
 800be76:	9304      	str	r3, [sp, #16]
 800be78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be7c:	482c      	ldr	r0, [pc, #176]	; (800bf30 <_vfiprintf_r+0x250>)
 800be7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be82:	2206      	movs	r2, #6
 800be84:	f7f4 f9ac 	bl	80001e0 <memchr>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d03f      	beq.n	800bf0c <_vfiprintf_r+0x22c>
 800be8c:	4b29      	ldr	r3, [pc, #164]	; (800bf34 <_vfiprintf_r+0x254>)
 800be8e:	bb1b      	cbnz	r3, 800bed8 <_vfiprintf_r+0x1f8>
 800be90:	9b03      	ldr	r3, [sp, #12]
 800be92:	3307      	adds	r3, #7
 800be94:	f023 0307 	bic.w	r3, r3, #7
 800be98:	3308      	adds	r3, #8
 800be9a:	9303      	str	r3, [sp, #12]
 800be9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be9e:	443b      	add	r3, r7
 800bea0:	9309      	str	r3, [sp, #36]	; 0x24
 800bea2:	e767      	b.n	800bd74 <_vfiprintf_r+0x94>
 800bea4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bea8:	460c      	mov	r4, r1
 800beaa:	2001      	movs	r0, #1
 800beac:	e7a5      	b.n	800bdfa <_vfiprintf_r+0x11a>
 800beae:	2300      	movs	r3, #0
 800beb0:	3401      	adds	r4, #1
 800beb2:	9305      	str	r3, [sp, #20]
 800beb4:	4619      	mov	r1, r3
 800beb6:	f04f 0c0a 	mov.w	ip, #10
 800beba:	4620      	mov	r0, r4
 800bebc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bec0:	3a30      	subs	r2, #48	; 0x30
 800bec2:	2a09      	cmp	r2, #9
 800bec4:	d903      	bls.n	800bece <_vfiprintf_r+0x1ee>
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d0c5      	beq.n	800be56 <_vfiprintf_r+0x176>
 800beca:	9105      	str	r1, [sp, #20]
 800becc:	e7c3      	b.n	800be56 <_vfiprintf_r+0x176>
 800bece:	fb0c 2101 	mla	r1, ip, r1, r2
 800bed2:	4604      	mov	r4, r0
 800bed4:	2301      	movs	r3, #1
 800bed6:	e7f0      	b.n	800beba <_vfiprintf_r+0x1da>
 800bed8:	ab03      	add	r3, sp, #12
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	462a      	mov	r2, r5
 800bede:	4b16      	ldr	r3, [pc, #88]	; (800bf38 <_vfiprintf_r+0x258>)
 800bee0:	a904      	add	r1, sp, #16
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7fd fd92 	bl	8009a0c <_printf_float>
 800bee8:	4607      	mov	r7, r0
 800beea:	1c78      	adds	r0, r7, #1
 800beec:	d1d6      	bne.n	800be9c <_vfiprintf_r+0x1bc>
 800beee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bef0:	07d9      	lsls	r1, r3, #31
 800bef2:	d405      	bmi.n	800bf00 <_vfiprintf_r+0x220>
 800bef4:	89ab      	ldrh	r3, [r5, #12]
 800bef6:	059a      	lsls	r2, r3, #22
 800bef8:	d402      	bmi.n	800bf00 <_vfiprintf_r+0x220>
 800befa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800befc:	f000 faa7 	bl	800c44e <__retarget_lock_release_recursive>
 800bf00:	89ab      	ldrh	r3, [r5, #12]
 800bf02:	065b      	lsls	r3, r3, #25
 800bf04:	f53f af12 	bmi.w	800bd2c <_vfiprintf_r+0x4c>
 800bf08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf0a:	e711      	b.n	800bd30 <_vfiprintf_r+0x50>
 800bf0c:	ab03      	add	r3, sp, #12
 800bf0e:	9300      	str	r3, [sp, #0]
 800bf10:	462a      	mov	r2, r5
 800bf12:	4b09      	ldr	r3, [pc, #36]	; (800bf38 <_vfiprintf_r+0x258>)
 800bf14:	a904      	add	r1, sp, #16
 800bf16:	4630      	mov	r0, r6
 800bf18:	f7fe f81c 	bl	8009f54 <_printf_i>
 800bf1c:	e7e4      	b.n	800bee8 <_vfiprintf_r+0x208>
 800bf1e:	bf00      	nop
 800bf20:	0800ccec 	.word	0x0800ccec
 800bf24:	0800cd0c 	.word	0x0800cd0c
 800bf28:	0800cccc 	.word	0x0800cccc
 800bf2c:	0800cb74 	.word	0x0800cb74
 800bf30:	0800cb7e 	.word	0x0800cb7e
 800bf34:	08009a0d 	.word	0x08009a0d
 800bf38:	0800bcbb 	.word	0x0800bcbb
 800bf3c:	0800cb7a 	.word	0x0800cb7a

0800bf40 <__swbuf_r>:
 800bf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf42:	460e      	mov	r6, r1
 800bf44:	4614      	mov	r4, r2
 800bf46:	4605      	mov	r5, r0
 800bf48:	b118      	cbz	r0, 800bf52 <__swbuf_r+0x12>
 800bf4a:	6983      	ldr	r3, [r0, #24]
 800bf4c:	b90b      	cbnz	r3, 800bf52 <__swbuf_r+0x12>
 800bf4e:	f000 f9df 	bl	800c310 <__sinit>
 800bf52:	4b21      	ldr	r3, [pc, #132]	; (800bfd8 <__swbuf_r+0x98>)
 800bf54:	429c      	cmp	r4, r3
 800bf56:	d12b      	bne.n	800bfb0 <__swbuf_r+0x70>
 800bf58:	686c      	ldr	r4, [r5, #4]
 800bf5a:	69a3      	ldr	r3, [r4, #24]
 800bf5c:	60a3      	str	r3, [r4, #8]
 800bf5e:	89a3      	ldrh	r3, [r4, #12]
 800bf60:	071a      	lsls	r2, r3, #28
 800bf62:	d52f      	bpl.n	800bfc4 <__swbuf_r+0x84>
 800bf64:	6923      	ldr	r3, [r4, #16]
 800bf66:	b36b      	cbz	r3, 800bfc4 <__swbuf_r+0x84>
 800bf68:	6923      	ldr	r3, [r4, #16]
 800bf6a:	6820      	ldr	r0, [r4, #0]
 800bf6c:	1ac0      	subs	r0, r0, r3
 800bf6e:	6963      	ldr	r3, [r4, #20]
 800bf70:	b2f6      	uxtb	r6, r6
 800bf72:	4283      	cmp	r3, r0
 800bf74:	4637      	mov	r7, r6
 800bf76:	dc04      	bgt.n	800bf82 <__swbuf_r+0x42>
 800bf78:	4621      	mov	r1, r4
 800bf7a:	4628      	mov	r0, r5
 800bf7c:	f000 f934 	bl	800c1e8 <_fflush_r>
 800bf80:	bb30      	cbnz	r0, 800bfd0 <__swbuf_r+0x90>
 800bf82:	68a3      	ldr	r3, [r4, #8]
 800bf84:	3b01      	subs	r3, #1
 800bf86:	60a3      	str	r3, [r4, #8]
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	6022      	str	r2, [r4, #0]
 800bf8e:	701e      	strb	r6, [r3, #0]
 800bf90:	6963      	ldr	r3, [r4, #20]
 800bf92:	3001      	adds	r0, #1
 800bf94:	4283      	cmp	r3, r0
 800bf96:	d004      	beq.n	800bfa2 <__swbuf_r+0x62>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	07db      	lsls	r3, r3, #31
 800bf9c:	d506      	bpl.n	800bfac <__swbuf_r+0x6c>
 800bf9e:	2e0a      	cmp	r6, #10
 800bfa0:	d104      	bne.n	800bfac <__swbuf_r+0x6c>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f000 f91f 	bl	800c1e8 <_fflush_r>
 800bfaa:	b988      	cbnz	r0, 800bfd0 <__swbuf_r+0x90>
 800bfac:	4638      	mov	r0, r7
 800bfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <__swbuf_r+0x9c>)
 800bfb2:	429c      	cmp	r4, r3
 800bfb4:	d101      	bne.n	800bfba <__swbuf_r+0x7a>
 800bfb6:	68ac      	ldr	r4, [r5, #8]
 800bfb8:	e7cf      	b.n	800bf5a <__swbuf_r+0x1a>
 800bfba:	4b09      	ldr	r3, [pc, #36]	; (800bfe0 <__swbuf_r+0xa0>)
 800bfbc:	429c      	cmp	r4, r3
 800bfbe:	bf08      	it	eq
 800bfc0:	68ec      	ldreq	r4, [r5, #12]
 800bfc2:	e7ca      	b.n	800bf5a <__swbuf_r+0x1a>
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	4628      	mov	r0, r5
 800bfc8:	f000 f81a 	bl	800c000 <__swsetup_r>
 800bfcc:	2800      	cmp	r0, #0
 800bfce:	d0cb      	beq.n	800bf68 <__swbuf_r+0x28>
 800bfd0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800bfd4:	e7ea      	b.n	800bfac <__swbuf_r+0x6c>
 800bfd6:	bf00      	nop
 800bfd8:	0800ccec 	.word	0x0800ccec
 800bfdc:	0800cd0c 	.word	0x0800cd0c
 800bfe0:	0800cccc 	.word	0x0800cccc

0800bfe4 <__ascii_wctomb>:
 800bfe4:	b149      	cbz	r1, 800bffa <__ascii_wctomb+0x16>
 800bfe6:	2aff      	cmp	r2, #255	; 0xff
 800bfe8:	bf85      	ittet	hi
 800bfea:	238a      	movhi	r3, #138	; 0x8a
 800bfec:	6003      	strhi	r3, [r0, #0]
 800bfee:	700a      	strbls	r2, [r1, #0]
 800bff0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800bff4:	bf98      	it	ls
 800bff6:	2001      	movls	r0, #1
 800bff8:	4770      	bx	lr
 800bffa:	4608      	mov	r0, r1
 800bffc:	4770      	bx	lr
	...

0800c000 <__swsetup_r>:
 800c000:	4b32      	ldr	r3, [pc, #200]	; (800c0cc <__swsetup_r+0xcc>)
 800c002:	b570      	push	{r4, r5, r6, lr}
 800c004:	681d      	ldr	r5, [r3, #0]
 800c006:	4606      	mov	r6, r0
 800c008:	460c      	mov	r4, r1
 800c00a:	b125      	cbz	r5, 800c016 <__swsetup_r+0x16>
 800c00c:	69ab      	ldr	r3, [r5, #24]
 800c00e:	b913      	cbnz	r3, 800c016 <__swsetup_r+0x16>
 800c010:	4628      	mov	r0, r5
 800c012:	f000 f97d 	bl	800c310 <__sinit>
 800c016:	4b2e      	ldr	r3, [pc, #184]	; (800c0d0 <__swsetup_r+0xd0>)
 800c018:	429c      	cmp	r4, r3
 800c01a:	d10f      	bne.n	800c03c <__swsetup_r+0x3c>
 800c01c:	686c      	ldr	r4, [r5, #4]
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c024:	0719      	lsls	r1, r3, #28
 800c026:	d42c      	bmi.n	800c082 <__swsetup_r+0x82>
 800c028:	06dd      	lsls	r5, r3, #27
 800c02a:	d411      	bmi.n	800c050 <__swsetup_r+0x50>
 800c02c:	2309      	movs	r3, #9
 800c02e:	6033      	str	r3, [r6, #0]
 800c030:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c034:	81a3      	strh	r3, [r4, #12]
 800c036:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c03a:	e03e      	b.n	800c0ba <__swsetup_r+0xba>
 800c03c:	4b25      	ldr	r3, [pc, #148]	; (800c0d4 <__swsetup_r+0xd4>)
 800c03e:	429c      	cmp	r4, r3
 800c040:	d101      	bne.n	800c046 <__swsetup_r+0x46>
 800c042:	68ac      	ldr	r4, [r5, #8]
 800c044:	e7eb      	b.n	800c01e <__swsetup_r+0x1e>
 800c046:	4b24      	ldr	r3, [pc, #144]	; (800c0d8 <__swsetup_r+0xd8>)
 800c048:	429c      	cmp	r4, r3
 800c04a:	bf08      	it	eq
 800c04c:	68ec      	ldreq	r4, [r5, #12]
 800c04e:	e7e6      	b.n	800c01e <__swsetup_r+0x1e>
 800c050:	0758      	lsls	r0, r3, #29
 800c052:	d512      	bpl.n	800c07a <__swsetup_r+0x7a>
 800c054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c056:	b141      	cbz	r1, 800c06a <__swsetup_r+0x6a>
 800c058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c05c:	4299      	cmp	r1, r3
 800c05e:	d002      	beq.n	800c066 <__swsetup_r+0x66>
 800c060:	4630      	mov	r0, r6
 800c062:	f7ff fb29 	bl	800b6b8 <_free_r>
 800c066:	2300      	movs	r3, #0
 800c068:	6363      	str	r3, [r4, #52]	; 0x34
 800c06a:	89a3      	ldrh	r3, [r4, #12]
 800c06c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c070:	81a3      	strh	r3, [r4, #12]
 800c072:	2300      	movs	r3, #0
 800c074:	6063      	str	r3, [r4, #4]
 800c076:	6923      	ldr	r3, [r4, #16]
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	89a3      	ldrh	r3, [r4, #12]
 800c07c:	f043 0308 	orr.w	r3, r3, #8
 800c080:	81a3      	strh	r3, [r4, #12]
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	b94b      	cbnz	r3, 800c09a <__swsetup_r+0x9a>
 800c086:	89a3      	ldrh	r3, [r4, #12]
 800c088:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c08c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c090:	d003      	beq.n	800c09a <__swsetup_r+0x9a>
 800c092:	4621      	mov	r1, r4
 800c094:	4630      	mov	r0, r6
 800c096:	f000 fa01 	bl	800c49c <__smakebuf_r>
 800c09a:	89a0      	ldrh	r0, [r4, #12]
 800c09c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0a0:	f010 0301 	ands.w	r3, r0, #1
 800c0a4:	d00a      	beq.n	800c0bc <__swsetup_r+0xbc>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	60a3      	str	r3, [r4, #8]
 800c0aa:	6963      	ldr	r3, [r4, #20]
 800c0ac:	425b      	negs	r3, r3
 800c0ae:	61a3      	str	r3, [r4, #24]
 800c0b0:	6923      	ldr	r3, [r4, #16]
 800c0b2:	b943      	cbnz	r3, 800c0c6 <__swsetup_r+0xc6>
 800c0b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0b8:	d1ba      	bne.n	800c030 <__swsetup_r+0x30>
 800c0ba:	bd70      	pop	{r4, r5, r6, pc}
 800c0bc:	0781      	lsls	r1, r0, #30
 800c0be:	bf58      	it	pl
 800c0c0:	6963      	ldrpl	r3, [r4, #20]
 800c0c2:	60a3      	str	r3, [r4, #8]
 800c0c4:	e7f4      	b.n	800c0b0 <__swsetup_r+0xb0>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e7f7      	b.n	800c0ba <__swsetup_r+0xba>
 800c0ca:	bf00      	nop
 800c0cc:	20000010 	.word	0x20000010
 800c0d0:	0800ccec 	.word	0x0800ccec
 800c0d4:	0800cd0c 	.word	0x0800cd0c
 800c0d8:	0800cccc 	.word	0x0800cccc

0800c0dc <__sflush_r>:
 800c0dc:	898a      	ldrh	r2, [r1, #12]
 800c0de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0e2:	4605      	mov	r5, r0
 800c0e4:	0710      	lsls	r0, r2, #28
 800c0e6:	460c      	mov	r4, r1
 800c0e8:	d458      	bmi.n	800c19c <__sflush_r+0xc0>
 800c0ea:	684b      	ldr	r3, [r1, #4]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dc05      	bgt.n	800c0fc <__sflush_r+0x20>
 800c0f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	dc02      	bgt.n	800c0fc <__sflush_r+0x20>
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0fe:	2e00      	cmp	r6, #0
 800c100:	d0f9      	beq.n	800c0f6 <__sflush_r+0x1a>
 800c102:	2300      	movs	r3, #0
 800c104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c108:	682f      	ldr	r7, [r5, #0]
 800c10a:	602b      	str	r3, [r5, #0]
 800c10c:	d032      	beq.n	800c174 <__sflush_r+0x98>
 800c10e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c110:	89a3      	ldrh	r3, [r4, #12]
 800c112:	075a      	lsls	r2, r3, #29
 800c114:	d505      	bpl.n	800c122 <__sflush_r+0x46>
 800c116:	6863      	ldr	r3, [r4, #4]
 800c118:	1ac0      	subs	r0, r0, r3
 800c11a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c11c:	b10b      	cbz	r3, 800c122 <__sflush_r+0x46>
 800c11e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c120:	1ac0      	subs	r0, r0, r3
 800c122:	2300      	movs	r3, #0
 800c124:	4602      	mov	r2, r0
 800c126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c128:	6a21      	ldr	r1, [r4, #32]
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b0      	blx	r6
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	89a3      	ldrh	r3, [r4, #12]
 800c132:	d106      	bne.n	800c142 <__sflush_r+0x66>
 800c134:	6829      	ldr	r1, [r5, #0]
 800c136:	291d      	cmp	r1, #29
 800c138:	d82c      	bhi.n	800c194 <__sflush_r+0xb8>
 800c13a:	4a2a      	ldr	r2, [pc, #168]	; (800c1e4 <__sflush_r+0x108>)
 800c13c:	40ca      	lsrs	r2, r1
 800c13e:	07d6      	lsls	r6, r2, #31
 800c140:	d528      	bpl.n	800c194 <__sflush_r+0xb8>
 800c142:	2200      	movs	r2, #0
 800c144:	6062      	str	r2, [r4, #4]
 800c146:	04d9      	lsls	r1, r3, #19
 800c148:	6922      	ldr	r2, [r4, #16]
 800c14a:	6022      	str	r2, [r4, #0]
 800c14c:	d504      	bpl.n	800c158 <__sflush_r+0x7c>
 800c14e:	1c42      	adds	r2, r0, #1
 800c150:	d101      	bne.n	800c156 <__sflush_r+0x7a>
 800c152:	682b      	ldr	r3, [r5, #0]
 800c154:	b903      	cbnz	r3, 800c158 <__sflush_r+0x7c>
 800c156:	6560      	str	r0, [r4, #84]	; 0x54
 800c158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c15a:	602f      	str	r7, [r5, #0]
 800c15c:	2900      	cmp	r1, #0
 800c15e:	d0ca      	beq.n	800c0f6 <__sflush_r+0x1a>
 800c160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c164:	4299      	cmp	r1, r3
 800c166:	d002      	beq.n	800c16e <__sflush_r+0x92>
 800c168:	4628      	mov	r0, r5
 800c16a:	f7ff faa5 	bl	800b6b8 <_free_r>
 800c16e:	2000      	movs	r0, #0
 800c170:	6360      	str	r0, [r4, #52]	; 0x34
 800c172:	e7c1      	b.n	800c0f8 <__sflush_r+0x1c>
 800c174:	6a21      	ldr	r1, [r4, #32]
 800c176:	2301      	movs	r3, #1
 800c178:	4628      	mov	r0, r5
 800c17a:	47b0      	blx	r6
 800c17c:	1c41      	adds	r1, r0, #1
 800c17e:	d1c7      	bne.n	800c110 <__sflush_r+0x34>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d0c4      	beq.n	800c110 <__sflush_r+0x34>
 800c186:	2b1d      	cmp	r3, #29
 800c188:	d001      	beq.n	800c18e <__sflush_r+0xb2>
 800c18a:	2b16      	cmp	r3, #22
 800c18c:	d101      	bne.n	800c192 <__sflush_r+0xb6>
 800c18e:	602f      	str	r7, [r5, #0]
 800c190:	e7b1      	b.n	800c0f6 <__sflush_r+0x1a>
 800c192:	89a3      	ldrh	r3, [r4, #12]
 800c194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c198:	81a3      	strh	r3, [r4, #12]
 800c19a:	e7ad      	b.n	800c0f8 <__sflush_r+0x1c>
 800c19c:	690f      	ldr	r7, [r1, #16]
 800c19e:	2f00      	cmp	r7, #0
 800c1a0:	d0a9      	beq.n	800c0f6 <__sflush_r+0x1a>
 800c1a2:	0793      	lsls	r3, r2, #30
 800c1a4:	680e      	ldr	r6, [r1, #0]
 800c1a6:	bf08      	it	eq
 800c1a8:	694b      	ldreq	r3, [r1, #20]
 800c1aa:	600f      	str	r7, [r1, #0]
 800c1ac:	bf18      	it	ne
 800c1ae:	2300      	movne	r3, #0
 800c1b0:	eba6 0807 	sub.w	r8, r6, r7
 800c1b4:	608b      	str	r3, [r1, #8]
 800c1b6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ba:	dd9c      	ble.n	800c0f6 <__sflush_r+0x1a>
 800c1bc:	6a21      	ldr	r1, [r4, #32]
 800c1be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1c0:	4643      	mov	r3, r8
 800c1c2:	463a      	mov	r2, r7
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	47b0      	blx	r6
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	dc06      	bgt.n	800c1da <__sflush_r+0xfe>
 800c1cc:	89a3      	ldrh	r3, [r4, #12]
 800c1ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1d2:	81a3      	strh	r3, [r4, #12]
 800c1d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1d8:	e78e      	b.n	800c0f8 <__sflush_r+0x1c>
 800c1da:	4407      	add	r7, r0
 800c1dc:	eba8 0800 	sub.w	r8, r8, r0
 800c1e0:	e7e9      	b.n	800c1b6 <__sflush_r+0xda>
 800c1e2:	bf00      	nop
 800c1e4:	20400001 	.word	0x20400001

0800c1e8 <_fflush_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	690b      	ldr	r3, [r1, #16]
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	460c      	mov	r4, r1
 800c1f0:	b913      	cbnz	r3, 800c1f8 <_fflush_r+0x10>
 800c1f2:	2500      	movs	r5, #0
 800c1f4:	4628      	mov	r0, r5
 800c1f6:	bd38      	pop	{r3, r4, r5, pc}
 800c1f8:	b118      	cbz	r0, 800c202 <_fflush_r+0x1a>
 800c1fa:	6983      	ldr	r3, [r0, #24]
 800c1fc:	b90b      	cbnz	r3, 800c202 <_fflush_r+0x1a>
 800c1fe:	f000 f887 	bl	800c310 <__sinit>
 800c202:	4b14      	ldr	r3, [pc, #80]	; (800c254 <_fflush_r+0x6c>)
 800c204:	429c      	cmp	r4, r3
 800c206:	d11b      	bne.n	800c240 <_fflush_r+0x58>
 800c208:	686c      	ldr	r4, [r5, #4]
 800c20a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d0ef      	beq.n	800c1f2 <_fflush_r+0xa>
 800c212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c214:	07d0      	lsls	r0, r2, #31
 800c216:	d404      	bmi.n	800c222 <_fflush_r+0x3a>
 800c218:	0599      	lsls	r1, r3, #22
 800c21a:	d402      	bmi.n	800c222 <_fflush_r+0x3a>
 800c21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c21e:	f000 f915 	bl	800c44c <__retarget_lock_acquire_recursive>
 800c222:	4628      	mov	r0, r5
 800c224:	4621      	mov	r1, r4
 800c226:	f7ff ff59 	bl	800c0dc <__sflush_r>
 800c22a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c22c:	07da      	lsls	r2, r3, #31
 800c22e:	4605      	mov	r5, r0
 800c230:	d4e0      	bmi.n	800c1f4 <_fflush_r+0xc>
 800c232:	89a3      	ldrh	r3, [r4, #12]
 800c234:	059b      	lsls	r3, r3, #22
 800c236:	d4dd      	bmi.n	800c1f4 <_fflush_r+0xc>
 800c238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c23a:	f000 f908 	bl	800c44e <__retarget_lock_release_recursive>
 800c23e:	e7d9      	b.n	800c1f4 <_fflush_r+0xc>
 800c240:	4b05      	ldr	r3, [pc, #20]	; (800c258 <_fflush_r+0x70>)
 800c242:	429c      	cmp	r4, r3
 800c244:	d101      	bne.n	800c24a <_fflush_r+0x62>
 800c246:	68ac      	ldr	r4, [r5, #8]
 800c248:	e7df      	b.n	800c20a <_fflush_r+0x22>
 800c24a:	4b04      	ldr	r3, [pc, #16]	; (800c25c <_fflush_r+0x74>)
 800c24c:	429c      	cmp	r4, r3
 800c24e:	bf08      	it	eq
 800c250:	68ec      	ldreq	r4, [r5, #12]
 800c252:	e7da      	b.n	800c20a <_fflush_r+0x22>
 800c254:	0800ccec 	.word	0x0800ccec
 800c258:	0800cd0c 	.word	0x0800cd0c
 800c25c:	0800cccc 	.word	0x0800cccc

0800c260 <std>:
 800c260:	2300      	movs	r3, #0
 800c262:	b510      	push	{r4, lr}
 800c264:	4604      	mov	r4, r0
 800c266:	e9c0 3300 	strd	r3, r3, [r0]
 800c26a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c26e:	6083      	str	r3, [r0, #8]
 800c270:	8181      	strh	r1, [r0, #12]
 800c272:	6643      	str	r3, [r0, #100]	; 0x64
 800c274:	81c2      	strh	r2, [r0, #14]
 800c276:	6183      	str	r3, [r0, #24]
 800c278:	4619      	mov	r1, r3
 800c27a:	2208      	movs	r2, #8
 800c27c:	305c      	adds	r0, #92	; 0x5c
 800c27e:	f7fd fb1d 	bl	80098bc <memset>
 800c282:	4b05      	ldr	r3, [pc, #20]	; (800c298 <std+0x38>)
 800c284:	6263      	str	r3, [r4, #36]	; 0x24
 800c286:	4b05      	ldr	r3, [pc, #20]	; (800c29c <std+0x3c>)
 800c288:	62a3      	str	r3, [r4, #40]	; 0x28
 800c28a:	4b05      	ldr	r3, [pc, #20]	; (800c2a0 <std+0x40>)
 800c28c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c28e:	4b05      	ldr	r3, [pc, #20]	; (800c2a4 <std+0x44>)
 800c290:	6224      	str	r4, [r4, #32]
 800c292:	6323      	str	r3, [r4, #48]	; 0x30
 800c294:	bd10      	pop	{r4, pc}
 800c296:	bf00      	nop
 800c298:	0800c51d 	.word	0x0800c51d
 800c29c:	0800c53f 	.word	0x0800c53f
 800c2a0:	0800c577 	.word	0x0800c577
 800c2a4:	0800c59b 	.word	0x0800c59b

0800c2a8 <_cleanup_r>:
 800c2a8:	4901      	ldr	r1, [pc, #4]	; (800c2b0 <_cleanup_r+0x8>)
 800c2aa:	f000 b8af 	b.w	800c40c <_fwalk_reent>
 800c2ae:	bf00      	nop
 800c2b0:	0800c1e9 	.word	0x0800c1e9

0800c2b4 <__sfmoreglue>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	2268      	movs	r2, #104	; 0x68
 800c2b8:	1e4d      	subs	r5, r1, #1
 800c2ba:	4355      	muls	r5, r2
 800c2bc:	460e      	mov	r6, r1
 800c2be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2c2:	f7ff fa65 	bl	800b790 <_malloc_r>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	b140      	cbz	r0, 800c2dc <__sfmoreglue+0x28>
 800c2ca:	2100      	movs	r1, #0
 800c2cc:	e9c0 1600 	strd	r1, r6, [r0]
 800c2d0:	300c      	adds	r0, #12
 800c2d2:	60a0      	str	r0, [r4, #8]
 800c2d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2d8:	f7fd faf0 	bl	80098bc <memset>
 800c2dc:	4620      	mov	r0, r4
 800c2de:	bd70      	pop	{r4, r5, r6, pc}

0800c2e0 <__sfp_lock_acquire>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__sfp_lock_acquire+0x8>)
 800c2e2:	f000 b8b3 	b.w	800c44c <__retarget_lock_acquire_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	20000db9 	.word	0x20000db9

0800c2ec <__sfp_lock_release>:
 800c2ec:	4801      	ldr	r0, [pc, #4]	; (800c2f4 <__sfp_lock_release+0x8>)
 800c2ee:	f000 b8ae 	b.w	800c44e <__retarget_lock_release_recursive>
 800c2f2:	bf00      	nop
 800c2f4:	20000db9 	.word	0x20000db9

0800c2f8 <__sinit_lock_acquire>:
 800c2f8:	4801      	ldr	r0, [pc, #4]	; (800c300 <__sinit_lock_acquire+0x8>)
 800c2fa:	f000 b8a7 	b.w	800c44c <__retarget_lock_acquire_recursive>
 800c2fe:	bf00      	nop
 800c300:	20000dba 	.word	0x20000dba

0800c304 <__sinit_lock_release>:
 800c304:	4801      	ldr	r0, [pc, #4]	; (800c30c <__sinit_lock_release+0x8>)
 800c306:	f000 b8a2 	b.w	800c44e <__retarget_lock_release_recursive>
 800c30a:	bf00      	nop
 800c30c:	20000dba 	.word	0x20000dba

0800c310 <__sinit>:
 800c310:	b510      	push	{r4, lr}
 800c312:	4604      	mov	r4, r0
 800c314:	f7ff fff0 	bl	800c2f8 <__sinit_lock_acquire>
 800c318:	69a3      	ldr	r3, [r4, #24]
 800c31a:	b11b      	cbz	r3, 800c324 <__sinit+0x14>
 800c31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c320:	f7ff bff0 	b.w	800c304 <__sinit_lock_release>
 800c324:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c328:	6523      	str	r3, [r4, #80]	; 0x50
 800c32a:	4b13      	ldr	r3, [pc, #76]	; (800c378 <__sinit+0x68>)
 800c32c:	4a13      	ldr	r2, [pc, #76]	; (800c37c <__sinit+0x6c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	62a2      	str	r2, [r4, #40]	; 0x28
 800c332:	42a3      	cmp	r3, r4
 800c334:	bf04      	itt	eq
 800c336:	2301      	moveq	r3, #1
 800c338:	61a3      	streq	r3, [r4, #24]
 800c33a:	4620      	mov	r0, r4
 800c33c:	f000 f820 	bl	800c380 <__sfp>
 800c340:	6060      	str	r0, [r4, #4]
 800c342:	4620      	mov	r0, r4
 800c344:	f000 f81c 	bl	800c380 <__sfp>
 800c348:	60a0      	str	r0, [r4, #8]
 800c34a:	4620      	mov	r0, r4
 800c34c:	f000 f818 	bl	800c380 <__sfp>
 800c350:	2200      	movs	r2, #0
 800c352:	60e0      	str	r0, [r4, #12]
 800c354:	2104      	movs	r1, #4
 800c356:	6860      	ldr	r0, [r4, #4]
 800c358:	f7ff ff82 	bl	800c260 <std>
 800c35c:	68a0      	ldr	r0, [r4, #8]
 800c35e:	2201      	movs	r2, #1
 800c360:	2109      	movs	r1, #9
 800c362:	f7ff ff7d 	bl	800c260 <std>
 800c366:	68e0      	ldr	r0, [r4, #12]
 800c368:	2202      	movs	r2, #2
 800c36a:	2112      	movs	r1, #18
 800c36c:	f7ff ff78 	bl	800c260 <std>
 800c370:	2301      	movs	r3, #1
 800c372:	61a3      	str	r3, [r4, #24]
 800c374:	e7d2      	b.n	800c31c <__sinit+0xc>
 800c376:	bf00      	nop
 800c378:	0800c950 	.word	0x0800c950
 800c37c:	0800c2a9 	.word	0x0800c2a9

0800c380 <__sfp>:
 800c380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c382:	4607      	mov	r7, r0
 800c384:	f7ff ffac 	bl	800c2e0 <__sfp_lock_acquire>
 800c388:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <__sfp+0x84>)
 800c38a:	681e      	ldr	r6, [r3, #0]
 800c38c:	69b3      	ldr	r3, [r6, #24]
 800c38e:	b913      	cbnz	r3, 800c396 <__sfp+0x16>
 800c390:	4630      	mov	r0, r6
 800c392:	f7ff ffbd 	bl	800c310 <__sinit>
 800c396:	3648      	adds	r6, #72	; 0x48
 800c398:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	d503      	bpl.n	800c3a8 <__sfp+0x28>
 800c3a0:	6833      	ldr	r3, [r6, #0]
 800c3a2:	b30b      	cbz	r3, 800c3e8 <__sfp+0x68>
 800c3a4:	6836      	ldr	r6, [r6, #0]
 800c3a6:	e7f7      	b.n	800c398 <__sfp+0x18>
 800c3a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3ac:	b9d5      	cbnz	r5, 800c3e4 <__sfp+0x64>
 800c3ae:	4b16      	ldr	r3, [pc, #88]	; (800c408 <__sfp+0x88>)
 800c3b0:	60e3      	str	r3, [r4, #12]
 800c3b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3b6:	6665      	str	r5, [r4, #100]	; 0x64
 800c3b8:	f000 f847 	bl	800c44a <__retarget_lock_init_recursive>
 800c3bc:	f7ff ff96 	bl	800c2ec <__sfp_lock_release>
 800c3c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3c8:	6025      	str	r5, [r4, #0]
 800c3ca:	61a5      	str	r5, [r4, #24]
 800c3cc:	2208      	movs	r2, #8
 800c3ce:	4629      	mov	r1, r5
 800c3d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3d4:	f7fd fa72 	bl	80098bc <memset>
 800c3d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3e0:	4620      	mov	r0, r4
 800c3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3e4:	3468      	adds	r4, #104	; 0x68
 800c3e6:	e7d9      	b.n	800c39c <__sfp+0x1c>
 800c3e8:	2104      	movs	r1, #4
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f7ff ff62 	bl	800c2b4 <__sfmoreglue>
 800c3f0:	4604      	mov	r4, r0
 800c3f2:	6030      	str	r0, [r6, #0]
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1d5      	bne.n	800c3a4 <__sfp+0x24>
 800c3f8:	f7ff ff78 	bl	800c2ec <__sfp_lock_release>
 800c3fc:	230c      	movs	r3, #12
 800c3fe:	603b      	str	r3, [r7, #0]
 800c400:	e7ee      	b.n	800c3e0 <__sfp+0x60>
 800c402:	bf00      	nop
 800c404:	0800c950 	.word	0x0800c950
 800c408:	ffff0001 	.word	0xffff0001

0800c40c <_fwalk_reent>:
 800c40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c410:	4606      	mov	r6, r0
 800c412:	4688      	mov	r8, r1
 800c414:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c418:	2700      	movs	r7, #0
 800c41a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c41e:	f1b9 0901 	subs.w	r9, r9, #1
 800c422:	d505      	bpl.n	800c430 <_fwalk_reent+0x24>
 800c424:	6824      	ldr	r4, [r4, #0]
 800c426:	2c00      	cmp	r4, #0
 800c428:	d1f7      	bne.n	800c41a <_fwalk_reent+0xe>
 800c42a:	4638      	mov	r0, r7
 800c42c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c430:	89ab      	ldrh	r3, [r5, #12]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d907      	bls.n	800c446 <_fwalk_reent+0x3a>
 800c436:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c43a:	3301      	adds	r3, #1
 800c43c:	d003      	beq.n	800c446 <_fwalk_reent+0x3a>
 800c43e:	4629      	mov	r1, r5
 800c440:	4630      	mov	r0, r6
 800c442:	47c0      	blx	r8
 800c444:	4307      	orrs	r7, r0
 800c446:	3568      	adds	r5, #104	; 0x68
 800c448:	e7e9      	b.n	800c41e <_fwalk_reent+0x12>

0800c44a <__retarget_lock_init_recursive>:
 800c44a:	4770      	bx	lr

0800c44c <__retarget_lock_acquire_recursive>:
 800c44c:	4770      	bx	lr

0800c44e <__retarget_lock_release_recursive>:
 800c44e:	4770      	bx	lr

0800c450 <__swhatbuf_r>:
 800c450:	b570      	push	{r4, r5, r6, lr}
 800c452:	460e      	mov	r6, r1
 800c454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c458:	2900      	cmp	r1, #0
 800c45a:	b096      	sub	sp, #88	; 0x58
 800c45c:	4614      	mov	r4, r2
 800c45e:	461d      	mov	r5, r3
 800c460:	da08      	bge.n	800c474 <__swhatbuf_r+0x24>
 800c462:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	061a      	lsls	r2, r3, #24
 800c46c:	d410      	bmi.n	800c490 <__swhatbuf_r+0x40>
 800c46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c472:	e00e      	b.n	800c492 <__swhatbuf_r+0x42>
 800c474:	466a      	mov	r2, sp
 800c476:	f000 f8b7 	bl	800c5e8 <_fstat_r>
 800c47a:	2800      	cmp	r0, #0
 800c47c:	dbf1      	blt.n	800c462 <__swhatbuf_r+0x12>
 800c47e:	9a01      	ldr	r2, [sp, #4]
 800c480:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c484:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c488:	425a      	negs	r2, r3
 800c48a:	415a      	adcs	r2, r3
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	e7ee      	b.n	800c46e <__swhatbuf_r+0x1e>
 800c490:	2340      	movs	r3, #64	; 0x40
 800c492:	2000      	movs	r0, #0
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	b016      	add	sp, #88	; 0x58
 800c498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c49c <__smakebuf_r>:
 800c49c:	898b      	ldrh	r3, [r1, #12]
 800c49e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4a0:	079d      	lsls	r5, r3, #30
 800c4a2:	4606      	mov	r6, r0
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	d507      	bpl.n	800c4b8 <__smakebuf_r+0x1c>
 800c4a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4ac:	6023      	str	r3, [r4, #0]
 800c4ae:	6123      	str	r3, [r4, #16]
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	6163      	str	r3, [r4, #20]
 800c4b4:	b002      	add	sp, #8
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	ab01      	add	r3, sp, #4
 800c4ba:	466a      	mov	r2, sp
 800c4bc:	f7ff ffc8 	bl	800c450 <__swhatbuf_r>
 800c4c0:	9900      	ldr	r1, [sp, #0]
 800c4c2:	4605      	mov	r5, r0
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	f7ff f963 	bl	800b790 <_malloc_r>
 800c4ca:	b948      	cbnz	r0, 800c4e0 <__smakebuf_r+0x44>
 800c4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4d0:	059a      	lsls	r2, r3, #22
 800c4d2:	d4ef      	bmi.n	800c4b4 <__smakebuf_r+0x18>
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	f043 0302 	orr.w	r3, r3, #2
 800c4dc:	81a3      	strh	r3, [r4, #12]
 800c4de:	e7e3      	b.n	800c4a8 <__smakebuf_r+0xc>
 800c4e0:	4b0d      	ldr	r3, [pc, #52]	; (800c518 <__smakebuf_r+0x7c>)
 800c4e2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	6020      	str	r0, [r4, #0]
 800c4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ec:	81a3      	strh	r3, [r4, #12]
 800c4ee:	9b00      	ldr	r3, [sp, #0]
 800c4f0:	6163      	str	r3, [r4, #20]
 800c4f2:	9b01      	ldr	r3, [sp, #4]
 800c4f4:	6120      	str	r0, [r4, #16]
 800c4f6:	b15b      	cbz	r3, 800c510 <__smakebuf_r+0x74>
 800c4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	f000 f885 	bl	800c60c <_isatty_r>
 800c502:	b128      	cbz	r0, 800c510 <__smakebuf_r+0x74>
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	f023 0303 	bic.w	r3, r3, #3
 800c50a:	f043 0301 	orr.w	r3, r3, #1
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	89a0      	ldrh	r0, [r4, #12]
 800c512:	4305      	orrs	r5, r0
 800c514:	81a5      	strh	r5, [r4, #12]
 800c516:	e7cd      	b.n	800c4b4 <__smakebuf_r+0x18>
 800c518:	0800c2a9 	.word	0x0800c2a9

0800c51c <__sread>:
 800c51c:	b510      	push	{r4, lr}
 800c51e:	460c      	mov	r4, r1
 800c520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c524:	f000 f894 	bl	800c650 <_read_r>
 800c528:	2800      	cmp	r0, #0
 800c52a:	bfab      	itete	ge
 800c52c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c52e:	89a3      	ldrhlt	r3, [r4, #12]
 800c530:	181b      	addge	r3, r3, r0
 800c532:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c536:	bfac      	ite	ge
 800c538:	6563      	strge	r3, [r4, #84]	; 0x54
 800c53a:	81a3      	strhlt	r3, [r4, #12]
 800c53c:	bd10      	pop	{r4, pc}

0800c53e <__swrite>:
 800c53e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	461f      	mov	r7, r3
 800c544:	898b      	ldrh	r3, [r1, #12]
 800c546:	05db      	lsls	r3, r3, #23
 800c548:	4605      	mov	r5, r0
 800c54a:	460c      	mov	r4, r1
 800c54c:	4616      	mov	r6, r2
 800c54e:	d505      	bpl.n	800c55c <__swrite+0x1e>
 800c550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c554:	2302      	movs	r3, #2
 800c556:	2200      	movs	r2, #0
 800c558:	f000 f868 	bl	800c62c <_lseek_r>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	4632      	mov	r2, r6
 800c56a:	463b      	mov	r3, r7
 800c56c:	4628      	mov	r0, r5
 800c56e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c572:	f000 b817 	b.w	800c5a4 <_write_r>

0800c576 <__sseek>:
 800c576:	b510      	push	{r4, lr}
 800c578:	460c      	mov	r4, r1
 800c57a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c57e:	f000 f855 	bl	800c62c <_lseek_r>
 800c582:	1c43      	adds	r3, r0, #1
 800c584:	89a3      	ldrh	r3, [r4, #12]
 800c586:	bf15      	itete	ne
 800c588:	6560      	strne	r0, [r4, #84]	; 0x54
 800c58a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c58e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c592:	81a3      	strheq	r3, [r4, #12]
 800c594:	bf18      	it	ne
 800c596:	81a3      	strhne	r3, [r4, #12]
 800c598:	bd10      	pop	{r4, pc}

0800c59a <__sclose>:
 800c59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c59e:	f000 b813 	b.w	800c5c8 <_close_r>
	...

0800c5a4 <_write_r>:
 800c5a4:	b538      	push	{r3, r4, r5, lr}
 800c5a6:	4d07      	ldr	r5, [pc, #28]	; (800c5c4 <_write_r+0x20>)
 800c5a8:	4604      	mov	r4, r0
 800c5aa:	4608      	mov	r0, r1
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	602a      	str	r2, [r5, #0]
 800c5b2:	461a      	mov	r2, r3
 800c5b4:	f7f7 fbef 	bl	8003d96 <_write>
 800c5b8:	1c43      	adds	r3, r0, #1
 800c5ba:	d102      	bne.n	800c5c2 <_write_r+0x1e>
 800c5bc:	682b      	ldr	r3, [r5, #0]
 800c5be:	b103      	cbz	r3, 800c5c2 <_write_r+0x1e>
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	bd38      	pop	{r3, r4, r5, pc}
 800c5c4:	20000db4 	.word	0x20000db4

0800c5c8 <_close_r>:
 800c5c8:	b538      	push	{r3, r4, r5, lr}
 800c5ca:	4d06      	ldr	r5, [pc, #24]	; (800c5e4 <_close_r+0x1c>)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	4608      	mov	r0, r1
 800c5d2:	602b      	str	r3, [r5, #0]
 800c5d4:	f7f7 fbfb 	bl	8003dce <_close>
 800c5d8:	1c43      	adds	r3, r0, #1
 800c5da:	d102      	bne.n	800c5e2 <_close_r+0x1a>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	b103      	cbz	r3, 800c5e2 <_close_r+0x1a>
 800c5e0:	6023      	str	r3, [r4, #0]
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	20000db4 	.word	0x20000db4

0800c5e8 <_fstat_r>:
 800c5e8:	b538      	push	{r3, r4, r5, lr}
 800c5ea:	4d07      	ldr	r5, [pc, #28]	; (800c608 <_fstat_r+0x20>)
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	4604      	mov	r4, r0
 800c5f0:	4608      	mov	r0, r1
 800c5f2:	4611      	mov	r1, r2
 800c5f4:	602b      	str	r3, [r5, #0]
 800c5f6:	f7f7 fbf6 	bl	8003de6 <_fstat>
 800c5fa:	1c43      	adds	r3, r0, #1
 800c5fc:	d102      	bne.n	800c604 <_fstat_r+0x1c>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	b103      	cbz	r3, 800c604 <_fstat_r+0x1c>
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	bd38      	pop	{r3, r4, r5, pc}
 800c606:	bf00      	nop
 800c608:	20000db4 	.word	0x20000db4

0800c60c <_isatty_r>:
 800c60c:	b538      	push	{r3, r4, r5, lr}
 800c60e:	4d06      	ldr	r5, [pc, #24]	; (800c628 <_isatty_r+0x1c>)
 800c610:	2300      	movs	r3, #0
 800c612:	4604      	mov	r4, r0
 800c614:	4608      	mov	r0, r1
 800c616:	602b      	str	r3, [r5, #0]
 800c618:	f7f7 fbf5 	bl	8003e06 <_isatty>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d102      	bne.n	800c626 <_isatty_r+0x1a>
 800c620:	682b      	ldr	r3, [r5, #0]
 800c622:	b103      	cbz	r3, 800c626 <_isatty_r+0x1a>
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	20000db4 	.word	0x20000db4

0800c62c <_lseek_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d07      	ldr	r5, [pc, #28]	; (800c64c <_lseek_r+0x20>)
 800c630:	4604      	mov	r4, r0
 800c632:	4608      	mov	r0, r1
 800c634:	4611      	mov	r1, r2
 800c636:	2200      	movs	r2, #0
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f7f7 fbee 	bl	8003e1c <_lseek>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_lseek_r+0x1e>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_lseek_r+0x1e>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	20000db4 	.word	0x20000db4

0800c650 <_read_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d07      	ldr	r5, [pc, #28]	; (800c670 <_read_r+0x20>)
 800c654:	4604      	mov	r4, r0
 800c656:	4608      	mov	r0, r1
 800c658:	4611      	mov	r1, r2
 800c65a:	2200      	movs	r2, #0
 800c65c:	602a      	str	r2, [r5, #0]
 800c65e:	461a      	mov	r2, r3
 800c660:	f7f7 fb7c 	bl	8003d5c <_read>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	d102      	bne.n	800c66e <_read_r+0x1e>
 800c668:	682b      	ldr	r3, [r5, #0]
 800c66a:	b103      	cbz	r3, 800c66e <_read_r+0x1e>
 800c66c:	6023      	str	r3, [r4, #0]
 800c66e:	bd38      	pop	{r3, r4, r5, pc}
 800c670:	20000db4 	.word	0x20000db4

0800c674 <_init>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	bf00      	nop
 800c678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67a:	bc08      	pop	{r3}
 800c67c:	469e      	mov	lr, r3
 800c67e:	4770      	bx	lr

0800c680 <_fini>:
 800c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c682:	bf00      	nop
 800c684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c686:	bc08      	pop	{r3}
 800c688:	469e      	mov	lr, r3
 800c68a:	4770      	bx	lr
