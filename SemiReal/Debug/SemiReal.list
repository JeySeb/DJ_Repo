
SemiReal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000077c  0800d370  0800d370  0001d370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daec  0800daec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800daec  0800daec  0001daec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800daf4  0800daf4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800daf4  0800daf4  0001daf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800db00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c48  200001e0  0800dce0  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e28  0800dce0  00020e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f1fb  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377a  00000000  00000000  0003f40b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00042b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014e8  00000000  00000000  00044190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bc8d  00000000  00000000  00045678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a047  00000000  00000000  00071305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd37a  00000000  00000000  0008b34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001886c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073c4  00000000  00000000  00188718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d354 	.word	0x0800d354

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800d354 	.word	0x0800d354

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_Z23read_calliberation_datav>:
#define atmPress 102800 //Pa



void read_calliberation_data (void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af04      	add	r7, sp, #16
	uint8_t Callib_Data[22] = {0};
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	821a      	strh	r2, [r3, #16]
	uint16_t Callib_Start = 0xAA;
 8000fa4:	23aa      	movs	r3, #170	; 0xaa
 8000fa6:	82fb      	strh	r3, [r7, #22]
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, Callib_Start, 1, Callib_Data,22, HAL_MAX_DELAY);
 8000fa8:	8afa      	ldrh	r2, [r7, #22]
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2316      	movs	r3, #22
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	21ee      	movs	r1, #238	; 0xee
 8000fbc:	4836      	ldr	r0, [pc, #216]	; (8001098 <_Z23read_calliberation_datav+0x10c>)
 8000fbe:	f004 fdd3 	bl	8005b68 <HAL_I2C_Mem_Read>

	AC1 = ((Callib_Data[0] << 8) | Callib_Data[1]);
 8000fc2:	783b      	ldrb	r3, [r7, #0]
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	b21a      	sxth	r2, r3
 8000fc8:	787b      	ldrb	r3, [r7, #1]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	4b32      	ldr	r3, [pc, #200]	; (800109c <_Z23read_calliberation_datav+0x110>)
 8000fd2:	801a      	strh	r2, [r3, #0]
	AC2 = ((Callib_Data[2] << 8) | Callib_Data[3]);
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	78fb      	ldrb	r3, [r7, #3]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21a      	sxth	r2, r3
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <_Z23read_calliberation_datav+0x114>)
 8000fe4:	801a      	strh	r2, [r3, #0]
	AC3 = ((Callib_Data[4] << 8) | Callib_Data[5]);
 8000fe6:	793b      	ldrb	r3, [r7, #4]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	797b      	ldrb	r3, [r7, #5]
 8000fee:	b21b      	sxth	r3, r3
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <_Z23read_calliberation_datav+0x118>)
 8000ff6:	801a      	strh	r2, [r3, #0]
	AC4 = ((Callib_Data[6] << 8) | Callib_Data[7]);
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	021b      	lsls	r3, r3, #8
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	b21b      	sxth	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b21b      	sxth	r3, r3
 8001006:	b29a      	uxth	r2, r3
 8001008:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <_Z23read_calliberation_datav+0x11c>)
 800100a:	801a      	strh	r2, [r3, #0]
	AC5 = ((Callib_Data[8] << 8) | Callib_Data[9]);
 800100c:	7a3b      	ldrb	r3, [r7, #8]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7a7b      	ldrb	r3, [r7, #9]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <_Z23read_calliberation_datav+0x120>)
 800101e:	801a      	strh	r2, [r3, #0]
	AC6 = ((Callib_Data[10] << 8) | Callib_Data[11]);
 8001020:	7abb      	ldrb	r3, [r7, #10]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7afb      	ldrb	r3, [r7, #11]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21b      	sxth	r3, r3
 800102e:	b29a      	uxth	r2, r3
 8001030:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <_Z23read_calliberation_datav+0x124>)
 8001032:	801a      	strh	r2, [r3, #0]
	B1 = ((Callib_Data[12] << 8) | Callib_Data[13]);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	021b      	lsls	r3, r3, #8
 8001038:	b21a      	sxth	r2, r3
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	b21b      	sxth	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b21a      	sxth	r2, r3
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <_Z23read_calliberation_datav+0x128>)
 8001044:	801a      	strh	r2, [r3, #0]
	B2 = ((Callib_Data[14] << 8) | Callib_Data[15]);
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b21a      	sxth	r2, r3
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	b21b      	sxth	r3, r3
 8001050:	4313      	orrs	r3, r2
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <_Z23read_calliberation_datav+0x12c>)
 8001056:	801a      	strh	r2, [r3, #0]
	MB = ((Callib_Data[16] << 8) | Callib_Data[17]);
 8001058:	7c3b      	ldrb	r3, [r7, #16]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7c7b      	ldrb	r3, [r7, #17]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <_Z23read_calliberation_datav+0x130>)
 8001068:	801a      	strh	r2, [r3, #0]
	MC = ((Callib_Data[18] << 8) | Callib_Data[19]);
 800106a:	7cbb      	ldrb	r3, [r7, #18]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7cfb      	ldrb	r3, [r7, #19]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <_Z23read_calliberation_datav+0x134>)
 800107a:	801a      	strh	r2, [r3, #0]
	MD = ((Callib_Data[20] << 8) | Callib_Data[21]);
 800107c:	7d3b      	ldrb	r3, [r7, #20]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7d7b      	ldrb	r3, [r7, #21]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <_Z23read_calliberation_datav+0x138>)
 800108c:	801a      	strh	r2, [r3, #0]

}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000244 	.word	0x20000244
 800109c:	200001fc 	.word	0x200001fc
 80010a0:	200001fe 	.word	0x200001fe
 80010a4:	20000200 	.word	0x20000200
 80010a8:	20000202 	.word	0x20000202
 80010ac:	20000204 	.word	0x20000204
 80010b0:	20000206 	.word	0x20000206
 80010b4:	20000208 	.word	0x20000208
 80010b8:	2000020a 	.word	0x2000020a
 80010bc:	2000020c 	.word	0x2000020c
 80010c0:	2000020e 	.word	0x2000020e
 80010c4:	20000210 	.word	0x20000210

080010c8 <_Z9Get_UTempv>:


// Get uncompensated Temp
uint16_t Get_UTemp (void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0x2E;
 80010ce:	232e      	movs	r3, #46	; 0x2e
 80010d0:	71fb      	strb	r3, [r7, #7]
	uint8_t Temp_RAW[2] = {0};
 80010d2:	2300      	movs	r3, #0
 80010d4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9302      	str	r3, [sp, #8]
 80010dc:	2301      	movs	r3, #1
 80010de:	9301      	str	r3, [sp, #4]
 80010e0:	1dfb      	adds	r3, r7, #7
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	2301      	movs	r3, #1
 80010e6:	22f4      	movs	r2, #244	; 0xf4
 80010e8:	21ee      	movs	r1, #238	; 0xee
 80010ea:	480f      	ldr	r0, [pc, #60]	; (8001128 <_Z9Get_UTempv+0x60>)
 80010ec:	f004 fc28 	bl	8005940 <HAL_I2C_Mem_Write>
	HAL_Delay (5);  // wait 4.5 ms
 80010f0:	2005      	movs	r0, #5
 80010f2:	f003 fe25 	bl	8004d40 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Temp_RAW, 2, 1000);
 80010f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2302      	movs	r3, #2
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	22f6      	movs	r2, #246	; 0xf6
 8001108:	21ee      	movs	r1, #238	; 0xee
 800110a:	4807      	ldr	r0, [pc, #28]	; (8001128 <_Z9Get_UTempv+0x60>)
 800110c:	f004 fd2c 	bl	8005b68 <HAL_I2C_Mem_Read>
	return ((Temp_RAW[0]<<8) + Temp_RAW[1]);
 8001110:	793b      	ldrb	r3, [r7, #4]
 8001112:	b29b      	uxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b29a      	uxth	r2, r3
 8001118:	797b      	ldrb	r3, [r7, #5]
 800111a:	b29b      	uxth	r3, r3
 800111c:	4413      	add	r3, r2
 800111e:	b29b      	uxth	r3, r3
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000244 	.word	0x20000244

0800112c <_Z14BMP180_GetTempv>:

float BMP180_GetTemp (void)
{
 800112c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001130:	af00      	add	r7, sp, #0
	UT = Get_UTemp();
 8001132:	f7ff ffc9 	bl	80010c8 <_Z9Get_UTempv>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	4b4a      	ldr	r3, [pc, #296]	; (8001264 <_Z14BMP180_GetTempv+0x138>)
 800113c:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 800113e:	4b49      	ldr	r3, [pc, #292]	; (8001264 <_Z14BMP180_GetTempv+0x138>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a49      	ldr	r2, [pc, #292]	; (8001268 <_Z14BMP180_GetTempv+0x13c>)
 8001144:	8812      	ldrh	r2, [r2, #0]
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff f9eb 	bl	8000524 <__aeabi_i2d>
 800114e:	4604      	mov	r4, r0
 8001150:	460d      	mov	r5, r1
 8001152:	4b46      	ldr	r3, [pc, #280]	; (800126c <_Z14BMP180_GetTempv+0x140>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f9e4 	bl	8000524 <__aeabi_i2d>
 800115c:	4680      	mov	r8, r0
 800115e:	4689      	mov	r9, r1
 8001160:	210f      	movs	r1, #15
 8001162:	2002      	movs	r0, #2
 8001164:	f000 fbc0 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001168:	ec53 2b10 	vmov	r2, r3, d0
 800116c:	4640      	mov	r0, r8
 800116e:	4649      	mov	r1, r9
 8001170:	f7ff fb6c 	bl	800084c <__aeabi_ddiv>
 8001174:	4602      	mov	r2, r0
 8001176:	460b      	mov	r3, r1
 8001178:	4620      	mov	r0, r4
 800117a:	4629      	mov	r1, r5
 800117c:	f7ff fa3c 	bl	80005f8 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	f7ff fce6 	bl	8000b58 <__aeabi_d2iz>
 800118c:	4603      	mov	r3, r0
 800118e:	4a38      	ldr	r2, [pc, #224]	; (8001270 <_Z14BMP180_GetTempv+0x144>)
 8001190:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 8001192:	4b38      	ldr	r3, [pc, #224]	; (8001274 <_Z14BMP180_GetTempv+0x148>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9c3 	bl	8000524 <__aeabi_i2d>
 800119e:	4604      	mov	r4, r0
 80011a0:	460d      	mov	r5, r1
 80011a2:	210b      	movs	r1, #11
 80011a4:	2002      	movs	r0, #2
 80011a6:	f000 fb9f 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011aa:	ec53 2b10 	vmov	r2, r3, d0
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	f7ff fa21 	bl	80005f8 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4614      	mov	r4, r2
 80011bc:	461d      	mov	r5, r3
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <_Z14BMP180_GetTempv+0x14c>)
 80011c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <_Z14BMP180_GetTempv+0x144>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f9a9 	bl	8000524 <__aeabi_i2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4620      	mov	r0, r4
 80011d8:	4629      	mov	r1, r5
 80011da:	f7ff fb37 	bl	800084c <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f7ff fcb7 	bl	8000b58 <__aeabi_d2iz>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a23      	ldr	r2, [pc, #140]	; (800127c <_Z14BMP180_GetTempv+0x150>)
 80011ee:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 80011f0:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <_Z14BMP180_GetTempv+0x144>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b21      	ldr	r3, [pc, #132]	; (800127c <_Z14BMP180_GetTempv+0x150>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <_Z14BMP180_GetTempv+0x154>)
 80011fc:	6013      	str	r3, [r2, #0]
	Temp = (B5+8)/(pow(2,4));
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <_Z14BMP180_GetTempv+0x154>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3308      	adds	r3, #8
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff f98d 	bl	8000524 <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	2104      	movs	r1, #4
 8001210:	2002      	movs	r0, #2
 8001212:	f000 fb69 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001216:	ec53 2b10 	vmov	r2, r3, d0
 800121a:	4620      	mov	r0, r4
 800121c:	4629      	mov	r1, r5
 800121e:	f7ff fb15 	bl	800084c <__aeabi_ddiv>
 8001222:	4602      	mov	r2, r0
 8001224:	460b      	mov	r3, r1
 8001226:	4610      	mov	r0, r2
 8001228:	4619      	mov	r1, r3
 800122a:	f7ff fc95 	bl	8000b58 <__aeabi_d2iz>
 800122e:	4603      	mov	r3, r0
 8001230:	4a14      	ldr	r2, [pc, #80]	; (8001284 <_Z14BMP180_GetTempv+0x158>)
 8001232:	6013      	str	r3, [r2, #0]
	return Temp/10.0;
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <_Z14BMP180_GetTempv+0x158>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f973 	bl	8000524 <__aeabi_i2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <_Z14BMP180_GetTempv+0x15c>)
 8001244:	f7ff fb02 	bl	800084c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcca 	bl	8000be8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	ee07 3a90 	vmov	s15, r3
}
 800125a:	eeb0 0a67 	vmov.f32	s0, s15
 800125e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001262:	bf00      	nop
 8001264:	20000214 	.word	0x20000214
 8001268:	20000206 	.word	0x20000206
 800126c:	20000204 	.word	0x20000204
 8001270:	2000021c 	.word	0x2000021c
 8001274:	2000020e 	.word	0x2000020e
 8001278:	20000210 	.word	0x20000210
 800127c:	20000220 	.word	0x20000220
 8001280:	2000022c 	.word	0x2000022c
 8001284:	20000240 	.word	0x20000240
 8001288:	40240000 	.word	0x40240000

0800128c <_Z10Get_UPressi>:

// Get uncompensated Pressure
uint32_t Get_UPress (int oss)   // oversampling setting 0,1,2,3
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af04      	add	r7, sp, #16
 8001292:	6078      	str	r0, [r7, #4]
	uint8_t datatowrite = 0x34+(oss<<6);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	019b      	lsls	r3, r3, #6
 800129a:	b2db      	uxtb	r3, r3
 800129c:	3334      	adds	r3, #52	; 0x34
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	73fb      	strb	r3, [r7, #15]
	uint8_t Press_RAW[3] = {0};
 80012a2:	4b27      	ldr	r3, [pc, #156]	; (8001340 <_Z10Get_UPressi+0xb4>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	81bb      	strh	r3, [r7, #12]
 80012a8:	2300      	movs	r3, #0
 80012aa:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Mem_Write(BMP180_I2C, BMP180_ADDRESS, 0xF4, 1, &datatowrite, 1, 1000);
 80012ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	22f4      	movs	r2, #244	; 0xf4
 80012c0:	21ee      	movs	r1, #238	; 0xee
 80012c2:	4820      	ldr	r0, [pc, #128]	; (8001344 <_Z10Get_UPressi+0xb8>)
 80012c4:	f004 fb3c 	bl	8005940 <HAL_I2C_Mem_Write>
	switch (oss)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d81a      	bhi.n	8001304 <_Z10Get_UPressi+0x78>
 80012ce:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <_Z10Get_UPressi+0x48>)
 80012d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d4:	080012e5 	.word	0x080012e5
 80012d8:	080012ed 	.word	0x080012ed
 80012dc:	080012f5 	.word	0x080012f5
 80012e0:	080012fd 	.word	0x080012fd
	{
		case (0):
			HAL_Delay (5);
 80012e4:	2005      	movs	r0, #5
 80012e6:	f003 fd2b 	bl	8004d40 <HAL_Delay>
			break;
 80012ea:	e00b      	b.n	8001304 <_Z10Get_UPressi+0x78>
		case (1):
			HAL_Delay (8);
 80012ec:	2008      	movs	r0, #8
 80012ee:	f003 fd27 	bl	8004d40 <HAL_Delay>
			break;
 80012f2:	e007      	b.n	8001304 <_Z10Get_UPressi+0x78>
		case (2):
			HAL_Delay (14);
 80012f4:	200e      	movs	r0, #14
 80012f6:	f003 fd23 	bl	8004d40 <HAL_Delay>
			break;
 80012fa:	e003      	b.n	8001304 <_Z10Get_UPressi+0x78>
		case (3):
			HAL_Delay (26);
 80012fc:	201a      	movs	r0, #26
 80012fe:	f003 fd1f 	bl	8004d40 <HAL_Delay>
			break;
 8001302:	bf00      	nop
	}
	HAL_I2C_Mem_Read(BMP180_I2C, BMP180_ADDRESS, 0xF6, 1, Press_RAW, 3, 1000);
 8001304:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2303      	movs	r3, #3
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	f107 030c 	add.w	r3, r7, #12
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	22f6      	movs	r2, #246	; 0xf6
 8001318:	21ee      	movs	r1, #238	; 0xee
 800131a:	480a      	ldr	r0, [pc, #40]	; (8001344 <_Z10Get_UPressi+0xb8>)
 800131c:	f004 fc24 	bl	8005b68 <HAL_I2C_Mem_Read>
	return (((Press_RAW[0]<<16)+(Press_RAW[1]<<8)+Press_RAW[2]) >> (8-oss));
 8001320:	7b3b      	ldrb	r3, [r7, #12]
 8001322:	041a      	lsls	r2, r3, #16
 8001324:	7b7b      	ldrb	r3, [r7, #13]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	4413      	add	r3, r2
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	441a      	add	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f1c3 0308 	rsb	r3, r3, #8
 8001334:	fa42 f303 	asr.w	r3, r2, r3
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0800d370 	.word	0x0800d370
 8001344:	20000244 	.word	0x20000244

08001348 <_Z15BMP180_GetPressi>:


float BMP180_GetPress (int oss)
{
 8001348:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	UP = Get_UPress(oss);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff9a 	bl	800128c <_Z10Get_UPressi>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4bc8      	ldr	r3, [pc, #800]	; (8001680 <_Z15BMP180_GetPressi+0x338>)
 800135e:	601a      	str	r2, [r3, #0]
	X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8001360:	4bc8      	ldr	r3, [pc, #800]	; (8001684 <_Z15BMP180_GetPressi+0x33c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4ac8      	ldr	r2, [pc, #800]	; (8001688 <_Z15BMP180_GetPressi+0x340>)
 8001366:	8812      	ldrh	r2, [r2, #0]
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8da 	bl	8000524 <__aeabi_i2d>
 8001370:	4604      	mov	r4, r0
 8001372:	460d      	mov	r5, r1
 8001374:	4bc5      	ldr	r3, [pc, #788]	; (800168c <_Z15BMP180_GetPressi+0x344>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8d3 	bl	8000524 <__aeabi_i2d>
 800137e:	4680      	mov	r8, r0
 8001380:	4689      	mov	r9, r1
 8001382:	210f      	movs	r1, #15
 8001384:	2002      	movs	r0, #2
 8001386:	f000 faaf 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800138a:	ec53 2b10 	vmov	r2, r3, d0
 800138e:	4640      	mov	r0, r8
 8001390:	4649      	mov	r1, r9
 8001392:	f7ff fa5b 	bl	800084c <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4620      	mov	r0, r4
 800139c:	4629      	mov	r1, r5
 800139e:	f7ff f92b 	bl	80005f8 <__aeabi_dmul>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fbd5 	bl	8000b58 <__aeabi_d2iz>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4ab7      	ldr	r2, [pc, #732]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80013b2:	6013      	str	r3, [r2, #0]
	X2 = ((MC*(pow(2,11))) / (X1+MD));
 80013b4:	4bb7      	ldr	r3, [pc, #732]	; (8001694 <_Z15BMP180_GetPressi+0x34c>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8b2 	bl	8000524 <__aeabi_i2d>
 80013c0:	4604      	mov	r4, r0
 80013c2:	460d      	mov	r5, r1
 80013c4:	210b      	movs	r1, #11
 80013c6:	2002      	movs	r0, #2
 80013c8:	f000 fa8e 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013cc:	ec53 2b10 	vmov	r2, r3, d0
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7ff f910 	bl	80005f8 <__aeabi_dmul>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4614      	mov	r4, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	4bad      	ldr	r3, [pc, #692]	; (8001698 <_Z15BMP180_GetPressi+0x350>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4ba9      	ldr	r3, [pc, #676]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f898 	bl	8000524 <__aeabi_i2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7ff fa26 	bl	800084c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fba6 	bl	8000b58 <__aeabi_d2iz>
 800140c:	4603      	mov	r3, r0
 800140e:	4aa3      	ldr	r2, [pc, #652]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 8001410:	6013      	str	r3, [r2, #0]
	B5 = X1+X2;
 8001412:	4b9f      	ldr	r3, [pc, #636]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4ba1      	ldr	r3, [pc, #644]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4aa0      	ldr	r2, [pc, #640]	; (80016a0 <_Z15BMP180_GetPressi+0x358>)
 800141e:	6013      	str	r3, [r2, #0]
	B6 = B5-4000;
 8001420:	4b9f      	ldr	r3, [pc, #636]	; (80016a0 <_Z15BMP180_GetPressi+0x358>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001428:	4a9e      	ldr	r2, [pc, #632]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 800142a:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 800142c:	4b9e      	ldr	r3, [pc, #632]	; (80016a8 <_Z15BMP180_GetPressi+0x360>)
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f876 	bl	8000524 <__aeabi_i2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a98      	ldr	r2, [pc, #608]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 8001442:	6812      	ldr	r2, [r2, #0]
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f86b 	bl	8000524 <__aeabi_i2d>
 800144e:	4680      	mov	r8, r0
 8001450:	4689      	mov	r9, r1
 8001452:	210c      	movs	r1, #12
 8001454:	2002      	movs	r0, #2
 8001456:	f000 fa47 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800145a:	ec53 2b10 	vmov	r2, r3, d0
 800145e:	4640      	mov	r0, r8
 8001460:	4649      	mov	r1, r9
 8001462:	f7ff f9f3 	bl	800084c <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7ff f8c3 	bl	80005f8 <__aeabi_dmul>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4614      	mov	r4, r2
 8001478:	461d      	mov	r5, r3
 800147a:	210b      	movs	r1, #11
 800147c:	2002      	movs	r0, #2
 800147e:	f000 fa33 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001482:	ec53 2b10 	vmov	r2, r3, d0
 8001486:	4620      	mov	r0, r4
 8001488:	4629      	mov	r1, r5
 800148a:	f7ff f9df 	bl	800084c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fb5f 	bl	8000b58 <__aeabi_d2iz>
 800149a:	4603      	mov	r3, r0
 800149c:	4a7c      	ldr	r2, [pc, #496]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 800149e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 80014a0:	4b82      	ldr	r3, [pc, #520]	; (80016ac <_Z15BMP180_GetPressi+0x364>)
 80014a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b7e      	ldr	r3, [pc, #504]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	fb02 f303 	mul.w	r3, r2, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff f837 	bl	8000524 <__aeabi_i2d>
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	210b      	movs	r1, #11
 80014bc:	2002      	movs	r0, #2
 80014be:	f000 fa13 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014c2:	ec53 2b10 	vmov	r2, r3, d0
 80014c6:	4620      	mov	r0, r4
 80014c8:	4629      	mov	r1, r5
 80014ca:	f7ff f9bf 	bl	800084c <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fb3f 	bl	8000b58 <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a6f      	ldr	r2, [pc, #444]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80014de:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b6d      	ldr	r3, [pc, #436]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 80014ec:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80014ee:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <_Z15BMP180_GetPressi+0x36c>)
 80014f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f4:	009a      	lsls	r2, r3, #2
 80014f6:	4b6e      	ldr	r3, [pc, #440]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	441a      	add	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	3302      	adds	r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	da00      	bge.n	800150a <_Z15BMP180_GetPressi+0x1c2>
 8001508:	3303      	adds	r3, #3
 800150a:	109b      	asrs	r3, r3, #2
 800150c:	461a      	mov	r2, r3
 800150e:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <_Z15BMP180_GetPressi+0x370>)
 8001510:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 8001512:	4b6a      	ldr	r3, [pc, #424]	; (80016bc <_Z15BMP180_GetPressi+0x374>)
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	461a      	mov	r2, r3
 800151a:	4b62      	ldr	r3, [pc, #392]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	fb02 f303 	mul.w	r3, r2, r3
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fffe 	bl	8000524 <__aeabi_i2d>
 8001528:	4604      	mov	r4, r0
 800152a:	460d      	mov	r5, r1
 800152c:	210d      	movs	r1, #13
 800152e:	2002      	movs	r0, #2
 8001530:	f000 f9da 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001534:	ec53 2b10 	vmov	r2, r3, d0
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7ff f986 	bl	800084c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb06 	bl	8000b58 <__aeabi_d2iz>
 800154c:	4603      	mov	r3, r0
 800154e:	4a50      	ldr	r2, [pc, #320]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 8001550:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001552:	4b5b      	ldr	r3, [pc, #364]	; (80016c0 <_Z15BMP180_GetPressi+0x378>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffe3 	bl	8000524 <__aeabi_i2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	4b50      	ldr	r3, [pc, #320]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <_Z15BMP180_GetPressi+0x35c>)
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	fb02 f303 	mul.w	r3, r2, r3
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ffd8 	bl	8000524 <__aeabi_i2d>
 8001574:	4680      	mov	r8, r0
 8001576:	4689      	mov	r9, r1
 8001578:	210c      	movs	r1, #12
 800157a:	2002      	movs	r0, #2
 800157c:	f000 f9b4 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001580:	ec53 2b10 	vmov	r2, r3, d0
 8001584:	4640      	mov	r0, r8
 8001586:	4649      	mov	r1, r9
 8001588:	f7ff f960 	bl	800084c <__aeabi_ddiv>
 800158c:	4602      	mov	r2, r0
 800158e:	460b      	mov	r3, r1
 8001590:	4620      	mov	r0, r4
 8001592:	4629      	mov	r1, r5
 8001594:	f7ff f830 	bl	80005f8 <__aeabi_dmul>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4614      	mov	r4, r2
 800159e:	461d      	mov	r5, r3
 80015a0:	2110      	movs	r1, #16
 80015a2:	2002      	movs	r0, #2
 80015a4:	f000 f9a0 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015a8:	ec53 2b10 	vmov	r2, r3, d0
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7ff f94c 	bl	800084c <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff facc 	bl	8000b58 <__aeabi_d2iz>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a36      	ldr	r2, [pc, #216]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80015c4:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 80015c6:	4b32      	ldr	r3, [pc, #200]	; (8001690 <_Z15BMP180_GetPressi+0x348>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b34      	ldr	r3, [pc, #208]	; (800169c <_Z15BMP180_GetPressi+0x354>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	3302      	adds	r3, #2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffa6 	bl	8000524 <__aeabi_i2d>
 80015d8:	4604      	mov	r4, r0
 80015da:	460d      	mov	r5, r1
 80015dc:	2102      	movs	r1, #2
 80015de:	2002      	movs	r0, #2
 80015e0:	f000 f982 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015e4:	ec53 2b10 	vmov	r2, r3, d0
 80015e8:	4620      	mov	r0, r4
 80015ea:	4629      	mov	r1, r5
 80015ec:	f7ff f92e 	bl	800084c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	4610      	mov	r0, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f7ff faae 	bl	8000b58 <__aeabi_d2iz>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a2c      	ldr	r2, [pc, #176]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 8001600:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001602:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <_Z15BMP180_GetPressi+0x37c>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b29      	ldr	r3, [pc, #164]	; (80016b0 <_Z15BMP180_GetPressi+0x368>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001610:	fb02 f303 	mul.w	r3, r2, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff75 	bl	8000504 <__aeabi_ui2d>
 800161a:	4604      	mov	r4, r0
 800161c:	460d      	mov	r5, r1
 800161e:	210f      	movs	r1, #15
 8001620:	2002      	movs	r0, #2
 8001622:	f000 f961 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001626:	ec53 2b10 	vmov	r2, r3, d0
 800162a:	4620      	mov	r0, r4
 800162c:	4629      	mov	r1, r5
 800162e:	f7ff f90d 	bl	800084c <__aeabi_ddiv>
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4610      	mov	r0, r2
 8001638:	4619      	mov	r1, r3
 800163a:	f7ff fab5 	bl	8000ba8 <__aeabi_d2uiz>
 800163e:	4603      	mov	r3, r0
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <_Z15BMP180_GetPressi+0x380>)
 8001642:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 8001644:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <_Z15BMP180_GetPressi+0x338>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <_Z15BMP180_GetPressi+0x370>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	fa41 f202 	asr.w	r2, r1, r2
 800165a:	fb02 f303 	mul.w	r3, r2, r3
 800165e:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <_Z15BMP180_GetPressi+0x384>)
 8001660:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) Press = (B7*2)/B4;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <_Z15BMP180_GetPressi+0x384>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	db34      	blt.n	80016d4 <_Z15BMP180_GetPressi+0x38c>
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <_Z15BMP180_GetPressi+0x384>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	005a      	lsls	r2, r3, #1
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <_Z15BMP180_GetPressi+0x380>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	fbb2 f3f3 	udiv	r3, r2, r3
 8001678:	461a      	mov	r2, r3
 800167a:	4b15      	ldr	r3, [pc, #84]	; (80016d0 <_Z15BMP180_GetPressi+0x388>)
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e033      	b.n	80016e8 <_Z15BMP180_GetPressi+0x3a0>
 8001680:	20000218 	.word	0x20000218
 8001684:	20000214 	.word	0x20000214
 8001688:	20000206 	.word	0x20000206
 800168c:	20000204 	.word	0x20000204
 8001690:	2000021c 	.word	0x2000021c
 8001694:	2000020e 	.word	0x2000020e
 8001698:	20000210 	.word	0x20000210
 800169c:	20000220 	.word	0x20000220
 80016a0:	2000022c 	.word	0x2000022c
 80016a4:	20000234 	.word	0x20000234
 80016a8:	2000020a 	.word	0x2000020a
 80016ac:	200001fe 	.word	0x200001fe
 80016b0:	20000224 	.word	0x20000224
 80016b4:	200001fc 	.word	0x200001fc
 80016b8:	20000228 	.word	0x20000228
 80016bc:	20000200 	.word	0x20000200
 80016c0:	20000208 	.word	0x20000208
 80016c4:	20000202 	.word	0x20000202
 80016c8:	20000230 	.word	0x20000230
 80016cc:	20000238 	.word	0x20000238
 80016d0:	2000023c 	.word	0x2000023c
	else Press = (B7/B4)*2;
 80016d4:	4b58      	ldr	r3, [pc, #352]	; (8001838 <_Z15BMP180_GetPressi+0x4f0>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b58      	ldr	r3, [pc, #352]	; (800183c <_Z15BMP180_GetPressi+0x4f4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b56      	ldr	r3, [pc, #344]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 80016e6:	601a      	str	r2, [r3, #0]
	X1 = (Press/(pow(2,8)))*(Press/(pow(2,8)));
 80016e8:	4b55      	ldr	r3, [pc, #340]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff19 	bl	8000524 <__aeabi_i2d>
 80016f2:	4604      	mov	r4, r0
 80016f4:	460d      	mov	r5, r1
 80016f6:	2108      	movs	r1, #8
 80016f8:	2002      	movs	r0, #2
 80016fa:	f000 f8f5 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016fe:	ec53 2b10 	vmov	r2, r3, d0
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7ff f8a1 	bl	800084c <__aeabi_ddiv>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4690      	mov	r8, r2
 8001710:	4699      	mov	r9, r3
 8001712:	4b4b      	ldr	r3, [pc, #300]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ff04 	bl	8000524 <__aeabi_i2d>
 800171c:	4604      	mov	r4, r0
 800171e:	460d      	mov	r5, r1
 8001720:	2108      	movs	r1, #8
 8001722:	2002      	movs	r0, #2
 8001724:	f000 f8e0 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001728:	ec53 2b10 	vmov	r2, r3, d0
 800172c:	4620      	mov	r0, r4
 800172e:	4629      	mov	r1, r5
 8001730:	f7ff f88c 	bl	800084c <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4640      	mov	r0, r8
 800173a:	4649      	mov	r1, r9
 800173c:	f7fe ff5c 	bl	80005f8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa06 	bl	8000b58 <__aeabi_d2iz>
 800174c:	4603      	mov	r3, r0
 800174e:	4a3d      	ldr	r2, [pc, #244]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 8001750:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f640 32de 	movw	r2, #3038	; 0xbde
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fee0 	bl	8000524 <__aeabi_i2d>
 8001764:	4604      	mov	r4, r0
 8001766:	460d      	mov	r5, r1
 8001768:	2110      	movs	r1, #16
 800176a:	2002      	movs	r0, #2
 800176c:	f000 f8bc 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001770:	ec53 2b10 	vmov	r2, r3, d0
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7ff f868 	bl	800084c <__aeabi_ddiv>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f7ff f9e8 	bl	8000b58 <__aeabi_d2iz>
 8001788:	4603      	mov	r3, r0
 800178a:	4a2e      	ldr	r2, [pc, #184]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 800178c:	6013      	str	r3, [r2, #0]
	X2 = (-7357*Press)/(pow(2,16));
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <_Z15BMP180_GetPressi+0x500>)
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fec3 	bl	8000524 <__aeabi_i2d>
 800179e:	4604      	mov	r4, r0
 80017a0:	460d      	mov	r5, r1
 80017a2:	2110      	movs	r1, #16
 80017a4:	2002      	movs	r0, #2
 80017a6:	f000 f89f 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017aa:	ec53 2b10 	vmov	r2, r3, d0
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7ff f84b 	bl	800084c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9cb 	bl	8000b58 <__aeabi_d2iz>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a21      	ldr	r2, [pc, #132]	; (800184c <_Z15BMP180_GetPressi+0x504>)
 80017c6:	6013      	str	r3, [r2, #0]
	Press = Press + (X1+X2+3791)/(pow(2,4));
 80017c8:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7fe fea9 	bl	8000524 <__aeabi_i2d>
 80017d2:	4604      	mov	r4, r0
 80017d4:	460d      	mov	r5, r1
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <_Z15BMP180_GetPressi+0x4fc>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b1c      	ldr	r3, [pc, #112]	; (800184c <_Z15BMP180_GetPressi+0x504>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe9d 	bl	8000524 <__aeabi_i2d>
 80017ea:	4680      	mov	r8, r0
 80017ec:	4689      	mov	r9, r1
 80017ee:	2104      	movs	r1, #4
 80017f0:	2002      	movs	r0, #2
 80017f2:	f000 f879 	bl	80018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80017f6:	ec53 2b10 	vmov	r2, r3, d0
 80017fa:	4640      	mov	r0, r8
 80017fc:	4649      	mov	r1, r9
 80017fe:	f7ff f825 	bl	800084c <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	4620      	mov	r0, r4
 8001808:	4629      	mov	r1, r5
 800180a:	f7fe fd3f 	bl	800028c <__adddf3>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4610      	mov	r0, r2
 8001814:	4619      	mov	r1, r3
 8001816:	f7ff f99f 	bl	8000b58 <__aeabi_d2iz>
 800181a:	4603      	mov	r3, r0
 800181c:	4a08      	ldr	r2, [pc, #32]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 800181e:	6013      	str	r3, [r2, #0]

	return Press;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <_Z15BMP180_GetPressi+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	ee07 3a90 	vmov	s15, r3
 8001828:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001838:	20000238 	.word	0x20000238
 800183c:	20000230 	.word	0x20000230
 8001840:	2000023c 	.word	0x2000023c
 8001844:	2000021c 	.word	0x2000021c
 8001848:	ffffe343 	.word	0xffffe343
 800184c:	20000220 	.word	0x20000220

08001850 <_Z13BMP180_GetAlti>:


float BMP180_GetAlt (int oss)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	BMP180_GetPress (oss);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fd75 	bl	8001348 <_Z15BMP180_GetPressi>
	return 44330*(1-(pow((Press/(float)atmPress), 0.19029495718)));
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <_Z13BMP180_GetAlti+0x80>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	ee07 3a90 	vmov	s15, r3
 8001866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80018d4 <_Z13BMP180_GetAlti+0x84>
 800186e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001872:	ed9f 1b13 	vldr	d1, [pc, #76]	; 80018c0 <_Z13BMP180_GetAlti+0x70>
 8001876:	eeb0 0a47 	vmov.f32	s0, s14
 800187a:	f000 f855 	bl	8001928 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800187e:	ec53 2b10 	vmov	r2, r3, d0
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	4914      	ldr	r1, [pc, #80]	; (80018d8 <_Z13BMP180_GetAlti+0x88>)
 8001888:	f7fe fcfe 	bl	8000288 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	a30c      	add	r3, pc, #48	; (adr r3, 80018c8 <_Z13BMP180_GetAlti+0x78>)
 8001896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189a:	f7fe fead 	bl	80005f8 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f99f 	bl	8000be8 <__aeabi_d2f>
 80018aa:	4603      	mov	r3, r0
 80018ac:	ee07 3a90 	vmov	s15, r3
}
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	f3af 8000 	nop.w
 80018c0:	ccd745e4 	.word	0xccd745e4
 80018c4:	3fc85b95 	.word	0x3fc85b95
 80018c8:	00000000 	.word	0x00000000
 80018cc:	40e5a540 	.word	0x40e5a540
 80018d0:	2000023c 	.word	0x2000023c
 80018d4:	47c8c800 	.word	0x47c8c800
 80018d8:	3ff00000 	.word	0x3ff00000

080018dc <_Z12BMP180_Startv>:

void BMP180_Start (void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	read_calliberation_data();
 80018e0:	f7ff fb54 	bl	8000f8c <_Z23read_calliberation_datav>
}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80018e8:	b5b0      	push	{r4, r5, r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7fe fe16 	bl	8000524 <__aeabi_i2d>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
 80018fc:	6838      	ldr	r0, [r7, #0]
 80018fe:	f7fe fe11 	bl	8000524 <__aeabi_i2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	ec43 2b11 	vmov	d1, r2, r3
 800190a:	ec45 4b10 	vmov	d0, r4, r5
 800190e:	f007 feeb 	bl	80096e8 <pow>
 8001912:	eeb0 7a40 	vmov.f32	s14, s0
 8001916:	eef0 7a60 	vmov.f32	s15, s1
    }
 800191a:	eeb0 0a47 	vmov.f32	s0, s14
 800191e:	eef0 0a67 	vmov.f32	s1, s15
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bdb0      	pop	{r4, r5, r7, pc}

08001928 <_ZSt3powIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001932:	ed87 1b00 	vstr	d1, [r7]
      return pow(__type(__x), __type(__y));
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7fe fe06 	bl	8000548 <__aeabi_f2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	ed97 1b00 	vldr	d1, [r7]
 8001944:	ec43 2b10 	vmov	d0, r2, r3
 8001948:	f007 fece 	bl	80096e8 <pow>
 800194c:	eeb0 7a40 	vmov.f32	s14, s0
 8001950:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001954:	eeb0 0a47 	vmov.f32	s0, s14
 8001958:	eef0 0a67 	vmov.f32	s1, s15
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001966:	f003 f976 	bl	8004c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800196a:	f000 f80f 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196e:	f000 f943 	bl	8001bf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001972:	f000 f91b 	bl	8001bac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001976:	f000 f8e9 	bl	8001b4c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800197a:	f000 f899 	bl	8001ab0 <MX_TIM2_Init>
  MX_I2C1_Init();
 800197e:	f000 f857 	bl	8001a30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8001982:	f001 ff99 	bl	80038b8 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 8001986:	f001 ffed 	bl	8003964 <loop>
 800198a:	e7fc      	b.n	8001986 <main+0x24>

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	2244      	movs	r2, #68	; 0x44
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f008 fdfe 	bl	800a59c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	463b      	mov	r3, r7
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80019ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019b2:	f004 fd3f 	bl	8006434 <HAL_PWREx_ControlVoltageScaling>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019bc:	f000 f94c 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019c0:	2310      	movs	r3, #16
 80019c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019c4:	2301      	movs	r3, #1
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019cc:	2360      	movs	r3, #96	; 0x60
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80019d4:	2301      	movs	r3, #1
 80019d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80019dc:	2328      	movs	r3, #40	; 0x28
 80019de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80019e4:	2302      	movs	r3, #2
 80019e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80019e8:	2302      	movs	r3, #2
 80019ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fd75 	bl	80064e0 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019fc:	f000 f92c 	bl	8001c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2303      	movs	r3, #3
 8001a06:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	2104      	movs	r1, #4
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f005 f949 	bl	8006cb0 <HAL_RCC_ClockConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001a24:	f000 f918 	bl	8001c58 <Error_Handler>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3758      	adds	r7, #88	; 0x58
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <MX_I2C1_Init+0x78>)
 8001a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001a3a:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <MX_I2C1_Init+0x7c>)
 8001a3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a40:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a6a:	480e      	ldr	r0, [pc, #56]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a6c:	f003 fed8 	bl	8005820 <HAL_I2C_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a76:	f000 f8ef 	bl	8001c58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4809      	ldr	r0, [pc, #36]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a7e:	f004 fc33 	bl	80062e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a88:	f000 f8e6 	bl	8001c58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_I2C1_Init+0x74>)
 8001a90:	f004 fc75 	bl	800637e <HAL_I2CEx_ConfigDigitalFilter>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a9a:	f000 f8dd 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000244 	.word	0x20000244
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	10909cec 	.word	0x10909cec

08001ab0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0310 	add.w	r3, r7, #16
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ad4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1a      	ldr	r3, [pc, #104]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ae2:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b17      	ldr	r3, [pc, #92]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001af6:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001af8:	f005 ff9c 	bl	8007a34 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b02:	f000 f8a9 	bl	8001c58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	480d      	ldr	r0, [pc, #52]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b14:	f005 ffe5 	bl	8007ae2 <HAL_TIM_ConfigClockSource>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b1e:	f000 f89b 	bl	8001c58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <MX_TIM2_Init+0x98>)
 8001b30:	f006 f9d4 	bl	8007edc <HAL_TIMEx_MasterConfigSynchronization>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b3a:	f000 f88d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000290 	.word	0x20000290

08001b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b52:	4a15      	ldr	r2, [pc, #84]	; (8001ba8 <MX_USART2_UART_Init+0x5c>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b58:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_USART2_UART_Init+0x58>)
 8001b90:	f006 fa2c 	bl	8007fec <HAL_UART_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b9a:	f000 f85d 	bl	8001c58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200002dc 	.word	0x200002dc
 8001ba8:	40004400 	.word	0x40004400

08001bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bb2:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <MX_DMA_Init+0x48>)
 8001bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <MX_DMA_Init+0x48>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <MX_DMA_Init+0x48>)
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2010      	movs	r0, #16
 8001bd0:	f003 f9b5 	bl	8004f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001bd4:	2010      	movs	r0, #16
 8001bd6:	f003 f9ce 	bl	8004f76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2011      	movs	r0, #17
 8001be0:	f003 f9ad 	bl	8004f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001be4:	2011      	movs	r0, #17
 8001be6:	f003 f9c6 	bl	8004f76 <HAL_NVIC_EnableIRQ>

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c02:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_GPIO_Init+0x5c>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]

}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c5c:	b672      	cpsid	i
}
 8001c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <Error_Handler+0x8>

08001c62 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	0800d684 	.word	0x0800d684

08001ca4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
      data()
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff ffe8 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff ffcf 	bl	8001c62 <_ZN3ros4TimeC1Ev>
    {
    }
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	0800d66c 	.word	0x0800d66c

08001cd4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6859      	ldr	r1, [r3, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	b2ca      	uxtb	r2, r1
 8001cee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	0a19      	lsrs	r1, r3, #8
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	b2ca      	uxtb	r2, r1
 8001d00:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	0c19      	lsrs	r1, r3, #16
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b2ca      	uxtb	r2, r1
 8001d12:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0e19      	lsrs	r1, r3, #24
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3303      	adds	r3, #3
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	4413      	add	r3, r2
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	b2ca      	uxtb	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	0a19      	lsrs	r1, r3, #8
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	3301      	adds	r3, #1
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	b2ca      	uxtb	r2, r1
 8001d4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	0c19      	lsrs	r1, r3, #16
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	3302      	adds	r3, #2
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	4413      	add	r3, r2
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	0e19      	lsrs	r1, r3, #24
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	3303      	adds	r3, #3
 8001d68:	683a      	ldr	r2, [r7, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	b2ca      	uxtb	r2, r1
 8001d6e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3304      	adds	r3, #4
 8001d74:	60fb      	str	r3, [r7, #12]
      return offset;
 8001d76:	68fb      	ldr	r3, [r7, #12]
    }
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	6839      	ldr	r1, [r7, #0]
 8001daa:	440b      	add	r3, r1
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	6839      	ldr	r1, [r7, #0]
 8001dc0:	440b      	add	r3, r1
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	3303      	adds	r3, #3
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	440b      	add	r3, r1
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	061b      	lsls	r3, r3, #24
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	3304      	adds	r3, #4
 8001de6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	4413      	add	r3, r2
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	440b      	add	r3, r1
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	021b      	lsls	r3, r3, #8
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	3302      	adds	r3, #2
 8001e14:	6839      	ldr	r1, [r7, #0]
 8001e16:	440b      	add	r3, r1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	041b      	lsls	r3, r3, #16
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	3303      	adds	r3, #3
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    }
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	0800d374 	.word	0x0800d374

08001e68 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	0800d384 	.word	0x0800d384

08001e84 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fef8 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	809a      	strh	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a09      	ldr	r2, [pc, #36]	; (8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a07      	ldr	r2, [pc, #28]	; (8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001eb0:	611a      	str	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	615a      	str	r2, [r3, #20]
    {
    }
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	0800d654 	.word	0x0800d654
 8001ec8:	0800d3a8 	.word	0x0800d3a8

08001ecc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b088      	sub	sp, #32
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8899      	ldrh	r1, [r3, #4]
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	b2ca      	uxtb	r2, r1
 8001ee6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	889b      	ldrh	r3, [r3, #4]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	b299      	uxth	r1, r3
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b2ca      	uxtb	r2, r1
 8001efa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3302      	adds	r3, #2
 8001f00:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe f962 	bl	80001d0 <strlen>
 8001f0c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	69b9      	ldr	r1, [r7, #24]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f001 fd84 	bl	8003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	18d0      	adds	r0, r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f008 fb26 	bl	800a580 <memcpy>
      offset += length_topic_name;
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	4413      	add	r3, r2
 8001f3a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe f945 	bl	80001d0 <strlen>
 8001f46:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	6979      	ldr	r1, [r7, #20]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 fd67 	bl	8003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	18d0      	adds	r0, r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f008 fb09 	bl	800a580 <memcpy>
      offset += length_message_type;
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4413      	add	r3, r2
 8001f74:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe f928 	bl	80001d0 <strlen>
 8001f80:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	4413      	add	r3, r2
 8001f88:	6939      	ldr	r1, [r7, #16]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f001 fd4a 	bl	8003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3304      	adds	r3, #4
 8001f94:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	18d0      	adds	r0, r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f008 faec 	bl	800a580 <memcpy>
      offset += length_md5sum;
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001fb6:	68f9      	ldr	r1, [r7, #12]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	b2ca      	uxtb	r2, r1
 8001fc0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0a19      	lsrs	r1, r3, #8
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	4413      	add	r3, r2
 8001fce:	b2ca      	uxtb	r2, r1
 8001fd0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0c19      	lsrs	r1, r3, #16
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3302      	adds	r3, #2
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b2ca      	uxtb	r2, r1
 8001fe0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0e19      	lsrs	r1, r3, #24
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3303      	adds	r3, #3
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	61fb      	str	r3, [r7, #28]
      return offset;
 8001ff8:	69fb      	ldr	r3, [r7, #28]
    }
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3720      	adds	r7, #32
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002002:	b580      	push	{r7, lr}
 8002004:	b08a      	sub	sp, #40	; 0x28
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4413      	add	r3, r2
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	889b      	ldrh	r3, [r3, #4]
 8002022:	b21a      	sxth	r2, r3
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	3301      	adds	r3, #1
 8002028:	6839      	ldr	r1, [r7, #0]
 800202a:	440b      	add	r3, r1
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21b      	sxth	r3, r3
 8002032:	4313      	orrs	r3, r2
 8002034:	b21b      	sxth	r3, r3
 8002036:	b29a      	uxth	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	3302      	adds	r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	441a      	add	r2, r3
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f001 fd06 	bl	8003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	3304      	adds	r3, #4
 8002058:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	4413      	add	r3, r2
 8002064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002066:	429a      	cmp	r2, r3
 8002068:	d20c      	bcs.n	8002084 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	441a      	add	r2, r3
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	6839      	ldr	r1, [r7, #0]
 8002076:	440b      	add	r3, r1
 8002078:	7812      	ldrb	r2, [r2, #0]
 800207a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	3301      	adds	r3, #1
 8002080:	627b      	str	r3, [r7, #36]	; 0x24
 8002082:	e7ec      	b.n	800205e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	4413      	add	r3, r2
 800208a:	3b01      	subs	r3, #1
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	3b01      	subs	r3, #1
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	441a      	add	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	4413      	add	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	441a      	add	r2, r3
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f001 fcd3 	bl	8003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	3304      	adds	r3, #4
 80020be:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	623b      	str	r3, [r7, #32]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	6a3a      	ldr	r2, [r7, #32]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d20c      	bcs.n	80020ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	441a      	add	r2, r3
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	3b01      	subs	r3, #1
 80020da:	6839      	ldr	r1, [r7, #0]
 80020dc:	440b      	add	r3, r1
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	3301      	adds	r3, #1
 80020e6:	623b      	str	r3, [r7, #32]
 80020e8:	e7ec      	b.n	80020c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	3b01      	subs	r3, #1
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	4413      	add	r3, r2
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	441a      	add	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	4413      	add	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	441a      	add	r2, r3
 8002114:	f107 030c 	add.w	r3, r7, #12
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fca0 	bl	8003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	3304      	adds	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	4413      	add	r3, r2
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d20c      	bcs.n	8002150 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	441a      	add	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3b01      	subs	r3, #1
 8002140:	6839      	ldr	r1, [r7, #0]
 8002142:	440b      	add	r3, r1
 8002144:	7812      	ldrb	r2, [r2, #0]
 8002146:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	3301      	adds	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e7ec      	b.n	800212a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	4413      	add	r3, r2
 8002156:	3b01      	subs	r3, #1
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	4413      	add	r3, r2
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3b01      	subs	r3, #1
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	441a      	add	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	6839      	ldr	r1, [r7, #0]
 800217e:	440a      	add	r2, r1
 8002180:	7812      	ldrb	r2, [r2, #0]
 8002182:	4313      	orrs	r3, r2
 8002184:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	3301      	adds	r3, #1
 800218c:	6839      	ldr	r1, [r7, #0]
 800218e:	440b      	add	r3, r1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4313      	orrs	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	3302      	adds	r3, #2
 800219e:	6839      	ldr	r1, [r7, #0]
 80021a0:	440b      	add	r3, r1
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	3303      	adds	r3, #3
 80021b0:	6839      	ldr	r1, [r7, #0]
 80021b2:	440b      	add	r3, r1
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	061b      	lsls	r3, r3, #24
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	3304      	adds	r3, #4
 80021c6:	61bb      	str	r3, [r7, #24]
     return offset;
 80021c8:	69bb      	ldr	r3, [r7, #24]
    }
 80021ca:	4618      	mov	r0, r3
 80021cc:	3728      	adds	r7, #40	; 0x28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	4b03      	ldr	r3, [pc, #12]	; (80021ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80021de:	4618      	mov	r0, r3
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	0800d3ac 	.word	0x0800d3ac

080021f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80021fa:	4618      	mov	r0, r3
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	0800d3c8 	.word	0x0800d3c8

0800220c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fd34 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	711a      	strb	r2, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a04      	ldr	r2, [pc, #16]	; (800223c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800222c:	609a      	str	r2, [r3, #8]
    {
    }
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	0800d63c 	.word	0x0800d63c
 800223c:	0800d3a8 	.word	0x0800d3a8

08002240 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4413      	add	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	7912      	ldrb	r2, [r2, #4]
 8002258:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7fd ffb3 	bl	80001d0 <strlen>
 800226a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	4413      	add	r3, r2
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f001 fbd5 	bl	8003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	3304      	adds	r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	18d0      	adds	r0, r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	4619      	mov	r1, r3
 800228e:	f008 f977 	bl	800a580 <memcpy>
      offset += length_msg;
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	4413      	add	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
      return offset;
 800229a:	68fb      	ldr	r3, [r7, #12]
    }
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	3301      	adds	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	441a      	add	r2, r3
 80022ca:	f107 030c 	add.w	r3, r7, #12
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 fbc5 	bl	8003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3304      	adds	r3, #4
 80022da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4413      	add	r3, r2
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d20c      	bcs.n	8002306 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	441a      	add	r2, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	6839      	ldr	r1, [r7, #0]
 80022f8:	440b      	add	r3, r1
 80022fa:	7812      	ldrb	r2, [r2, #0]
 80022fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3301      	adds	r3, #1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e7ec      	b.n	80022e0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	3b01      	subs	r3, #1
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	4413      	add	r3, r2
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	3b01      	subs	r3, #1
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	441a      	add	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
     return offset;
 800232a:	693b      	ldr	r3, [r7, #16]
    }
 800232c:	4618      	mov	r0, r3
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	0800d3ec 	.word	0x0800d3ec

08002350 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	0800d400 	.word	0x0800d400

0800236c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fc84 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 800237c:	4a0c      	ldr	r2, [pc, #48]	; (80023b0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	0800d624 	.word	0x0800d624

080023b4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	b2ca      	uxtb	r2, r1
 80023ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	0a19      	lsrs	r1, r3, #8
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	3301      	adds	r3, #1
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	4413      	add	r3, r2
 80023de:	b2ca      	uxtb	r2, r1
 80023e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c19      	lsrs	r1, r3, #16
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	3302      	adds	r3, #2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	0e19      	lsrs	r1, r3, #24
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	3303      	adds	r3, #3
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	4413      	add	r3, r2
 8002402:	b2ca      	uxtb	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002408:	3304      	adds	r3, #4
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	6a3a      	ldr	r2, [r7, #32]
 8002416:	429a      	cmp	r2, r3
 8002418:	d22b      	bcs.n	8002472 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	4413      	add	r3, r2
 8002430:	b2ca      	uxtb	r2, r1
 8002432:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	0a19      	lsrs	r1, r3, #8
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	3301      	adds	r3, #1
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	4413      	add	r3, r2
 8002440:	b2ca      	uxtb	r2, r1
 8002442:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	0c19      	lsrs	r1, r3, #16
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	3302      	adds	r3, #2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	4413      	add	r3, r2
 8002450:	b2ca      	uxtb	r2, r1
 8002452:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	0e19      	lsrs	r1, r3, #24
 8002458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245a:	3303      	adds	r3, #3
 800245c:	683a      	ldr	r2, [r7, #0]
 800245e:	4413      	add	r3, r2
 8002460:	b2ca      	uxtb	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3304      	adds	r3, #4
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	3301      	adds	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	e7ce      	b.n	8002410 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6919      	ldr	r1, [r3, #16]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	0a19      	lsrs	r1, r3, #8
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	3301      	adds	r3, #1
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4413      	add	r3, r2
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	0c19      	lsrs	r1, r3, #16
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	3302      	adds	r3, #2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	b2ca      	uxtb	r2, r1
 80024a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	0e19      	lsrs	r1, r3, #24
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	3303      	adds	r3, #3
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	3304      	adds	r3, #4
 80024ba:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d22b      	bcs.n	8002522 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699a      	ldr	r2, [r3, #24]
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80024d8:	68f9      	ldr	r1, [r7, #12]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	b2ca      	uxtb	r2, r1
 80024e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0a19      	lsrs	r1, r3, #8
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3301      	adds	r3, #1
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	b2ca      	uxtb	r2, r1
 80024f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	0c19      	lsrs	r1, r3, #16
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	3302      	adds	r3, #2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	b2ca      	uxtb	r2, r1
 8002502:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	0e19      	lsrs	r1, r3, #24
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	3303      	adds	r3, #3
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	4413      	add	r3, r2
 8002510:	b2ca      	uxtb	r2, r1
 8002512:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	3304      	adds	r3, #4
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	3301      	adds	r3, #1
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	e7ce      	b.n	80024c0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69d9      	ldr	r1, [r3, #28]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	0a19      	lsrs	r1, r3, #8
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	0c19      	lsrs	r1, r3, #16
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3302      	adds	r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	0e19      	lsrs	r1, r3, #24
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3303      	adds	r3, #3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	b2ca      	uxtb	r2, r1
 8002564:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3304      	adds	r3, #4
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800256c:	2300      	movs	r3, #0
 800256e:	61bb      	str	r3, [r7, #24]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	429a      	cmp	r2, r3
 8002578:	d228      	bcs.n	80025cc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd fe22 	bl	80001d0 <strlen>
 800258c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	4413      	add	r3, r2
 8002594:	6979      	ldr	r1, [r7, #20]
 8002596:	4618      	mov	r0, r3
 8002598:	f001 fa44 	bl	8003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800259c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259e:	3304      	adds	r3, #4
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	18d0      	adds	r0, r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4619      	mov	r1, r3
 80025b8:	f007 ffe2 	bl	800a580 <memcpy>
      offset += length_stringsi;
 80025bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	4413      	add	r3, r2
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3301      	adds	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
 80025ca:	e7d1      	b.n	8002570 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80025ce:	4618      	mov	r0, r3
 80025d0:	3728      	adds	r7, #40	; 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b08e      	sub	sp, #56	; 0x38
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
 80025de:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80025e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80025ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f0:	3301      	adds	r3, #1
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	4413      	add	r3, r2
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	6a3a      	ldr	r2, [r7, #32]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	3302      	adds	r3, #2
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	4413      	add	r3, r2
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	041b      	lsls	r3, r3, #16
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	4313      	orrs	r3, r2
 8002610:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002614:	3303      	adds	r3, #3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	4413      	add	r3, r2
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	061b      	lsls	r3, r3, #24
 800261e:	6a3a      	ldr	r2, [r7, #32]
 8002620:	4313      	orrs	r3, r2
 8002622:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002626:	3304      	adds	r3, #4
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	6a3a      	ldr	r2, [r7, #32]
 8002630:	429a      	cmp	r2, r3
 8002632:	d90a      	bls.n	800264a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4619      	mov	r1, r3
 800263e:	4610      	mov	r0, r2
 8002640:	f008 fc1e 	bl	800ae80 <realloc>
 8002644:	4602      	mov	r2, r0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002650:	2300      	movs	r3, #0
 8002652:	633b      	str	r3, [r7, #48]	; 0x30
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800265a:	429a      	cmp	r2, r3
 800265c:	d236      	bcs.n	80026cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002666:	6839      	ldr	r1, [r7, #0]
 8002668:	440a      	add	r2, r1
 800266a:	7812      	ldrb	r2, [r2, #0]
 800266c:	4313      	orrs	r3, r2
 800266e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002670:	697a      	ldr	r2, [r7, #20]
 8002672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002674:	3301      	adds	r3, #1
 8002676:	6839      	ldr	r1, [r7, #0]
 8002678:	440b      	add	r3, r1
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	021b      	lsls	r3, r3, #8
 800267e:	4313      	orrs	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002686:	3302      	adds	r3, #2
 8002688:	6839      	ldr	r1, [r7, #0]
 800268a:	440b      	add	r3, r1
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	041b      	lsls	r3, r3, #16
 8002690:	4313      	orrs	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002698:	3303      	adds	r3, #3
 800269a:	6839      	ldr	r1, [r7, #0]
 800269c:	440b      	add	r3, r1
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	061b      	lsls	r3, r3, #24
 80026a2:	4313      	orrs	r3, r2
 80026a4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80026ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ae:	3304      	adds	r3, #4
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68da      	ldr	r2, [r3, #12]
 80026b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	3208      	adds	r2, #8
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	3301      	adds	r3, #1
 80026c8:	633b      	str	r3, [r7, #48]	; 0x30
 80026ca:	e7c3      	b.n	8002654 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80026cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	4413      	add	r3, r2
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80026d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d8:	3301      	adds	r3, #1
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	021b      	lsls	r3, r3, #8
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80026e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026ea:	3302      	adds	r3, #2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80026fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fc:	3303      	adds	r3, #3
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	061b      	lsls	r3, r3, #24
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4313      	orrs	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800270c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800270e:	3304      	adds	r3, #4
 8002710:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	69fa      	ldr	r2, [r7, #28]
 8002718:	429a      	cmp	r2, r3
 800271a:	d90a      	bls.n	8002732 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699a      	ldr	r2, [r3, #24]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4619      	mov	r1, r3
 8002726:	4610      	mov	r0, r2
 8002728:	f008 fbaa 	bl	800ae80 <realloc>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002738:	2300      	movs	r3, #0
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002742:	429a      	cmp	r2, r3
 8002744:	d236      	bcs.n	80027b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	440a      	add	r2, r1
 8002752:	7812      	ldrb	r2, [r2, #0]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275c:	3301      	adds	r3, #1
 800275e:	6839      	ldr	r1, [r7, #0]
 8002760:	440b      	add	r3, r1
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	3302      	adds	r3, #2
 8002770:	6839      	ldr	r1, [r7, #0]
 8002772:	440b      	add	r3, r1
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	041b      	lsls	r3, r3, #16
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	3303      	adds	r3, #3
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	440b      	add	r3, r1
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002796:	3304      	adds	r3, #4
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	3214      	adds	r2, #20
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	3301      	adds	r3, #1
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	e7c3      	b.n	800273c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4413      	add	r3, r2
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80027be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c0:	3301      	adds	r3, #1
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4413      	add	r3, r2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80027d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d2:	3302      	adds	r3, #2
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	4413      	add	r3, r2
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80027e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e4:	3303      	adds	r3, #3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4413      	add	r3, r2
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 80027f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f6:	3304      	adds	r3, #4
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	429a      	cmp	r2, r3
 8002802:	d90a      	bls.n	800281a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	4619      	mov	r1, r3
 800280e:	4610      	mov	r0, r2
 8002810:	f008 fb36 	bl	800ae80 <realloc>
 8002814:	4602      	mov	r2, r0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282a:	429a      	cmp	r2, r3
 800282c:	d23f      	bcs.n	80028ae <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800282e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	441a      	add	r2, r3
 8002834:	f107 030c 	add.w	r3, r7, #12
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f001 f910 	bl	8003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002842:	3304      	adds	r3, #4
 8002844:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
 800284a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002852:	429a      	cmp	r2, r3
 8002854:	d20c      	bcs.n	8002870 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	441a      	add	r2, r3
 800285c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285e:	3b01      	subs	r3, #1
 8002860:	6839      	ldr	r1, [r7, #0]
 8002862:	440b      	add	r3, r1
 8002864:	7812      	ldrb	r2, [r2, #0]
 8002866:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286a:	3301      	adds	r3, #1
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
 800286e:	e7ec      	b.n	800284a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4413      	add	r3, r2
 8002876:	3b01      	subs	r3, #1
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	2200      	movs	r2, #0
 800287e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	3b01      	subs	r3, #1
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	441a      	add	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 800288c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4413      	add	r3, r2
 8002892:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	3220      	adds	r2, #32
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80028a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028a8:	3301      	adds	r3, #1
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ac:	e7ba      	b.n	8002824 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80028ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80028b0:	4618      	mov	r0, r3
 80028b2:	3738      	adds	r7, #56	; 0x38
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	4b03      	ldr	r3, [pc, #12]	; (80028d0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80028c2:	4618      	mov	r0, r3
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	0800d560 	.word	0x0800d560

080028d4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	0800d424 	.word	0x0800d424

080028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	611a      	str	r2, [r3, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4618      	mov	r0, r3
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68d8      	ldr	r0, [r3, #12]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6891      	ldr	r1, [r2, #8]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4798      	blx	r3
 800293c:	4603      	mov	r3, r0
  };
 800293e:	4618      	mov	r0, r3
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
  }
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002974:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <_ZN13STM32HardwareC1Ev+0x34>)
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	200002dc 	.word	0x200002dc

080029bc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f804 	bl	80029d2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3304      	adds	r3, #4
 80029e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e6:	4619      	mov	r1, r3
 80029e8:	f005 fbde 	bl	80081a8 <HAL_UART_Receive_DMA>
    }
 80029ec:	bf00      	nop
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN13STM32Hardware4readEv>:

    int read(){
 80029f4:	b590      	push	{r4, r7, lr}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
      int c = -1;
 80029fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a00:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffa8 	bl	800295e <_ZN13STM32Hardware10getRdmaIndEv>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	429c      	cmp	r4, r3
 8002a12:	bf14      	ite	ne
 8002a14:	2301      	movne	r3, #1
 8002a16:	2300      	moveq	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a24:	1c59      	adds	r1, r3, #1
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	4413      	add	r3, r2
 8002a30:	791b      	ldrb	r3, [r3, #4]
 8002a32:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002a3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002a44:	68fb      	ldr	r3, [r7, #12]
    }
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd90      	pop	{r4, r7, pc}
	...

08002a50 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	d108      	bne.n	8002a74 <_ZN13STM32Hardware5flushEv+0x24>
 8002a62:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	f083 0301 	eor.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <_ZN13STM32Hardware5flushEv+0x24>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <_ZN13STM32Hardware5flushEv+0x26>
 8002a74:	2300      	movs	r3, #0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d03f      	beq.n	8002afa <_ZN13STM32Hardware5flushEv+0xaa>
        mutex = true;
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d031      	beq.n	8002af4 <_ZN13STM32Hardware5flushEv+0xa4>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d20a      	bcs.n	8002ab6 <_ZN13STM32Hardware5flushEv+0x66>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	e006      	b.n	8002ac4 <_ZN13STM32Hardware5flushEv+0x74>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ad0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	89fa      	ldrh	r2, [r7, #14]
 8002ada:	4619      	mov	r1, r3
 8002adc:	f005 fad4 	bl	8008088 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <_ZN13STM32Hardware5flushEv+0xb4>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
      }
    }
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200003f0 	.word	0x200003f0

08002b08 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
      int n = length;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1e:	bfa8      	it	ge
 8002b20:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002b24:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b2c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	bf28      	it	cs
 8002b36:	4613      	movcs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002b40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	4413      	add	r3, r2
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f007 fd17 	bl	800a580 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d00b      	beq.n	8002b86 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	68ba      	ldr	r2, [r7, #8]
 8002b78:	18d1      	adds	r1, r2, r3
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	461a      	mov	r2, r3
 8002b82:	f007 fcfd 	bl	800a580 <memcpy>
      }

      flush();
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f7ff ff62 	bl	8002a50 <_ZN13STM32Hardware5flushEv>
    }
 8002b8c:	bf00      	nop
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	f002 f8c4 	bl	8004d28 <HAL_GetTick>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b082      	sub	sp, #8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
      data("")
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f864 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8002bbc:	4a05      	ldr	r2, [pc, #20]	; (8002bd4 <_ZN8std_msgs6StringC1Ev+0x28>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8002bc6:	605a      	str	r2, [r3, #4]
    {
    }
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	0800d5e0 	.word	0x0800d5e0
 8002bd8:	0800d3a8 	.word	0x0800d3a8

08002bdc <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7fd faee 	bl	80001d0 <strlen>
 8002bf4:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 ff10 	bl	8003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3304      	adds	r3, #4
 8002c08:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	18d0      	adds	r0, r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	4619      	mov	r1, r3
 8002c18:	f007 fcb2 	bl	800a580 <memcpy>
      offset += length_data;
 8002c1c:	68fa      	ldr	r2, [r7, #12]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c24:	68fb      	ldr	r3, [r7, #12]
    }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	441a      	add	r2, r3
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	4611      	mov	r1, r2
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 ff09 	bl	8003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	3304      	adds	r3, #4
 8002c52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d20c      	bcs.n	8002c7e <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	441a      	add	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	6839      	ldr	r1, [r7, #0]
 8002c70:	440b      	add	r3, r1
 8002c72:	7812      	ldrb	r2, [r2, #0]
 8002c74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
 8002c7c:	e7ec      	b.n	8002c58 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	3b01      	subs	r3, #1
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	441a      	add	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
     return offset;
 8002ca2:	693b      	ldr	r3, [r7, #16]
    }
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3718      	adds	r7, #24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <_ZN8std_msgs6String7getTypeEv+0x18>)
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	0800d448 	.word	0x0800d448

08002cc8 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	0800d458 	.word	0x0800d458

08002ce4 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ffc8 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8002cf4:	4a0e      	ldr	r2, [pc, #56]	; (8002d30 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	f04f 0300 	mov.w	r3, #0
 8002d04:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	0800d5c8 	.word	0x0800d5c8

08002d34 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002d34:	b480      	push	{r7}
 8002d36:	b08b      	sub	sp, #44	; 0x2c
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d48:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002d4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d52:	6838      	ldr	r0, [r7, #0]
 8002d54:	4401      	add	r1, r0
 8002d56:	b2d3      	uxtb	r3, r2
 8002d58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002d5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	0a02      	lsrs	r2, r0, #8
 8002d68:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d6c:	0a0b      	lsrs	r3, r1, #8
 8002d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d70:	3101      	adds	r1, #1
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	4401      	add	r1, r0
 8002d76:	b2d3      	uxtb	r3, r2
 8002d78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002d7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	0c02      	lsrs	r2, r0, #16
 8002d88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d8c:	0c0b      	lsrs	r3, r1, #16
 8002d8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d90:	3102      	adds	r1, #2
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	4401      	add	r1, r0
 8002d96:	b2d3      	uxtb	r3, r2
 8002d98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002d9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	0e02      	lsrs	r2, r0, #24
 8002da8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002dac:	0e0b      	lsrs	r3, r1, #24
 8002dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002db0:	3103      	adds	r1, #3
 8002db2:	6838      	ldr	r0, [r7, #0]
 8002db4:	4401      	add	r1, r0
 8002db6:	b2d3      	uxtb	r3, r2
 8002db8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002dba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dbe:	f04f 0200 	mov.w	r2, #0
 8002dc2:	f04f 0300 	mov.w	r3, #0
 8002dc6:	000a      	movs	r2, r1
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dcc:	3104      	adds	r1, #4
 8002dce:	6838      	ldr	r0, [r7, #0]
 8002dd0:	4401      	add	r1, r0
 8002dd2:	b2d3      	uxtb	r3, r2
 8002dd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002dd6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	f04f 0300 	mov.w	r3, #0
 8002de2:	0a0a      	lsrs	r2, r1, #8
 8002de4:	2300      	movs	r3, #0
 8002de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de8:	3105      	adds	r1, #5
 8002dea:	6838      	ldr	r0, [r7, #0]
 8002dec:	4401      	add	r1, r0
 8002dee:	b2d3      	uxtb	r3, r2
 8002df0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002df2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	0c0a      	lsrs	r2, r1, #16
 8002e00:	2300      	movs	r3, #0
 8002e02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e04:	3106      	adds	r1, #6
 8002e06:	6838      	ldr	r0, [r7, #0]
 8002e08:	4401      	add	r1, r0
 8002e0a:	b2d3      	uxtb	r3, r2
 8002e0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002e0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	0e0a      	lsrs	r2, r1, #24
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e20:	3107      	adds	r1, #7
 8002e22:	6838      	ldr	r0, [r7, #0]
 8002e24:	4401      	add	r1, r0
 8002e26:	b2d3      	uxtb	r3, r2
 8002e28:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e36:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002e3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e40:	6838      	ldr	r0, [r7, #0]
 8002e42:	4401      	add	r1, r0
 8002e44:	b2d3      	uxtb	r3, r2
 8002e46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002e48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e4c:	f04f 0200 	mov.w	r2, #0
 8002e50:	f04f 0300 	mov.w	r3, #0
 8002e54:	0a02      	lsrs	r2, r0, #8
 8002e56:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e5a:	0a0b      	lsrs	r3, r1, #8
 8002e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5e:	3101      	adds	r1, #1
 8002e60:	6838      	ldr	r0, [r7, #0]
 8002e62:	4401      	add	r1, r0
 8002e64:	b2d3      	uxtb	r3, r2
 8002e66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002e68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	0c02      	lsrs	r2, r0, #16
 8002e76:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e7a:	0c0b      	lsrs	r3, r1, #16
 8002e7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7e:	3102      	adds	r1, #2
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	4401      	add	r1, r0
 8002e84:	b2d3      	uxtb	r3, r2
 8002e86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002e88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	0e02      	lsrs	r2, r0, #24
 8002e96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e9a:	0e0b      	lsrs	r3, r1, #24
 8002e9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e9e:	3103      	adds	r1, #3
 8002ea0:	6838      	ldr	r0, [r7, #0]
 8002ea2:	4401      	add	r1, r0
 8002ea4:	b2d3      	uxtb	r3, r2
 8002ea6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002ea8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	000a      	movs	r2, r1
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eba:	3104      	adds	r1, #4
 8002ebc:	6838      	ldr	r0, [r7, #0]
 8002ebe:	4401      	add	r1, r0
 8002ec0:	b2d3      	uxtb	r3, r2
 8002ec2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002ec4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	0a0a      	lsrs	r2, r1, #8
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ed6:	3105      	adds	r1, #5
 8002ed8:	6838      	ldr	r0, [r7, #0]
 8002eda:	4401      	add	r1, r0
 8002edc:	b2d3      	uxtb	r3, r2
 8002ede:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002ee0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	0c0a      	lsrs	r2, r1, #16
 8002eee:	2300      	movs	r3, #0
 8002ef0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef2:	3106      	adds	r1, #6
 8002ef4:	6838      	ldr	r0, [r7, #0]
 8002ef6:	4401      	add	r1, r0
 8002ef8:	b2d3      	uxtb	r3, r2
 8002efa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002efc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	0e0a      	lsrs	r2, r1, #24
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f0e:	3107      	adds	r1, #7
 8002f10:	6838      	ldr	r0, [r7, #0]
 8002f12:	4401      	add	r1, r0
 8002f14:	b2d3      	uxtb	r3, r2
 8002f16:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	3308      	adds	r3, #8
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002f24:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002f28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	4401      	add	r1, r0
 8002f32:	b2d3      	uxtb	r3, r2
 8002f34:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8002f36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	0a02      	lsrs	r2, r0, #8
 8002f44:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f48:	0a0b      	lsrs	r3, r1, #8
 8002f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f4c:	3101      	adds	r1, #1
 8002f4e:	6838      	ldr	r0, [r7, #0]
 8002f50:	4401      	add	r1, r0
 8002f52:	b2d3      	uxtb	r3, r2
 8002f54:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8002f56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	0c02      	lsrs	r2, r0, #16
 8002f64:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f68:	0c0b      	lsrs	r3, r1, #16
 8002f6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6c:	3102      	adds	r1, #2
 8002f6e:	6838      	ldr	r0, [r7, #0]
 8002f70:	4401      	add	r1, r0
 8002f72:	b2d3      	uxtb	r3, r2
 8002f74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	0e02      	lsrs	r2, r0, #24
 8002f84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f88:	0e0b      	lsrs	r3, r1, #24
 8002f8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f8c:	3103      	adds	r1, #3
 8002f8e:	6838      	ldr	r0, [r7, #0]
 8002f90:	4401      	add	r1, r0
 8002f92:	b2d3      	uxtb	r3, r2
 8002f94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002f96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	000a      	movs	r2, r1
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fa8:	3104      	adds	r1, #4
 8002faa:	6838      	ldr	r0, [r7, #0]
 8002fac:	4401      	add	r1, r0
 8002fae:	b2d3      	uxtb	r3, r2
 8002fb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	0a0a      	lsrs	r2, r1, #8
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc4:	3105      	adds	r1, #5
 8002fc6:	6838      	ldr	r0, [r7, #0]
 8002fc8:	4401      	add	r1, r0
 8002fca:	b2d3      	uxtb	r3, r2
 8002fcc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8002fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fd2:	f04f 0200 	mov.w	r2, #0
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	0c0a      	lsrs	r2, r1, #16
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe0:	3106      	adds	r1, #6
 8002fe2:	6838      	ldr	r0, [r7, #0]
 8002fe4:	4401      	add	r1, r0
 8002fe6:	b2d3      	uxtb	r3, r2
 8002fe8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002fea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fee:	f04f 0200 	mov.w	r2, #0
 8002ff2:	f04f 0300 	mov.w	r3, #0
 8002ff6:	0e0a      	lsrs	r2, r1, #24
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffc:	3107      	adds	r1, #7
 8002ffe:	6838      	ldr	r0, [r7, #0]
 8003000:	4401      	add	r1, r0
 8003002:	b2d3      	uxtb	r3, r2
 8003004:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	3308      	adds	r3, #8
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800300e:	4618      	mov	r0, r3
 8003010:	372c      	adds	r7, #44	; 0x2c
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800301a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800301e:	b0eb      	sub	sp, #428	; 0x1ac
 8003020:	af00      	add	r7, sp, #0
 8003022:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003026:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800303c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003040:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003044:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003048:	4413      	add	r3, r2
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2200      	movs	r2, #0
 8003050:	461c      	mov	r4, r3
 8003052:	4615      	mov	r5, r2
 8003054:	ea40 0804 	orr.w	r8, r0, r4
 8003058:	ea41 0905 	orr.w	r9, r1, r5
 800305c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003060:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003064:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800306e:	4413      	add	r3, r2
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2200      	movs	r2, #0
 8003076:	469a      	mov	sl, r3
 8003078:	4693      	mov	fp, r2
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003086:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800308a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800308e:	ea40 0402 	orr.w	r4, r0, r2
 8003092:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003096:	430b      	orrs	r3, r1
 8003098:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800309c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80030a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80030a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030ac:	1c9a      	adds	r2, r3, #2
 80030ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2200      	movs	r2, #0
 80030ba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80030be:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80030ce:	464c      	mov	r4, r9
 80030d0:	0423      	lsls	r3, r4, #16
 80030d2:	4644      	mov	r4, r8
 80030d4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80030d8:	4644      	mov	r4, r8
 80030da:	0422      	lsls	r2, r4, #16
 80030dc:	ea40 0402 	orr.w	r4, r0, r2
 80030e0:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80030e4:	430b      	orrs	r3, r1
 80030e6:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80030ea:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80030ee:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030f2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030f6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030fa:	1cda      	adds	r2, r3, #3
 80030fc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003100:	4413      	add	r3, r2
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2200      	movs	r2, #0
 8003108:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800310c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003110:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003114:	4623      	mov	r3, r4
 8003116:	0a1b      	lsrs	r3, r3, #8
 8003118:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800311c:	4623      	mov	r3, r4
 800311e:	061b      	lsls	r3, r3, #24
 8003120:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003124:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003128:	4623      	mov	r3, r4
 800312a:	4303      	orrs	r3, r0
 800312c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003130:	462b      	mov	r3, r5
 8003132:	430b      	orrs	r3, r1
 8003134:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003138:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800313c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003140:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003144:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003148:	1d1a      	adds	r2, r3, #4
 800314a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800314e:	4413      	add	r3, r2
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2200      	movs	r2, #0
 8003156:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800315a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800316a:	0023      	movs	r3, r4
 800316c:	2200      	movs	r2, #0
 800316e:	ea40 0402 	orr.w	r4, r0, r2
 8003172:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003176:	430b      	orrs	r3, r1
 8003178:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800317c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003180:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003184:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003188:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800318c:	1d5a      	adds	r2, r3, #5
 800318e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003192:	4413      	add	r3, r2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2200      	movs	r2, #0
 800319a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800319e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80031ae:	0223      	lsls	r3, r4, #8
 80031b0:	2200      	movs	r2, #0
 80031b2:	ea40 0402 	orr.w	r4, r0, r2
 80031b6:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80031ba:	430b      	orrs	r3, r1
 80031bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80031c0:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80031c4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80031c8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031d0:	1d9a      	adds	r2, r3, #6
 80031d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031d6:	4413      	add	r3, r2
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80031e2:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80031f2:	0423      	lsls	r3, r4, #16
 80031f4:	2200      	movs	r2, #0
 80031f6:	ea40 0402 	orr.w	r4, r0, r2
 80031fa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80031fe:	430b      	orrs	r3, r1
 8003200:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003204:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003208:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800320c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003210:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003214:	1dda      	adds	r2, r3, #7
 8003216:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800321a:	4413      	add	r3, r2
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2200      	movs	r2, #0
 8003222:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003226:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003236:	0623      	lsls	r3, r4, #24
 8003238:	2200      	movs	r2, #0
 800323a:	ea40 0402 	orr.w	r4, r0, r2
 800323e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003242:	430b      	orrs	r3, r1
 8003244:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003248:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800324c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003250:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003254:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003258:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800325c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003260:	3308      	adds	r3, #8
 8003262:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003272:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003276:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800327a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800327e:	4413      	add	r3, r2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2200      	movs	r2, #0
 8003286:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800328a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800328e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003292:	4623      	mov	r3, r4
 8003294:	4303      	orrs	r3, r0
 8003296:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800329a:	462b      	mov	r3, r5
 800329c:	430b      	orrs	r3, r1
 800329e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032a2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80032a6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032aa:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032ae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032b8:	4413      	add	r3, r2
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2200      	movs	r2, #0
 80032c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80032c4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80032c8:	f04f 0200 	mov.w	r2, #0
 80032cc:	f04f 0300 	mov.w	r3, #0
 80032d0:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80032d4:	464c      	mov	r4, r9
 80032d6:	0223      	lsls	r3, r4, #8
 80032d8:	4644      	mov	r4, r8
 80032da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032de:	4644      	mov	r4, r8
 80032e0:	0222      	lsls	r2, r4, #8
 80032e2:	ea40 0402 	orr.w	r4, r0, r2
 80032e6:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80032ea:	430b      	orrs	r3, r1
 80032ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032f0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80032f4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032f8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003300:	1c9a      	adds	r2, r3, #2
 8003302:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2200      	movs	r2, #0
 800330e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003312:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003322:	464c      	mov	r4, r9
 8003324:	0423      	lsls	r3, r4, #16
 8003326:	4644      	mov	r4, r8
 8003328:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800332c:	4644      	mov	r4, r8
 800332e:	0422      	lsls	r2, r4, #16
 8003330:	ea40 0402 	orr.w	r4, r0, r2
 8003334:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003338:	430b      	orrs	r3, r1
 800333a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800333e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003342:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003346:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800334a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800334e:	1cda      	adds	r2, r3, #3
 8003350:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003354:	4413      	add	r3, r2
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003360:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003364:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003368:	4623      	mov	r3, r4
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003370:	4623      	mov	r3, r4
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003378:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800337c:	4623      	mov	r3, r4
 800337e:	4303      	orrs	r3, r0
 8003380:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003384:	462b      	mov	r3, r5
 8003386:	430b      	orrs	r3, r1
 8003388:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800338c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003390:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003394:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003398:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800339c:	1d1a      	adds	r2, r3, #4
 800339e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033a2:	4413      	add	r3, r2
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2200      	movs	r2, #0
 80033aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ae:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80033be:	0023      	movs	r3, r4
 80033c0:	2200      	movs	r2, #0
 80033c2:	ea40 0402 	orr.w	r4, r0, r2
 80033c6:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80033ca:	430b      	orrs	r3, r1
 80033cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033d0:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80033d4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033d8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033e0:	1d5a      	adds	r2, r3, #5
 80033e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033e6:	4413      	add	r3, r2
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2200      	movs	r2, #0
 80033ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033f2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003402:	0223      	lsls	r3, r4, #8
 8003404:	2200      	movs	r2, #0
 8003406:	ea40 0402 	orr.w	r4, r0, r2
 800340a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800340e:	430b      	orrs	r3, r1
 8003410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003414:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003418:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800341c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003420:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003424:	1d9a      	adds	r2, r3, #6
 8003426:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800342a:	4413      	add	r3, r2
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2200      	movs	r2, #0
 8003432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003436:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003446:	0423      	lsls	r3, r4, #16
 8003448:	2200      	movs	r2, #0
 800344a:	ea40 0402 	orr.w	r4, r0, r2
 800344e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003452:	430b      	orrs	r3, r1
 8003454:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003458:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 800345c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003460:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003464:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003468:	1dda      	adds	r2, r3, #7
 800346a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800346e:	4413      	add	r3, r2
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2200      	movs	r2, #0
 8003476:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800347a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800348a:	0623      	lsls	r3, r4, #24
 800348c:	2200      	movs	r2, #0
 800348e:	ea40 0402 	orr.w	r4, r0, r2
 8003492:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003496:	430b      	orrs	r3, r1
 8003498:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800349c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80034a0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80034a4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80034a8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80034ac:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80034b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034b4:	3308      	adds	r3, #8
 80034b6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80034ba:	f04f 0200 	mov.w	r2, #0
 80034be:	f04f 0300 	mov.w	r3, #0
 80034c2:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80034c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80034ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034d2:	4413      	add	r3, r2
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034de:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034e2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80034e6:	4623      	mov	r3, r4
 80034e8:	4303      	orrs	r3, r0
 80034ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ec:	462b      	mov	r3, r5
 80034ee:	430b      	orrs	r3, r1
 80034f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034f2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80034f6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034fa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003508:	4413      	add	r3, r2
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2200      	movs	r2, #0
 8003510:	673b      	str	r3, [r7, #112]	; 0x70
 8003512:	677a      	str	r2, [r7, #116]	; 0x74
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003520:	464c      	mov	r4, r9
 8003522:	0223      	lsls	r3, r4, #8
 8003524:	4644      	mov	r4, r8
 8003526:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800352a:	4644      	mov	r4, r8
 800352c:	0222      	lsls	r2, r4, #8
 800352e:	ea40 0402 	orr.w	r4, r0, r2
 8003532:	66bc      	str	r4, [r7, #104]	; 0x68
 8003534:	430b      	orrs	r3, r1
 8003536:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003538:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800353c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003540:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003544:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800354e:	4413      	add	r3, r2
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2200      	movs	r2, #0
 8003556:	663b      	str	r3, [r7, #96]	; 0x60
 8003558:	667a      	str	r2, [r7, #100]	; 0x64
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003566:	464c      	mov	r4, r9
 8003568:	0423      	lsls	r3, r4, #16
 800356a:	4644      	mov	r4, r8
 800356c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003570:	4644      	mov	r4, r8
 8003572:	0422      	lsls	r2, r4, #16
 8003574:	ea40 0402 	orr.w	r4, r0, r2
 8003578:	65bc      	str	r4, [r7, #88]	; 0x58
 800357a:	430b      	orrs	r3, r1
 800357c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800357e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003582:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003586:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800358a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800358e:	1cda      	adds	r2, r3, #3
 8003590:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003594:	4413      	add	r3, r2
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2200      	movs	r2, #0
 800359c:	653b      	str	r3, [r7, #80]	; 0x50
 800359e:	657a      	str	r2, [r7, #84]	; 0x54
 80035a0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80035a4:	4623      	mov	r3, r4
 80035a6:	0a1b      	lsrs	r3, r3, #8
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035aa:	4623      	mov	r3, r4
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80035b0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80035b4:	4623      	mov	r3, r4
 80035b6:	4303      	orrs	r3, r0
 80035b8:	643b      	str	r3, [r7, #64]	; 0x40
 80035ba:	462b      	mov	r3, r5
 80035bc:	430b      	orrs	r3, r1
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
 80035c0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80035c4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80035c8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035cc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035d0:	1d1a      	adds	r2, r3, #4
 80035d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035d6:	4413      	add	r3, r2
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80035ec:	0023      	movs	r3, r4
 80035ee:	2200      	movs	r2, #0
 80035f0:	ea40 0402 	orr.w	r4, r0, r2
 80035f4:	633c      	str	r4, [r7, #48]	; 0x30
 80035f6:	430b      	orrs	r3, r1
 80035f8:	637b      	str	r3, [r7, #52]	; 0x34
 80035fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80035fe:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003602:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003606:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800360a:	1d5a      	adds	r2, r3, #5
 800360c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003610:	4413      	add	r3, r2
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2200      	movs	r2, #0
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28
 800361a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003626:	0223      	lsls	r3, r4, #8
 8003628:	2200      	movs	r2, #0
 800362a:	ea40 0402 	orr.w	r4, r0, r2
 800362e:	623c      	str	r4, [r7, #32]
 8003630:	430b      	orrs	r3, r1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003638:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800363c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003640:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003644:	3306      	adds	r3, #6
 8003646:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800364a:	4413      	add	r3, r2
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2200      	movs	r2, #0
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	61fa      	str	r2, [r7, #28]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	69bc      	ldr	r4, [r7, #24]
 8003660:	0423      	lsls	r3, r4, #16
 8003662:	2200      	movs	r2, #0
 8003664:	ea40 0402 	orr.w	r4, r0, r2
 8003668:	613c      	str	r4, [r7, #16]
 800366a:	430b      	orrs	r3, r1
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003672:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003676:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800367a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800367e:	3307      	adds	r3, #7
 8003680:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2200      	movs	r2, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	68bc      	ldr	r4, [r7, #8]
 800369a:	0623      	lsls	r3, r4, #24
 800369c:	2200      	movs	r2, #0
 800369e:	ea40 0402 	orr.w	r4, r0, r2
 80036a2:	603c      	str	r4, [r7, #0]
 80036a4:	430b      	orrs	r3, r1
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	e9d7 3400 	ldrd	r3, r4, [r7]
 80036ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 80036b0:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 80036b4:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 80036b8:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80036bc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036c0:	3308      	adds	r3, #8
 80036c2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 80036c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 80036ca:	4618      	mov	r0, r3
 80036cc:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80036d0:	46bd      	mov	sp, r7
 80036d2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036d6:	4770      	bx	lr

080036d8 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	0800d47c 	.word	0x0800d47c

080036f4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	0800d494 	.word	0x0800d494

08003710 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	f7fe fab2 	bl	8001c84 <_ZN3ros3MsgC1Ev>
 8003720:	4a08      	ldr	r2, [pc, #32]	; (8003744 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3308      	adds	r3, #8
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff fada 	bl	8002ce4 <_ZN13geometry_msgs7Vector3C1Ev>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3328      	adds	r3, #40	; 0x28
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fad5 	bl	8002ce4 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4618      	mov	r0, r3
 800373e:	3708      	adds	r7, #8
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	0800d5b0 	.word	0x0800d5b0

08003748 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f103 0008 	add.w	r0, r3, #8
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	4413      	add	r3, r2
 8003762:	4619      	mov	r1, r3
 8003764:	f7ff fae6 	bl	8002d34 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003768:	4602      	mov	r2, r0
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	4413      	add	r3, r2
 800377c:	4619      	mov	r1, r3
 800377e:	f7ff fad9 	bl	8002d34 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003782:	4602      	mov	r2, r0
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
      return offset;
 800378a:	68fb      	ldr	r3, [r7, #12]
    }
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f103 0008 	add.w	r0, r3, #8
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	683a      	ldr	r2, [r7, #0]
 80037ac:	4413      	add	r3, r2
 80037ae:	4619      	mov	r1, r3
 80037b0:	f7ff fc33 	bl	800301a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80037b4:	4602      	mov	r2, r0
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	4413      	add	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	4413      	add	r3, r2
 80037c8:	4619      	mov	r1, r3
 80037ca:	f7ff fc26 	bl	800301a <_ZN13geometry_msgs7Vector311deserializeEPh>
 80037ce:	4602      	mov	r2, r0
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4413      	add	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
     return offset;
 80037d6:	68fb      	ldr	r3, [r7, #12]
    }
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 80037ea:	4618      	mov	r0, r3
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	0800d4b8 	.word	0x0800d4b8

080037fc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	0800d4cc 	.word	0x0800d4cc

08003818 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:
ros::Publisher press_pub("pressure", &str_msg);
ros::Publisher alt_pub("altitude", &str_msg);

char hello[] = "Hello world!";

void cmd_vel_cb( const geometry_msgs::Twist& twist){
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	movx = twist.linear.x;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	f7fd f9dd 	bl	8000be8 <__aeabi_d2f>
 800382e:	4603      	mov	r3, r0
 8003830:	4a0c      	ldr	r2, [pc, #48]	; (8003864 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x4c>)
 8003832:	6013      	str	r3, [r2, #0]
	movy = twist.linear.z;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800383a:	4610      	mov	r0, r2
 800383c:	4619      	mov	r1, r3
 800383e:	f7fd f9d3 	bl	8000be8 <__aeabi_d2f>
 8003842:	4603      	mov	r3, r0
 8003844:	4a08      	ldr	r2, [pc, #32]	; (8003868 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x50>)
 8003846:	6013      	str	r3, [r2, #0]
	movz = twist.linear.y;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	f7fd f9c9 	bl	8000be8 <__aeabi_d2f>
 8003856:	4603      	mov	r3, r0
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x54>)
 800385a:	6013      	str	r3, [r2, #0]

}
 800385c:	bf00      	nop
 800385e:	3708      	adds	r7, #8
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	200003f4 	.word	0x200003f4
 8003868:	200003f8 	.word	0x200003f8
 800386c:	200003fc 	.word	0x200003fc

08003870 <HAL_UART_TxCpltCallback>:

ros::Subscriber<geometry_msgs::Twist> sub_mov("cmd_vel", cmd_vel_cb );


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8003878:	4805      	ldr	r0, [pc, #20]	; (8003890 <HAL_UART_TxCpltCallback+0x20>)
 800387a:	f000 f9db 	bl	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800387e:	4603      	mov	r3, r0
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff f8e5 	bl	8002a50 <_ZN13STM32Hardware5flushEv>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20000400 	.word	0x20000400

08003894 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 800389c:	4805      	ldr	r0, [pc, #20]	; (80038b4 <HAL_UART_RxCpltCallback+0x20>)
 800389e:	f000 f9c9 	bl	8003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80038a2:	4603      	mov	r3, r0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7ff f894 	bl	80029d2 <_ZN13STM32Hardware10reset_rbufEv>
}
 80038aa:	bf00      	nop
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000400 	.word	0x20000400

080038b8 <setup>:
char Pressure1[10];
char Altitude1[10];


void setup(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0


  nh.initNode();
 80038bc:	480b      	ldr	r0, [pc, #44]	; (80038ec <setup+0x34>)
 80038be:	f000 f9c5 	bl	8003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(temp_pub);
 80038c2:	490b      	ldr	r1, [pc, #44]	; (80038f0 <setup+0x38>)
 80038c4:	4809      	ldr	r0, [pc, #36]	; (80038ec <setup+0x34>)
 80038c6:	f000 f9de 	bl	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(press_pub);
 80038ca:	490a      	ldr	r1, [pc, #40]	; (80038f4 <setup+0x3c>)
 80038cc:	4807      	ldr	r0, [pc, #28]	; (80038ec <setup+0x34>)
 80038ce:	f000 f9da 	bl	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(alt_pub);
 80038d2:	4909      	ldr	r1, [pc, #36]	; (80038f8 <setup+0x40>)
 80038d4:	4805      	ldr	r0, [pc, #20]	; (80038ec <setup+0x34>)
 80038d6:	f000 f9d6 	bl	8003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(sub_mov);
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <setup+0x44>)
 80038dc:	4803      	ldr	r0, [pc, #12]	; (80038ec <setup+0x34>)
 80038de:	f000 fa02 	bl	8003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>

  BMP180_Start();
 80038e2:	f7fd fffb 	bl	80018dc <_Z12BMP180_Startv>
}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000400 	.word	0x20000400
 80038f0:	20000d44 	.word	0x20000d44
 80038f4:	20000d58 	.word	0x20000d58
 80038f8:	20000d6c 	.word	0x20000d6c
 80038fc:	20000d80 	.word	0x20000d80

08003900 <_Z10publishMsgcPc>:


void publishMsg(char pub,char str[]){
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	6039      	str	r1, [r7, #0]
 800390a:	71fb      	strb	r3, [r7, #7]

	  str_msg.data = str;
 800390c:	4a10      	ldr	r2, [pc, #64]	; (8003950 <_Z10publishMsgcPc+0x50>)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	6053      	str	r3, [r2, #4]
	  if(pub=='t') temp_pub.publish(&str_msg);
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	2b74      	cmp	r3, #116	; 0x74
 8003916:	d104      	bne.n	8003922 <_Z10publishMsgcPc+0x22>
 8003918:	490d      	ldr	r1, [pc, #52]	; (8003950 <_Z10publishMsgcPc+0x50>)
 800391a:	480e      	ldr	r0, [pc, #56]	; (8003954 <_Z10publishMsgcPc+0x54>)
 800391c:	f7fe ffff 	bl	800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8003920:	e00e      	b.n	8003940 <_Z10publishMsgcPc+0x40>
	  else if(pub=='p') press_pub.publish(&str_msg);
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b70      	cmp	r3, #112	; 0x70
 8003926:	d104      	bne.n	8003932 <_Z10publishMsgcPc+0x32>
 8003928:	4909      	ldr	r1, [pc, #36]	; (8003950 <_Z10publishMsgcPc+0x50>)
 800392a:	480b      	ldr	r0, [pc, #44]	; (8003958 <_Z10publishMsgcPc+0x58>)
 800392c:	f7fe fff7 	bl	800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
 8003930:	e006      	b.n	8003940 <_Z10publishMsgcPc+0x40>
	  else if(pub=='a') alt_pub.publish(&str_msg);
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	2b61      	cmp	r3, #97	; 0x61
 8003936:	d103      	bne.n	8003940 <_Z10publishMsgcPc+0x40>
 8003938:	4905      	ldr	r1, [pc, #20]	; (8003950 <_Z10publishMsgcPc+0x50>)
 800393a:	4808      	ldr	r0, [pc, #32]	; (800395c <_Z10publishMsgcPc+0x5c>)
 800393c:	f7fe ffef 	bl	800291e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 8003940:	4807      	ldr	r0, [pc, #28]	; (8003960 <_Z10publishMsgcPc+0x60>)
 8003942:	f000 f9fb 	bl	8003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000d3c 	.word	0x20000d3c
 8003954:	20000d44 	.word	0x20000d44
 8003958:	20000d58 	.word	0x20000d58
 800395c:	20000d6c 	.word	0x20000d6c
 8003960:	20000400 	.word	0x20000400

08003964 <loop>:

void loop(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003968:	2108      	movs	r1, #8
 800396a:	4826      	ldr	r0, [pc, #152]	; (8003a04 <loop+0xa0>)
 800396c:	f001 ff3e 	bl	80057ec <HAL_GPIO_TogglePin>


  Temperature = BMP180_GetTemp();
 8003970:	f7fd fbdc 	bl	800112c <_Z14BMP180_GetTempv>
 8003974:	eef0 7a40 	vmov.f32	s15, s0
 8003978:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <loop+0xa4>)
 800397a:	edc3 7a00 	vstr	s15, [r3]
  sprintf(Temperature1, "%.2f", Temperature);
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <loop+0xa4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fde0 	bl	8000548 <__aeabi_f2d>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	491f      	ldr	r1, [pc, #124]	; (8003a0c <loop+0xa8>)
 800398e:	4820      	ldr	r0, [pc, #128]	; (8003a10 <loop+0xac>)
 8003990:	f007 fac2 	bl	800af18 <siprintf>

  Pressure = BMP180_GetPress (0);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fd fcd7 	bl	8001348 <_Z15BMP180_GetPressi>
 800399a:	eef0 7a40 	vmov.f32	s15, s0
 800399e:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <loop+0xb0>)
 80039a0:	edc3 7a00 	vstr	s15, [r3]
  sprintf(Pressure1, "%.2f", Pressure);
 80039a4:	4b1b      	ldr	r3, [pc, #108]	; (8003a14 <loop+0xb0>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7fc fdcd 	bl	8000548 <__aeabi_f2d>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4916      	ldr	r1, [pc, #88]	; (8003a0c <loop+0xa8>)
 80039b4:	4818      	ldr	r0, [pc, #96]	; (8003a18 <loop+0xb4>)
 80039b6:	f007 faaf 	bl	800af18 <siprintf>

  Altitude = BMP180_GetAlt(0);
 80039ba:	2000      	movs	r0, #0
 80039bc:	f7fd ff48 	bl	8001850 <_Z13BMP180_GetAlti>
 80039c0:	eef0 7a40 	vmov.f32	s15, s0
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <loop+0xb8>)
 80039c6:	edc3 7a00 	vstr	s15, [r3]
  sprintf(Altitude1, "%.2f", Altitude);
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <loop+0xb8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7fc fdba 	bl	8000548 <__aeabi_f2d>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	490c      	ldr	r1, [pc, #48]	; (8003a0c <loop+0xa8>)
 80039da:	4811      	ldr	r0, [pc, #68]	; (8003a20 <loop+0xbc>)
 80039dc:	f007 fa9c 	bl	800af18 <siprintf>



  //publishMsg('t',"The temperature is: ");
  publishMsg('t',Temperature1);
 80039e0:	490b      	ldr	r1, [pc, #44]	; (8003a10 <loop+0xac>)
 80039e2:	2074      	movs	r0, #116	; 0x74
 80039e4:	f7ff ff8c 	bl	8003900 <_Z10publishMsgcPc>

  //publishMsg('p',"The pressure is: ");
  publishMsg('p',Pressure1);
 80039e8:	490b      	ldr	r1, [pc, #44]	; (8003a18 <loop+0xb4>)
 80039ea:	2070      	movs	r0, #112	; 0x70
 80039ec:	f7ff ff88 	bl	8003900 <_Z10publishMsgcPc>

  //publishMsg('a',"The altitude is: ");
  publishMsg('a',Altitude1);
 80039f0:	490b      	ldr	r1, [pc, #44]	; (8003a20 <loop+0xbc>)
 80039f2:	2061      	movs	r0, #97	; 0x61
 80039f4:	f7ff ff84 	bl	8003900 <_Z10publishMsgcPc>



  HAL_Delay(1000);
 80039f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039fc:	f001 f9a0 	bl	8004d40 <HAL_Delay>
}
 8003a00:	bf00      	nop
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	48000400 	.word	0x48000400
 8003a08:	20000de0 	.word	0x20000de0
 8003a0c:	0800d4f0 	.word	0x0800d4f0
 8003a10:	20000dec 	.word	0x20000dec
 8003a14:	20000de4 	.word	0x20000de4
 8003a18:	20000df8 	.word	0x20000df8
 8003a1c:	20000de8 	.word	0x20000de8
 8003a20:	20000e04 	.word	0x20000e04

08003a24 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d80d      	bhi.n	8003a54 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	fa22 f103 	lsr.w	r1, r2, r3
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4413      	add	r3, r2
 8003a48:	b2ca      	uxtb	r2, r1
 8003a4a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	e7ee      	b.n	8003a32 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d811      	bhi.n	8003a9e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6839      	ldr	r1, [r7, #0]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	440a      	add	r2, r1
 8003a84:	7812      	ldrb	r2, [r2, #0]
 8003a86:	4611      	mov	r1, r2
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	00d2      	lsls	r2, r2, #3
 8003a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	e7ea      	b.n	8003a74 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
	...

08003aac <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	4a04      	ldr	r2, [pc, #16]	; (8003ac8 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	0800d610 	.word	0x0800d610

08003acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ffe8 	bl	8003aac <_ZN3ros15NodeHandleBase_C1Ev>
 8003adc:	4a3a      	ldr	r2, [pc, #232]	; (8003bc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe ff4c 	bl	8002984 <_ZN13STM32HardwareC1Ev>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fc36 	bl	800236c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b18      	cmp	r3, #24
 8003b08:	d80b      	bhi.n	8003b22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x56>
      publishers[i] = 0;
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
 8003b20:	e7f0      	b.n	8003b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x38>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b22:	2300      	movs	r3, #0
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b18      	cmp	r3, #24
 8003b2a:	d80a      	bhi.n	8003b42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x76>
      subscribers[i] = 0;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b34:	2100      	movs	r1, #0
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	e7f1      	b.n	8003b26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5a>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4c:	d20a      	bcs.n	8003b64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x98>
      message_in[i] = 0;
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e7f0      	b.n	8003b46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7a>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	60bb      	str	r3, [r7, #8]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6e:	d20a      	bcs.n	8003b86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xba>
      message_out[i] = 0;
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	4413      	add	r3, r2
 8003b76:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3301      	adds	r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
 8003b84:	e7f0      	b.n	8003b68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x9c>

    req_param_resp.ints_length = 0;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920
    req_param_resp.floats_length = 0;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
    req_param_resp.floats = NULL;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f8c3 292c 	str.w	r2, [r3, #2348]	; 0x92c
    req_param_resp.ints_length = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c3 2918 	str.w	r2, [r3, #2328]	; 0x918
    req_param_resp.ints = NULL;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f8c3 2920 	str.w	r2, [r3, #2336]	; 0x920

    spin_timeout_ = 0;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
  }
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	0800d59c 	.word	0x0800d59c

08003bcc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	4a04      	ldr	r2, [pc, #16]	; (8003be8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	0800d5f8 	.word	0x0800d5f8

08003bec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff ffe5 	bl	8003bcc <_ZN3ros11Subscriber_C1Ev>
 8003c02:	4a0b      	ldr	r2, [pc, #44]	; (8003c30 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3310      	adds	r3, #16
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fd7f 	bl	8003710 <_ZN13geometry_msgs5TwistC1Ev>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	659a      	str	r2, [r3, #88]	; 0x58
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	609a      	str	r2, [r3, #8]
  };
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	0800d584 	.word	0x0800d584

08003c34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
  }
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe feaf 	bl	80029bc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8003c7e:	bf00      	nop
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003c86:	b480      	push	{r7}
 8003c88:	b085      	sub	sp, #20
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b18      	cmp	r3, #24
 8003c98:	dc1e      	bgt.n	8003cd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d111      	bne.n	8003cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	60da      	str	r2, [r3, #12]
        return true;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e004      	b.n	8003cda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e7dd      	b.n	8003c94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8003cd8:	2300      	movs	r3, #0
  }
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
 8003cee:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b18      	cmp	r3, #24
 8003cf8:	dc19      	bgt.n	8003d2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8003d0a:	6839      	ldr	r1, [r7, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	605a      	str	r2, [r3, #4]
        return true;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e004      	b.n	8003d30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	e7e2      	b.n	8003cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8003d2e:	2300      	movs	r3, #0
  }
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fe ff23 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003d4e:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d903      	bls.n	8003d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d009      	beq.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d903      	bls.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d014      	beq.n	8003dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fefc 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad2      	subs	r2, r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003da8:	429a      	cmp	r2, r3
 8003daa:	bf8c      	ite	hi
 8003dac:	2301      	movhi	r3, #1
 8003dae:	2300      	movls	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003db6:	f06f 0301 	mvn.w	r3, #1
 8003dba:	e194      	b.n	80040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fe fe17 	bl	80029f4 <_ZN13STM32Hardware4readEv>
 8003dc6:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f2c0 8174 	blt.w	80040b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003de6:	2b07      	cmp	r3, #7
 8003de8:	d11e      	bne.n	8003e28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	b2d1      	uxtb	r1, r2
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	460a      	mov	r2, r1
 8003e02:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003e0c:	1e5a      	subs	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1b4      	bne.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2208      	movs	r2, #8
 8003e22:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003e26:	e7af      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d128      	bne.n	8003e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2bff      	cmp	r3, #255	; 0xff
 8003e36:	d10d      	bne.n	8003e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f103 0214 	add.w	r2, r3, #20
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8003e52:	e799      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7fe fe9b 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	bf8c      	ite	hi
 8003e6c:	2301      	movhi	r3, #1
 8003e6e:	2300      	movls	r3, #0
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d088      	beq.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8003e7e:	f06f 0301 	mvn.w	r3, #1
 8003e82:	e130      	b.n	80040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d118      	bne.n	8003ec0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2bfe      	cmp	r3, #254	; 0xfe
 8003e92:	d107      	bne.n	8003ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003ea2:	e771      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f47f af68 	bne.w	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f918 	bl	80040ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003ebe:	e763      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d113      	bne.n	8003ef2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68ba      	ldr	r2, [r7, #8]
 8003ece:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003ef0:	e74a      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d110      	bne.n	8003f1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	441a      	add	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003f1c:	e734      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d116      	bne.n	8003f56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003f2e:	425a      	negs	r2, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	bf58      	it	pl
 8003f36:	4253      	negpl	r3, r2
 8003f38:	2bff      	cmp	r3, #255	; 0xff
 8003f3a:	d107      	bne.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003f4a:	e71d      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003f54:	e718      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d10f      	bne.n	8003f80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8003f7e:	e703      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003f86:	2b06      	cmp	r3, #6
 8003f88:	d117      	bne.n	8003fba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	021b      	lsls	r3, r3, #8
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2207      	movs	r2, #7
 8003fa0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f47f aeec 	bne.w	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003fb8:	e6e6      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	f47f aee1 	bne.w	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8003fd4:	425a      	negs	r2, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	bf58      	it	pl
 8003fdc:	4253      	negpl	r3, r2
 8003fde:	2bff      	cmp	r3, #255	; 0xff
 8003fe0:	f47f aed2 	bne.w	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d110      	bne.n	8004010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 f87d 	bl	80040ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f898 	bl	800412a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800400e:	e06a      	b.n	80040e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004016:	2b0a      	cmp	r3, #10
 8004018:	d107      	bne.n	800402a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f960 	bl	80042e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004028:	e6ae      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004030:	2b06      	cmp	r3, #6
 8004032:	d10e      	bne.n	8004052 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004040:	4619      	mov	r1, r3
 8004042:	4610      	mov	r0, r2
 8004044:	f7fe fac7 	bl	80025d6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004050:	e69a      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004058:	2b0b      	cmp	r3, #11
 800405a:	d104      	bne.n	8004066 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004064:	e690      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800406c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407a:	2b00      	cmp	r3, #0
 800407c:	f43f ae84 	beq.w	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004086:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004090:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800409a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80040a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80040b2:	4611      	mov	r1, r2
 80040b4:	4798      	blx	r3
    while (true)
 80040b6:	e667      	b.n	8003d88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80040b8:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00f      	beq.n	80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d906      	bls.n	80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f809 	bl	80040ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80040e4:	2300      	movs	r3, #0
  }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fd fdd2 	bl	8001ca4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f107 020c 	add.w	r2, r7, #12
 800410a:	210a      	movs	r1, #10
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3304      	adds	r3, #4
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fd3d 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 800411a:	4602      	mov	r2, r0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004122:	bf00      	nop
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800412a:	b590      	push	{r4, r7, lr}
 800412c:	b08b      	sub	sp, #44	; 0x2c
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004132:	f107 030c 	add.w	r3, r7, #12
 8004136:	4618      	mov	r0, r3
 8004138:	f7fd fea4 	bl	8001e84 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800413c:	2300      	movs	r3, #0
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	2b18      	cmp	r3, #24
 8004144:	dc63      	bgt.n	800420e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d056      	beq.n	8004206 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	b29b      	uxth	r3, r3
 800416a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3308      	adds	r3, #8
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4608      	mov	r0, r1
 80041a6:	4798      	blx	r3
 80041a8:	4603      	mov	r3, r0
 80041aa:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	6859      	ldr	r1, [r3, #4]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4608      	mov	r0, r1
 80041d4:	4798      	blx	r3
 80041d6:	4603      	mov	r3, r0
 80041d8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80041da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041de:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681c      	ldr	r4, [r3, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fba6 	bl	8002946 <_ZN3ros9Publisher15getEndpointTypeEv>
 80041fa:	4601      	mov	r1, r0
 80041fc:	f107 030c 	add.w	r3, r7, #12
 8004200:	461a      	mov	r2, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	3301      	adds	r3, #1
 800420a:	627b      	str	r3, [r7, #36]	; 0x24
 800420c:	e798      	b.n	8004140 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800420e:	2300      	movs	r3, #0
 8004210:	627b      	str	r3, [r7, #36]	; 0x24
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	2b18      	cmp	r3, #24
 8004216:	dc5f      	bgt.n	80042d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d053      	beq.n	80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b29b      	uxth	r3, r3
 8004238:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800423e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004252:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	f202 2222 	addw	r2, r2, #546	; 0x222
 800425e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3308      	adds	r3, #8
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4608      	mov	r0, r1
 800426a:	4798      	blx	r3
 800426c:	4603      	mov	r3, r0
 800426e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004274:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004280:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	330c      	adds	r3, #12
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4608      	mov	r0, r1
 8004290:	4798      	blx	r3
 8004292:	4603      	mov	r3, r0
 8004294:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004296:	f44f 7300 	mov.w	r3, #512	; 0x200
 800429a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681c      	ldr	r4, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80042aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80042b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3304      	adds	r3, #4
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4608      	mov	r0, r1
 80042c2:	4798      	blx	r3
 80042c4:	4601      	mov	r1, r0
 80042c6:	f107 030c 	add.w	r3, r7, #12
 80042ca:	461a      	mov	r2, r3
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	3301      	adds	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
 80042d6:	e79c      	b.n	8004212 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80042e0:	bf00      	nop
 80042e2:	372c      	adds	r7, #44	; 0x2c
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd90      	pop	{r4, r7, pc}

080042e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 80042f2:	f107 0308 	add.w	r3, r7, #8
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd fcd4 	bl	8001ca4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	3304      	adds	r3, #4
 8004300:	4618      	mov	r0, r3
 8004302:	f7fe fc47 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8004306:	4602      	mov	r2, r0
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004312:	f107 0308 	add.w	r3, r7, #8
 8004316:	6839      	ldr	r1, [r7, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd fd33 	bl	8001d84 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	4915      	ldr	r1, [pc, #84]	; (8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004324:	fba1 1303 	umull	r1, r3, r1, r3
 8004328:	099b      	lsrs	r3, r3, #6
 800432a:	4413      	add	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800432e:	6939      	ldr	r1, [r7, #16]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4b11      	ldr	r3, [pc, #68]	; (8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004334:	fba3 0302 	umull	r0, r3, r3, r2
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	4a0d      	ldr	r2, [pc, #52]	; (800437c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	440b      	add	r3, r1
 800434c:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f8a6 	bl	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4618      	mov	r0, r3
 8004362:	f7fe fc17 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 8004366:	4602      	mov	r2, r0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 800436e:	bf00      	nop
 8004370:	3718      	adds	r7, #24
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	10624dd3 	.word	0x10624dd3
 800437c:	000f4240 	.word	0x000f4240

08004380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b63      	cmp	r3, #99	; 0x63
 8004390:	dd09      	ble.n	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	e079      	b.n	800449a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f202 6224 	addw	r2, r2, #1572	; 0x624
 80043b2:	3207      	adds	r2, #7
 80043b4:	4611      	mov	r1, r2
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	4798      	blx	r3
 80043ba:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	22fe      	movs	r2, #254	; 0xfe
 80043c8:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	b29b      	uxth	r3, r3
 80043de:	b2da      	uxtb	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80043f2:	4413      	add	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	b21b      	sxth	r3, r3
 800440e:	121b      	asrs	r3, r3, #8
 8004410:	b21b      	sxth	r3, r3
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800441e:	2305      	movs	r3, #5
 8004420:	61bb      	str	r3, [r7, #24]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3306      	adds	r3, #6
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	429a      	cmp	r2, r3
 800442a:	dc0d      	bgt.n	8004448 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	4413      	add	r3, r2
 8004432:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	3301      	adds	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]
 8004446:	e7ec      	b.n	8004422 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa2>
    l += 7;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3307      	adds	r3, #7
 800444c:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	425a      	negs	r2, r3
 8004452:	b2db      	uxtb	r3, r3
 8004454:	b2d2      	uxtb	r2, r2
 8004456:	bf58      	it	pl
 8004458:	4253      	negpl	r3, r2
 800445a:	b2da      	uxtb	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	1c59      	adds	r1, r3, #1
 8004460:	6179      	str	r1, [r7, #20]
 8004462:	43d2      	mvns	r2, r2
 8004464:	b2d1      	uxtb	r1, r2
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	4413      	add	r3, r2
 800446a:	460a      	mov	r2, r1
 800446c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004476:	dc0a      	bgt.n	800448e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1d18      	adds	r0, r3, #4
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4619      	mov	r1, r3
 8004486:	f7fe fb3f 	bl	8002b08 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	e005      	b.n	800449a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800448e:	4905      	ldr	r1, [pc, #20]	; (80044a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f849 	bl	8004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 800449a:	4618      	mov	r0, r3
 800449c:	3720      	adds	r7, #32
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	0800d4f8 	.word	0x0800d4f8

080044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3304      	adds	r3, #4
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fb6c 	bl	8002b94 <_ZN13STM32Hardware4timeEv>
 80044bc:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4915      	ldr	r1, [pc, #84]	; (800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80044c6:	fba1 1303 	umull	r1, r3, r1, r3
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	1e5a      	subs	r2, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x74>)
 80044de:	fba3 0302 	umull	r0, r3, r3, r2
 80044e2:	099b      	lsrs	r3, r3, #6
 80044e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044e8:	fb00 f303 	mul.w	r3, r0, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x78>)
 80044f0:	fb02 f303 	mul.w	r3, r2, r3
 80044f4:	1aca      	subs	r2, r1, r3
 80044f6:	4b0b      	ldr	r3, [pc, #44]	; (8004524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 80044f8:	4413      	add	r3, r2
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f000 fb4c 	bl	8004bac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	10624dd3 	.word	0x10624dd3
 8004520:	000f4240 	.word	0x000f4240
 8004524:	3b9aca00 	.word	0x3b9aca00

08004528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	2103      	movs	r1, #3
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f804 	bl	8004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 800453c:	bf00      	nop
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	460b      	mov	r3, r1
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004552:	f107 0314 	add.w	r3, r7, #20
 8004556:	4618      	mov	r0, r3
 8004558:	f7fd fe58 	bl	800220c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800455c:	7afb      	ldrb	r3, [r7, #11]
 800455e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f107 0214 	add.w	r2, r7, #20
 800456e:	2107      	movs	r1, #7
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	4798      	blx	r3
  }
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <_Z41__static_initialization_and_destruction_0ii>:
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d122      	bne.n	80045d2 <_Z41__static_initialization_and_destruction_0ii+0x56>
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004592:	4293      	cmp	r3, r2
 8004594:	d11d      	bne.n	80045d2 <_Z41__static_initialization_and_destruction_0ii+0x56>
ros::NodeHandle nh;
 8004596:	4811      	ldr	r0, [pc, #68]	; (80045dc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004598:	f7ff fa98 	bl	8003acc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 800459c:	4810      	ldr	r0, [pc, #64]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800459e:	f7fe fb05 	bl	8002bac <_ZN8std_msgs6StringC1Ev>
ros::Publisher temp_pub("temperature", &str_msg);
 80045a2:	2300      	movs	r3, #0
 80045a4:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80045a6:	490f      	ldr	r1, [pc, #60]	; (80045e4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80045a8:	480f      	ldr	r0, [pc, #60]	; (80045e8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80045aa:	f7fe f9a1 	bl	80028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher press_pub("pressure", &str_msg);
 80045ae:	2300      	movs	r3, #0
 80045b0:	4a0b      	ldr	r2, [pc, #44]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80045b2:	490e      	ldr	r1, [pc, #56]	; (80045ec <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80045b4:	480e      	ldr	r0, [pc, #56]	; (80045f0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80045b6:	f7fe f99b 	bl	80028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher alt_pub("altitude", &str_msg);
 80045ba:	2300      	movs	r3, #0
 80045bc:	4a08      	ldr	r2, [pc, #32]	; (80045e0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80045be:	490d      	ldr	r1, [pc, #52]	; (80045f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80045c0:	480d      	ldr	r0, [pc, #52]	; (80045f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80045c2:	f7fe f995 	bl	80028f0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub_mov("cmd_vel", cmd_vel_cb );
 80045c6:	2301      	movs	r3, #1
 80045c8:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80045ca:	490d      	ldr	r1, [pc, #52]	; (8004600 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80045cc:	480d      	ldr	r0, [pc, #52]	; (8004604 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80045ce:	f7ff fb0d 	bl	8003bec <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000400 	.word	0x20000400
 80045e0:	20000d3c 	.word	0x20000d3c
 80045e4:	0800d534 	.word	0x0800d534
 80045e8:	20000d44 	.word	0x20000d44
 80045ec:	0800d540 	.word	0x0800d540
 80045f0:	20000d58 	.word	0x20000d58
 80045f4:	0800d54c 	.word	0x0800d54c
 80045f8:	20000d6c 	.word	0x20000d6c
 80045fc:	08003819 	.word	0x08003819
 8004600:	0800d558 	.word	0x0800d558
 8004604:	20000d80 	.word	0x20000d80

08004608 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3310      	adds	r3, #16
 8004616:	6839      	ldr	r1, [r7, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff f8bb 	bl	8003794 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	3210      	adds	r2, #16
 8004626:	4610      	mov	r0, r2
 8004628:	4798      	blx	r3
  }
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800464a:	b580      	push	{r7, lr}
 800464c:	b082      	sub	sp, #8
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	3310      	adds	r3, #16
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff f8c2 	bl	80037e0 <_ZN13geometry_msgs5Twist7getTypeEv>
 800465c:	4603      	mov	r3, r0
  }
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004666:	b580      	push	{r7, lr}
 8004668:	b082      	sub	sp, #8
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	3310      	adds	r3, #16
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff f8c2 	bl	80037fc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004678:	4603      	mov	r3, r0
  }
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
    return configured_;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004690:	4618      	mov	r0, r3
 8004692:	370c      	adds	r7, #12
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <_GLOBAL__sub_I_movx>:
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
 80046a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7ff ff69 	bl	800457c <_Z41__static_initialization_and_destruction_0ii>
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046b2:	4b0f      	ldr	r3, [pc, #60]	; (80046f0 <HAL_MspInit+0x44>)
 80046b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <HAL_MspInit+0x44>)
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	6613      	str	r3, [r2, #96]	; 0x60
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <HAL_MspInit+0x44>)
 80046c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	607b      	str	r3, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <HAL_MspInit+0x44>)
 80046cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ce:	4a08      	ldr	r2, [pc, #32]	; (80046f0 <HAL_MspInit+0x44>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	6593      	str	r3, [r2, #88]	; 0x58
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_MspInit+0x44>)
 80046d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0ac      	sub	sp, #176	; 0xb0
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	605a      	str	r2, [r3, #4]
 8004706:	609a      	str	r2, [r3, #8]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800470c:	f107 0314 	add.w	r3, r7, #20
 8004710:	2288      	movs	r2, #136	; 0x88
 8004712:	2100      	movs	r1, #0
 8004714:	4618      	mov	r0, r3
 8004716:	f005 ff41 	bl	800a59c <memset>
  if(hi2c->Instance==I2C1)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a21      	ldr	r2, [pc, #132]	; (80047a4 <HAL_I2C_MspInit+0xb0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d13b      	bne.n	800479c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004728:	2300      	movs	r3, #0
 800472a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800472c:	f107 0314 	add.w	r3, r7, #20
 8004730:	4618      	mov	r0, r3
 8004732:	f002 fcc3 	bl	80070bc <HAL_RCCEx_PeriphCLKConfig>
 8004736:	4603      	mov	r3, r0
 8004738:	2b00      	cmp	r3, #0
 800473a:	d001      	beq.n	8004740 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800473c:	f7fd fa8c 	bl	8001c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004740:	4b19      	ldr	r3, [pc, #100]	; (80047a8 <HAL_I2C_MspInit+0xb4>)
 8004742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004744:	4a18      	ldr	r2, [pc, #96]	; (80047a8 <HAL_I2C_MspInit+0xb4>)
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800474c:	4b16      	ldr	r3, [pc, #88]	; (80047a8 <HAL_I2C_MspInit+0xb4>)
 800474e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	613b      	str	r3, [r7, #16]
 8004756:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004758:	f44f 7340 	mov.w	r3, #768	; 0x300
 800475c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004760:	2312      	movs	r3, #18
 8004762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476c:	2303      	movs	r3, #3
 800476e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004772:	2304      	movs	r3, #4
 8004774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004778:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800477c:	4619      	mov	r1, r3
 800477e:	480b      	ldr	r0, [pc, #44]	; (80047ac <HAL_I2C_MspInit+0xb8>)
 8004780:	f000 fe8a 	bl	8005498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004784:	4b08      	ldr	r3, [pc, #32]	; (80047a8 <HAL_I2C_MspInit+0xb4>)
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	4a07      	ldr	r2, [pc, #28]	; (80047a8 <HAL_I2C_MspInit+0xb4>)
 800478a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800478e:	6593      	str	r3, [r2, #88]	; 0x58
 8004790:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <HAL_I2C_MspInit+0xb4>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800479c:	bf00      	nop
 800479e:	37b0      	adds	r7, #176	; 0xb0
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40005400 	.word	0x40005400
 80047a8:	40021000 	.word	0x40021000
 80047ac:	48000400 	.word	0x48000400

080047b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d10b      	bne.n	80047da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <HAL_TIM_Base_MspInit+0x38>)
 80047c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <HAL_TIM_Base_MspInit+0x38>)
 80047c8:	f043 0301 	orr.w	r3, r3, #1
 80047cc:	6593      	str	r3, [r2, #88]	; 0x58
 80047ce:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_TIM_Base_MspInit+0x38>)
 80047d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40021000 	.word	0x40021000

080047ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0ac      	sub	sp, #176	; 0xb0
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047f4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80047f8:	2200      	movs	r2, #0
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004804:	f107 0314 	add.w	r3, r7, #20
 8004808:	2288      	movs	r2, #136	; 0x88
 800480a:	2100      	movs	r1, #0
 800480c:	4618      	mov	r0, r3
 800480e:	f005 fec5 	bl	800a59c <memset>
  if(huart->Instance==USART2)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a4f      	ldr	r2, [pc, #316]	; (8004954 <HAL_UART_MspInit+0x168>)
 8004818:	4293      	cmp	r3, r2
 800481a:	f040 8096 	bne.w	800494a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800481e:	2302      	movs	r3, #2
 8004820:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004822:	2300      	movs	r3, #0
 8004824:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	4618      	mov	r0, r3
 800482c:	f002 fc46 	bl	80070bc <HAL_RCCEx_PeriphCLKConfig>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004836:	f7fd fa0f 	bl	8001c58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800483a:	4b47      	ldr	r3, [pc, #284]	; (8004958 <HAL_UART_MspInit+0x16c>)
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	4a46      	ldr	r2, [pc, #280]	; (8004958 <HAL_UART_MspInit+0x16c>)
 8004840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004844:	6593      	str	r3, [r2, #88]	; 0x58
 8004846:	4b44      	ldr	r3, [pc, #272]	; (8004958 <HAL_UART_MspInit+0x16c>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004852:	4b41      	ldr	r3, [pc, #260]	; (8004958 <HAL_UART_MspInit+0x16c>)
 8004854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004856:	4a40      	ldr	r2, [pc, #256]	; (8004958 <HAL_UART_MspInit+0x16c>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800485e:	4b3e      	ldr	r3, [pc, #248]	; (8004958 <HAL_UART_MspInit+0x16c>)
 8004860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800486a:	230c      	movs	r3, #12
 800486c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004870:	2302      	movs	r3, #2
 8004872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004882:	2307      	movs	r3, #7
 8004884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004888:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800488c:	4619      	mov	r1, r3
 800488e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004892:	f000 fe01 	bl	8005498 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004896:	4b31      	ldr	r3, [pc, #196]	; (800495c <HAL_UART_MspInit+0x170>)
 8004898:	4a31      	ldr	r2, [pc, #196]	; (8004960 <HAL_UART_MspInit+0x174>)
 800489a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800489c:	4b2f      	ldr	r3, [pc, #188]	; (800495c <HAL_UART_MspInit+0x170>)
 800489e:	2202      	movs	r2, #2
 80048a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048a2:	4b2e      	ldr	r3, [pc, #184]	; (800495c <HAL_UART_MspInit+0x170>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <HAL_UART_MspInit+0x170>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80048ae:	4b2b      	ldr	r3, [pc, #172]	; (800495c <HAL_UART_MspInit+0x170>)
 80048b0:	2280      	movs	r2, #128	; 0x80
 80048b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80048b4:	4b29      	ldr	r3, [pc, #164]	; (800495c <HAL_UART_MspInit+0x170>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80048ba:	4b28      	ldr	r3, [pc, #160]	; (800495c <HAL_UART_MspInit+0x170>)
 80048bc:	2200      	movs	r2, #0
 80048be:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80048c0:	4b26      	ldr	r3, [pc, #152]	; (800495c <HAL_UART_MspInit+0x170>)
 80048c2:	2220      	movs	r2, #32
 80048c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80048c6:	4b25      	ldr	r3, [pc, #148]	; (800495c <HAL_UART_MspInit+0x170>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80048cc:	4823      	ldr	r0, [pc, #140]	; (800495c <HAL_UART_MspInit+0x170>)
 80048ce:	f000 fb6d 	bl	8004fac <HAL_DMA_Init>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80048d8:	f7fd f9be 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a1f      	ldr	r2, [pc, #124]	; (800495c <HAL_UART_MspInit+0x170>)
 80048e0:	671a      	str	r2, [r3, #112]	; 0x70
 80048e2:	4a1e      	ldr	r2, [pc, #120]	; (800495c <HAL_UART_MspInit+0x170>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80048e8:	4b1e      	ldr	r3, [pc, #120]	; (8004964 <HAL_UART_MspInit+0x178>)
 80048ea:	4a1f      	ldr	r2, [pc, #124]	; (8004968 <HAL_UART_MspInit+0x17c>)
 80048ec:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80048ee:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_UART_MspInit+0x178>)
 80048f0:	2202      	movs	r2, #2
 80048f2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <HAL_UART_MspInit+0x178>)
 80048f6:	2210      	movs	r2, #16
 80048f8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <HAL_UART_MspInit+0x178>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004900:	4b18      	ldr	r3, [pc, #96]	; (8004964 <HAL_UART_MspInit+0x178>)
 8004902:	2280      	movs	r2, #128	; 0x80
 8004904:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004906:	4b17      	ldr	r3, [pc, #92]	; (8004964 <HAL_UART_MspInit+0x178>)
 8004908:	2200      	movs	r2, #0
 800490a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800490c:	4b15      	ldr	r3, [pc, #84]	; (8004964 <HAL_UART_MspInit+0x178>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_UART_MspInit+0x178>)
 8004914:	2200      	movs	r2, #0
 8004916:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_UART_MspInit+0x178>)
 800491a:	2200      	movs	r2, #0
 800491c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800491e:	4811      	ldr	r0, [pc, #68]	; (8004964 <HAL_UART_MspInit+0x178>)
 8004920:	f000 fb44 	bl	8004fac <HAL_DMA_Init>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 800492a:	f7fd f995 	bl	8001c58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <HAL_UART_MspInit+0x178>)
 8004932:	66da      	str	r2, [r3, #108]	; 0x6c
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_UART_MspInit+0x178>)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	2100      	movs	r1, #0
 800493e:	2026      	movs	r0, #38	; 0x26
 8004940:	f000 fafd 	bl	8004f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004944:	2026      	movs	r0, #38	; 0x26
 8004946:	f000 fb16 	bl	8004f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800494a:	bf00      	nop
 800494c:	37b0      	adds	r7, #176	; 0xb0
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40004400 	.word	0x40004400
 8004958:	40021000 	.word	0x40021000
 800495c:	20000360 	.word	0x20000360
 8004960:	4002006c 	.word	0x4002006c
 8004964:	200003a8 	.word	0x200003a8
 8004968:	40020080 	.word	0x40020080

0800496c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004970:	e7fe      	b.n	8004970 <NMI_Handler+0x4>

08004972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004972:	b480      	push	{r7}
 8004974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004976:	e7fe      	b.n	8004976 <HardFault_Handler+0x4>

08004978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800497c:	e7fe      	b.n	800497c <MemManage_Handler+0x4>

0800497e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800497e:	b480      	push	{r7}
 8004980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004982:	e7fe      	b.n	8004982 <BusFault_Handler+0x4>

08004984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004988:	e7fe      	b.n	8004988 <UsageFault_Handler+0x4>

0800498a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800498a:	b480      	push	{r7}
 800498c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499c:	bf00      	nop
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a6:	b480      	push	{r7}
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049aa:	bf00      	nop
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b8:	f000 f9a2 	bl	8004d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049bc:	bf00      	nop
 80049be:	bd80      	pop	{r7, pc}

080049c0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80049c4:	4802      	ldr	r0, [pc, #8]	; (80049d0 <DMA1_Channel6_IRQHandler+0x10>)
 80049c6:	f000 fc88 	bl	80052da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	20000360 	.word	0x20000360

080049d4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80049d8:	4802      	ldr	r0, [pc, #8]	; (80049e4 <DMA1_Channel7_IRQHandler+0x10>)
 80049da:	f000 fc7e 	bl	80052da <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	200003a8 	.word	0x200003a8

080049e8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80049ec:	4802      	ldr	r0, [pc, #8]	; (80049f8 <USART2_IRQHandler+0x10>)
 80049ee:	f003 fc31 	bl	8008254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	200002dc 	.word	0x200002dc

080049fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80049fc:	b480      	push	{r7}
 80049fe:	af00      	add	r7, sp, #0
	return 1;
 8004a00:	2301      	movs	r3, #1
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <_kill>:

int _kill(int pid, int sig)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004a16:	f005 fd89 	bl	800a52c <__errno>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2216      	movs	r2, #22
 8004a1e:	601a      	str	r2, [r3, #0]
	return -1;
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3708      	adds	r7, #8
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <_exit>:

void _exit (int status)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004a34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	f7ff ffe7 	bl	8004a0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004a3e:	e7fe      	b.n	8004a3e <_exit+0x12>

08004a40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e00a      	b.n	8004a68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a52:	f3af 8000 	nop.w
 8004a56:	4601      	mov	r1, r0
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	60ba      	str	r2, [r7, #8]
 8004a5e:	b2ca      	uxtb	r2, r1
 8004a60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	3301      	adds	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	dbf0      	blt.n	8004a52 <_read+0x12>
	}

return len;
 8004a70:	687b      	ldr	r3, [r7, #4]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60f8      	str	r0, [r7, #12]
 8004a82:	60b9      	str	r1, [r7, #8]
 8004a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	e009      	b.n	8004aa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	60ba      	str	r2, [r7, #8]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	dbf1      	blt.n	8004a8c <_write+0x12>
	}
	return len;
 8004aa8:	687b      	ldr	r3, [r7, #4]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <_close>:

int _close(int file)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8004aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ada:	605a      	str	r2, [r3, #4]
	return 0;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <_isatty>:

int _isatty(int file)
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
	return 1;
 8004af2:	2301      	movs	r3, #1
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
	...

08004b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b24:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <_sbrk+0x5c>)
 8004b26:	4b15      	ldr	r3, [pc, #84]	; (8004b7c <_sbrk+0x60>)
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b30:	4b13      	ldr	r3, [pc, #76]	; (8004b80 <_sbrk+0x64>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b38:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <_sbrk+0x64>)
 8004b3a:	4a12      	ldr	r2, [pc, #72]	; (8004b84 <_sbrk+0x68>)
 8004b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <_sbrk+0x64>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d207      	bcs.n	8004b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b4c:	f005 fcee 	bl	800a52c <__errno>
 8004b50:	4603      	mov	r3, r0
 8004b52:	220c      	movs	r2, #12
 8004b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b5a:	e009      	b.n	8004b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b5c:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <_sbrk+0x64>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b62:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <_sbrk+0x64>)
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4413      	add	r3, r2
 8004b6a:	4a05      	ldr	r2, [pc, #20]	; (8004b80 <_sbrk+0x64>)
 8004b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20018000 	.word	0x20018000
 8004b7c:	00000400 	.word	0x00000400
 8004b80:	20000e10 	.word	0x20000e10
 8004b84:	20000e28 	.word	0x20000e28

08004b88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <SystemInit+0x20>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	4a05      	ldr	r2, [pc, #20]	; (8004ba8 <SystemInit+0x20>)
 8004b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004b9c:	bf00      	nop
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	e000ed00 	.word	0xe000ed00

08004bac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	0a5a      	lsrs	r2, r3, #9
 8004bbc:	490f      	ldr	r1, [pc, #60]	; (8004bfc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004bbe:	fba1 1202 	umull	r1, r2, r1, r2
 8004bc2:	09d2      	lsrs	r2, r2, #7
 8004bc4:	490e      	ldr	r1, [pc, #56]	; (8004c00 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004bc6:	fb01 f202 	mul.w	r2, r1, r2
 8004bca:	1a9b      	subs	r3, r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	0a5b      	lsrs	r3, r3, #9
 8004bd4:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bda:	09db      	lsrs	r3, r3, #7
 8004bdc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	441a      	add	r2, r3
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	601a      	str	r2, [r3, #0]
}
 8004bf0:	bf00      	nop
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	00044b83 	.word	0x00044b83
 8004c00:	3b9aca00 	.word	0x3b9aca00

08004c04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004c08:	f7ff ffbe 	bl	8004b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004c0c:	480c      	ldr	r0, [pc, #48]	; (8004c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8004c0e:	490d      	ldr	r1, [pc, #52]	; (8004c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004c10:	4a0d      	ldr	r2, [pc, #52]	; (8004c48 <LoopForever+0xe>)
  movs r3, #0
 8004c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004c14:	e002      	b.n	8004c1c <LoopCopyDataInit>

08004c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004c1a:	3304      	adds	r3, #4

08004c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004c20:	d3f9      	bcc.n	8004c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004c22:	4a0a      	ldr	r2, [pc, #40]	; (8004c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004c24:	4c0a      	ldr	r4, [pc, #40]	; (8004c50 <LoopForever+0x16>)
  movs r3, #0
 8004c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004c28:	e001      	b.n	8004c2e <LoopFillZerobss>

08004c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004c2c:	3204      	adds	r2, #4

08004c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c30:	d3fb      	bcc.n	8004c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c32:	f005 fc81 	bl	800a538 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c36:	f7fc fe94 	bl	8001962 <main>

08004c3a <LoopForever>:

LoopForever:
    b LoopForever
 8004c3a:	e7fe      	b.n	8004c3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004c3c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c44:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004c48:	0800db00 	.word	0x0800db00
  ldr r2, =_sbss
 8004c4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8004c50:	20000e28 	.word	0x20000e28

08004c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c54:	e7fe      	b.n	8004c54 <ADC1_2_IRQHandler>

08004c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b082      	sub	sp, #8
 8004c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c60:	2003      	movs	r0, #3
 8004c62:	f000 f961 	bl	8004f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c66:	200f      	movs	r0, #15
 8004c68:	f000 f80e 	bl	8004c88 <HAL_InitTick>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	71fb      	strb	r3, [r7, #7]
 8004c76:	e001      	b.n	8004c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c78:	f7ff fd18 	bl	80046ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004c94:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <HAL_InitTick+0x6c>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d023      	beq.n	8004ce4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_InitTick+0x70>)
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <HAL_InitTick+0x6c>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 f96d 	bl	8004f92 <HAL_SYSTICK_Config>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10f      	bne.n	8004cde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b0f      	cmp	r3, #15
 8004cc2:	d809      	bhi.n	8004cd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	6879      	ldr	r1, [r7, #4]
 8004cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ccc:	f000 f937 	bl	8004f3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <HAL_InitTick+0x74>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e007      	b.n	8004ce8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	e004      	b.n	8004ce8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	73fb      	strb	r3, [r7, #15]
 8004ce2:	e001      	b.n	8004ce8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000008 	.word	0x20000008
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	20000004 	.word	0x20000004

08004d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_IncTick+0x20>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_IncTick+0x24>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4413      	add	r3, r2
 8004d10:	4a04      	ldr	r2, [pc, #16]	; (8004d24 <HAL_IncTick+0x24>)
 8004d12:	6013      	str	r3, [r2, #0]
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000008 	.word	0x20000008
 8004d24:	20000e14 	.word	0x20000e14

08004d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_GetTick+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000e14 	.word	0x20000e14

08004d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7ff ffee 	bl	8004d28 <HAL_GetTick>
 8004d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d58:	d005      	beq.n	8004d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004d5a:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <HAL_Delay+0x44>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d66:	bf00      	nop
 8004d68:	f7ff ffde 	bl	8004d28 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d8f7      	bhi.n	8004d68 <HAL_Delay+0x28>
  {
  }
}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	20000008 	.word	0x20000008

08004d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f003 0307 	and.w	r3, r3, #7
 8004d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <__NVIC_SetPriorityGrouping+0x44>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d9e:	68ba      	ldr	r2, [r7, #8]
 8004da0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004da4:	4013      	ands	r3, r2
 8004da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004db0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <__NVIC_SetPriorityGrouping+0x44>)
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	60d3      	str	r3, [r2, #12]
}
 8004dc0:	bf00      	nop
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr
 8004dcc:	e000ed00 	.word	0xe000ed00

08004dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd4:	4b04      	ldr	r3, [pc, #16]	; (8004de8 <__NVIC_GetPriorityGrouping+0x18>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	0a1b      	lsrs	r3, r3, #8
 8004dda:	f003 0307 	and.w	r3, r3, #7
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000ed00 	.word	0xe000ed00

08004dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db0b      	blt.n	8004e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	f003 021f 	and.w	r2, r3, #31
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <__NVIC_EnableIRQ+0x38>)
 8004e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000e100 	.word	0xe000e100

08004e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	6039      	str	r1, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	db0a      	blt.n	8004e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	490c      	ldr	r1, [pc, #48]	; (8004e74 <__NVIC_SetPriority+0x4c>)
 8004e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e46:	0112      	lsls	r2, r2, #4
 8004e48:	b2d2      	uxtb	r2, r2
 8004e4a:	440b      	add	r3, r1
 8004e4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e50:	e00a      	b.n	8004e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	4908      	ldr	r1, [pc, #32]	; (8004e78 <__NVIC_SetPriority+0x50>)
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	3b04      	subs	r3, #4
 8004e60:	0112      	lsls	r2, r2, #4
 8004e62:	b2d2      	uxtb	r2, r2
 8004e64:	440b      	add	r3, r1
 8004e66:	761a      	strb	r2, [r3, #24]
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	e000e100 	.word	0xe000e100
 8004e78:	e000ed00 	.word	0xe000ed00

08004e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	f1c3 0307 	rsb	r3, r3, #7
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	bf28      	it	cs
 8004e9a:	2304      	movcs	r3, #4
 8004e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2b06      	cmp	r3, #6
 8004ea4:	d902      	bls.n	8004eac <NVIC_EncodePriority+0x30>
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3b03      	subs	r3, #3
 8004eaa:	e000      	b.n	8004eae <NVIC_EncodePriority+0x32>
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	401a      	ands	r2, r3
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	fa01 f303 	lsl.w	r3, r1, r3
 8004ece:	43d9      	mvns	r1, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed4:	4313      	orrs	r3, r2
         );
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3724      	adds	r7, #36	; 0x24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ef4:	d301      	bcc.n	8004efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e00f      	b.n	8004f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004efa:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <SysTick_Config+0x40>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f02:	210f      	movs	r1, #15
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f08:	f7ff ff8e 	bl	8004e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <SysTick_Config+0x40>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <SysTick_Config+0x40>)
 8004f14:	2207      	movs	r2, #7
 8004f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3708      	adds	r7, #8
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000e010 	.word	0xe000e010

08004f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f7ff ff29 	bl	8004d88 <__NVIC_SetPriorityGrouping>
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b086      	sub	sp, #24
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	4603      	mov	r3, r0
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f50:	f7ff ff3e 	bl	8004dd0 <__NVIC_GetPriorityGrouping>
 8004f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	6978      	ldr	r0, [r7, #20]
 8004f5c:	f7ff ff8e 	bl	8004e7c <NVIC_EncodePriority>
 8004f60:	4602      	mov	r2, r0
 8004f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff ff5d 	bl	8004e28 <__NVIC_SetPriority>
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7ff ff31 	bl	8004dec <__NVIC_EnableIRQ>
}
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b082      	sub	sp, #8
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7ff ffa2 	bl	8004ee4 <SysTick_Config>
 8004fa0:	4603      	mov	r3, r0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e098      	b.n	80050f0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b4d      	ldr	r3, [pc, #308]	; (80050fc <HAL_DMA_Init+0x150>)
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d80f      	bhi.n	8004fea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4b4b      	ldr	r3, [pc, #300]	; (8005100 <HAL_DMA_Init+0x154>)
 8004fd2:	4413      	add	r3, r2
 8004fd4:	4a4b      	ldr	r2, [pc, #300]	; (8005104 <HAL_DMA_Init+0x158>)
 8004fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fda:	091b      	lsrs	r3, r3, #4
 8004fdc:	009a      	lsls	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a48      	ldr	r2, [pc, #288]	; (8005108 <HAL_DMA_Init+0x15c>)
 8004fe6:	641a      	str	r2, [r3, #64]	; 0x40
 8004fe8:	e00e      	b.n	8005008 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b46      	ldr	r3, [pc, #280]	; (800510c <HAL_DMA_Init+0x160>)
 8004ff2:	4413      	add	r3, r2
 8004ff4:	4a43      	ldr	r2, [pc, #268]	; (8005104 <HAL_DMA_Init+0x158>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	009a      	lsls	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a42      	ldr	r2, [pc, #264]	; (8005110 <HAL_DMA_Init+0x164>)
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800501e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005022:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800502c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005062:	d039      	beq.n	80050d8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	4a27      	ldr	r2, [pc, #156]	; (8005108 <HAL_DMA_Init+0x15c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d11a      	bne.n	80050a4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_DMA_Init+0x168>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005076:	f003 031c 	and.w	r3, r3, #28
 800507a:	210f      	movs	r1, #15
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	43db      	mvns	r3, r3
 8005082:	4924      	ldr	r1, [pc, #144]	; (8005114 <HAL_DMA_Init+0x168>)
 8005084:	4013      	ands	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005088:	4b22      	ldr	r3, [pc, #136]	; (8005114 <HAL_DMA_Init+0x168>)
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	f003 031c 	and.w	r3, r3, #28
 8005098:	fa01 f303 	lsl.w	r3, r1, r3
 800509c:	491d      	ldr	r1, [pc, #116]	; (8005114 <HAL_DMA_Init+0x168>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]
 80050a2:	e019      	b.n	80050d8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80050a4:	4b1c      	ldr	r3, [pc, #112]	; (8005118 <HAL_DMA_Init+0x16c>)
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ac:	f003 031c 	and.w	r3, r3, #28
 80050b0:	210f      	movs	r1, #15
 80050b2:	fa01 f303 	lsl.w	r3, r1, r3
 80050b6:	43db      	mvns	r3, r3
 80050b8:	4917      	ldr	r1, [pc, #92]	; (8005118 <HAL_DMA_Init+0x16c>)
 80050ba:	4013      	ands	r3, r2
 80050bc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80050be:	4b16      	ldr	r3, [pc, #88]	; (8005118 <HAL_DMA_Init+0x16c>)
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6859      	ldr	r1, [r3, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ca:	f003 031c 	and.w	r3, r3, #28
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	4911      	ldr	r1, [pc, #68]	; (8005118 <HAL_DMA_Init+0x16c>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	40020407 	.word	0x40020407
 8005100:	bffdfff8 	.word	0xbffdfff8
 8005104:	cccccccd 	.word	0xcccccccd
 8005108:	40020000 	.word	0x40020000
 800510c:	bffdfbf8 	.word	0xbffdfbf8
 8005110:	40020400 	.word	0x40020400
 8005114:	400200a8 	.word	0x400200a8
 8005118:	400204a8 	.word	0x400204a8

0800511c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005134:	2b01      	cmp	r3, #1
 8005136:	d101      	bne.n	800513c <HAL_DMA_Start_IT+0x20>
 8005138:	2302      	movs	r3, #2
 800513a:	e04b      	b.n	80051d4 <HAL_DMA_Start_IT+0xb8>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b01      	cmp	r3, #1
 800514e:	d13a      	bne.n	80051c6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f022 0201 	bic.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 f95f 	bl	8005438 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517e:	2b00      	cmp	r3, #0
 8005180:	d008      	beq.n	8005194 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 020e 	orr.w	r2, r2, #14
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e00f      	b.n	80051b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0204 	bic.w	r2, r2, #4
 80051a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 020a 	orr.w	r2, r2, #10
 80051b2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e005      	b.n	80051d2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80051ce:	2302      	movs	r3, #2
 80051d0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80051d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051e4:	2300      	movs	r3, #0
 80051e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d008      	beq.n	8005206 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2204      	movs	r2, #4
 80051f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e022      	b.n	800524c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 020e 	bic.w	r2, r2, #14
 8005214:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0201 	bic.w	r2, r2, #1
 8005224:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f003 021c 	and.w	r2, r3, #28
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2101      	movs	r1, #1
 8005234:	fa01 f202 	lsl.w	r2, r1, r2
 8005238:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800524a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d005      	beq.n	800527c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	73fb      	strb	r3, [r7, #15]
 800527a:	e029      	b.n	80052d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 020e 	bic.w	r2, r2, #14
 800528a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 0201 	bic.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a0:	f003 021c 	and.w	r2, r3, #28
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	2101      	movs	r1, #1
 80052aa:	fa01 f202 	lsl.w	r2, r1, r2
 80052ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	4798      	blx	r3
    }
  }
  return status;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	f003 031c 	and.w	r3, r3, #28
 80052fa:	2204      	movs	r2, #4
 80052fc:	409a      	lsls	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	4013      	ands	r3, r2
 8005302:	2b00      	cmp	r3, #0
 8005304:	d026      	beq.n	8005354 <HAL_DMA_IRQHandler+0x7a>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d021      	beq.n	8005354 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d107      	bne.n	800532e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0204 	bic.w	r2, r2, #4
 800532c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005332:	f003 021c 	and.w	r2, r3, #28
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2104      	movs	r1, #4
 800533c:	fa01 f202 	lsl.w	r2, r1, r2
 8005340:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	2b00      	cmp	r3, #0
 8005348:	d071      	beq.n	800542e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005352:	e06c      	b.n	800542e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005358:	f003 031c 	and.w	r3, r3, #28
 800535c:	2202      	movs	r2, #2
 800535e:	409a      	lsls	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4013      	ands	r3, r2
 8005364:	2b00      	cmp	r3, #0
 8005366:	d02e      	beq.n	80053c6 <HAL_DMA_IRQHandler+0xec>
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d029      	beq.n	80053c6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 020a 	bic.w	r2, r2, #10
 800538e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539c:	f003 021c 	and.w	r2, r3, #28
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	2102      	movs	r1, #2
 80053a6:	fa01 f202 	lsl.w	r2, r1, r2
 80053aa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d038      	beq.n	800542e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80053c4:	e033      	b.n	800542e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ca:	f003 031c 	and.w	r3, r3, #28
 80053ce:	2208      	movs	r2, #8
 80053d0:	409a      	lsls	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4013      	ands	r3, r2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d02a      	beq.n	8005430 <HAL_DMA_IRQHandler+0x156>
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d025      	beq.n	8005430 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 020e 	bic.w	r2, r2, #14
 80053f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f8:	f003 021c 	and.w	r2, r3, #28
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	2101      	movs	r1, #1
 8005402:	fa01 f202 	lsl.w	r2, r1, r2
 8005406:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800542e:	bf00      	nop
 8005430:	bf00      	nop
}
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544a:	f003 021c 	and.w	r2, r3, #28
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	2101      	movs	r1, #1
 8005454:	fa01 f202 	lsl.w	r2, r1, r2
 8005458:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b10      	cmp	r3, #16
 8005468:	d108      	bne.n	800547c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800547a:	e007      	b.n	800548c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	60da      	str	r2, [r3, #12]
}
 800548c:	bf00      	nop
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054a6:	e17f      	b.n	80057a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	2101      	movs	r1, #1
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	fa01 f303 	lsl.w	r3, r1, r3
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8171 	beq.w	80057a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f003 0303 	and.w	r3, r3, #3
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d005      	beq.n	80054d8 <HAL_GPIO_Init+0x40>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d130      	bne.n	800553a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	2203      	movs	r2, #3
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	43db      	mvns	r3, r3
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4013      	ands	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800550e:	2201      	movs	r2, #1
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	fa02 f303 	lsl.w	r3, r2, r3
 8005516:	43db      	mvns	r3, r3
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4013      	ands	r3, r2
 800551c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	091b      	lsrs	r3, r3, #4
 8005524:	f003 0201 	and.w	r2, r3, #1
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	fa02 f303 	lsl.w	r3, r2, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f003 0303 	and.w	r3, r3, #3
 8005542:	2b03      	cmp	r3, #3
 8005544:	d118      	bne.n	8005578 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800554c:	2201      	movs	r2, #1
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	08db      	lsrs	r3, r3, #3
 8005562:	f003 0201 	and.w	r2, r3, #1
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	fa02 f303 	lsl.w	r3, r2, r3
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	2b03      	cmp	r3, #3
 8005582:	d017      	beq.n	80055b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	2203      	movs	r2, #3
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	4013      	ands	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d123      	bne.n	8005608 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	08da      	lsrs	r2, r3, #3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3208      	adds	r2, #8
 80055c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	220f      	movs	r2, #15
 80055d8:	fa02 f303 	lsl.w	r3, r2, r3
 80055dc:	43db      	mvns	r3, r3
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4013      	ands	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	691a      	ldr	r2, [r3, #16]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	08da      	lsrs	r2, r3, #3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3208      	adds	r2, #8
 8005602:	6939      	ldr	r1, [r7, #16]
 8005604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	2203      	movs	r2, #3
 8005614:	fa02 f303 	lsl.w	r3, r2, r3
 8005618:	43db      	mvns	r3, r3
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4013      	ands	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 0203 	and.w	r2, r3, #3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	fa02 f303 	lsl.w	r3, r2, r3
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005644:	2b00      	cmp	r3, #0
 8005646:	f000 80ac 	beq.w	80057a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800564a:	4b5f      	ldr	r3, [pc, #380]	; (80057c8 <HAL_GPIO_Init+0x330>)
 800564c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800564e:	4a5e      	ldr	r2, [pc, #376]	; (80057c8 <HAL_GPIO_Init+0x330>)
 8005650:	f043 0301 	orr.w	r3, r3, #1
 8005654:	6613      	str	r3, [r2, #96]	; 0x60
 8005656:	4b5c      	ldr	r3, [pc, #368]	; (80057c8 <HAL_GPIO_Init+0x330>)
 8005658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005662:	4a5a      	ldr	r2, [pc, #360]	; (80057cc <HAL_GPIO_Init+0x334>)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	089b      	lsrs	r3, r3, #2
 8005668:	3302      	adds	r3, #2
 800566a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800566e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	220f      	movs	r2, #15
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800568c:	d025      	beq.n	80056da <HAL_GPIO_Init+0x242>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a4f      	ldr	r2, [pc, #316]	; (80057d0 <HAL_GPIO_Init+0x338>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d01f      	beq.n	80056d6 <HAL_GPIO_Init+0x23e>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a4e      	ldr	r2, [pc, #312]	; (80057d4 <HAL_GPIO_Init+0x33c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d019      	beq.n	80056d2 <HAL_GPIO_Init+0x23a>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a4d      	ldr	r2, [pc, #308]	; (80057d8 <HAL_GPIO_Init+0x340>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_GPIO_Init+0x236>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a4c      	ldr	r2, [pc, #304]	; (80057dc <HAL_GPIO_Init+0x344>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00d      	beq.n	80056ca <HAL_GPIO_Init+0x232>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a4b      	ldr	r2, [pc, #300]	; (80057e0 <HAL_GPIO_Init+0x348>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <HAL_GPIO_Init+0x22e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a4a      	ldr	r2, [pc, #296]	; (80057e4 <HAL_GPIO_Init+0x34c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d101      	bne.n	80056c2 <HAL_GPIO_Init+0x22a>
 80056be:	2306      	movs	r3, #6
 80056c0:	e00c      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056c2:	2307      	movs	r3, #7
 80056c4:	e00a      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056c6:	2305      	movs	r3, #5
 80056c8:	e008      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056ca:	2304      	movs	r3, #4
 80056cc:	e006      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056ce:	2303      	movs	r3, #3
 80056d0:	e004      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e002      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <HAL_GPIO_Init+0x244>
 80056da:	2300      	movs	r3, #0
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	f002 0203 	and.w	r2, r2, #3
 80056e2:	0092      	lsls	r2, r2, #2
 80056e4:	4093      	lsls	r3, r2
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80056ec:	4937      	ldr	r1, [pc, #220]	; (80057cc <HAL_GPIO_Init+0x334>)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	089b      	lsrs	r3, r3, #2
 80056f2:	3302      	adds	r3, #2
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056fa:	4b3b      	ldr	r3, [pc, #236]	; (80057e8 <HAL_GPIO_Init+0x350>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	43db      	mvns	r3, r3
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4013      	ands	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800571e:	4a32      	ldr	r2, [pc, #200]	; (80057e8 <HAL_GPIO_Init+0x350>)
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005724:	4b30      	ldr	r3, [pc, #192]	; (80057e8 <HAL_GPIO_Init+0x350>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	43db      	mvns	r3, r3
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4013      	ands	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d003      	beq.n	8005748 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005748:	4a27      	ldr	r2, [pc, #156]	; (80057e8 <HAL_GPIO_Init+0x350>)
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800574e:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <HAL_GPIO_Init+0x350>)
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	43db      	mvns	r3, r3
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4013      	ands	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005772:	4a1d      	ldr	r2, [pc, #116]	; (80057e8 <HAL_GPIO_Init+0x350>)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005778:	4b1b      	ldr	r3, [pc, #108]	; (80057e8 <HAL_GPIO_Init+0x350>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	43db      	mvns	r3, r3
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4013      	ands	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800579c:	4a12      	ldr	r2, [pc, #72]	; (80057e8 <HAL_GPIO_Init+0x350>)
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3301      	adds	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	fa22 f303 	lsr.w	r3, r2, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f47f ae78 	bne.w	80054a8 <HAL_GPIO_Init+0x10>
  }
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	40021000 	.word	0x40021000
 80057cc:	40010000 	.word	0x40010000
 80057d0:	48000400 	.word	0x48000400
 80057d4:	48000800 	.word	0x48000800
 80057d8:	48000c00 	.word	0x48000c00
 80057dc:	48001000 	.word	0x48001000
 80057e0:	48001400 	.word	0x48001400
 80057e4:	48001800 	.word	0x48001800
 80057e8:	40010400 	.word	0x40010400

080057ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80057fe:	887a      	ldrh	r2, [r7, #2]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4013      	ands	r3, r2
 8005804:	041a      	lsls	r2, r3, #16
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	43d9      	mvns	r1, r3
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	400b      	ands	r3, r1
 800580e:	431a      	orrs	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]
}
 8005814:	bf00      	nop
 8005816:	3714      	adds	r7, #20
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d101      	bne.n	8005832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e081      	b.n	8005936 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fe ff54 	bl	80046f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2224      	movs	r2, #36	; 0x24
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f022 0201 	bic.w	r2, r2, #1
 8005862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	2b01      	cmp	r3, #1
 8005888:	d107      	bne.n	800589a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	e006      	b.n	80058a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689a      	ldr	r2, [r3, #8]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	2b02      	cmp	r3, #2
 80058ae:	d104      	bne.n	80058ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	430a      	orrs	r2, r1
 80058f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	69d9      	ldr	r1, [r3, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1a      	ldr	r2, [r3, #32]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f042 0201 	orr.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	4608      	mov	r0, r1
 800594a:	4611      	mov	r1, r2
 800594c:	461a      	mov	r2, r3
 800594e:	4603      	mov	r3, r0
 8005950:	817b      	strh	r3, [r7, #10]
 8005952:	460b      	mov	r3, r1
 8005954:	813b      	strh	r3, [r7, #8]
 8005956:	4613      	mov	r3, r2
 8005958:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b20      	cmp	r3, #32
 8005964:	f040 80f9 	bne.w	8005b5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <HAL_I2C_Mem_Write+0x34>
 800596e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0ed      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_I2C_Mem_Write+0x4e>
 800598a:	2302      	movs	r3, #2
 800598c:	e0e6      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005996:	f7ff f9c7 	bl	8004d28 <HAL_GetTick>
 800599a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	2319      	movs	r3, #25
 80059a2:	2201      	movs	r2, #1
 80059a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 fac3 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d001      	beq.n	80059b8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e0d1      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2221      	movs	r2, #33	; 0x21
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2240      	movs	r2, #64	; 0x40
 80059c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80059d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059e0:	88f8      	ldrh	r0, [r7, #6]
 80059e2:	893a      	ldrh	r2, [r7, #8]
 80059e4:	8979      	ldrh	r1, [r7, #10]
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	4603      	mov	r3, r0
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 f9d3 	bl	8005d9c <I2C_RequestMemoryWrite>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d005      	beq.n	8005a08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0a9      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2bff      	cmp	r3, #255	; 0xff
 8005a10:	d90e      	bls.n	8005a30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	22ff      	movs	r2, #255	; 0xff
 8005a16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	8979      	ldrh	r1, [r7, #10]
 8005a20:	2300      	movs	r3, #0
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 fc2b 	bl	8006284 <I2C_TransferConfig>
 8005a2e:	e00f      	b.n	8005a50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	8979      	ldrh	r1, [r7, #10]
 8005a42:	2300      	movs	r3, #0
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fc1a 	bl	8006284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 faad 	bl	8005fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e07b      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	781a      	ldrb	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d034      	beq.n	8005b08 <HAL_I2C_Mem_Write+0x1c8>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d130      	bne.n	8005b08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	9300      	str	r3, [sp, #0]
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	2200      	movs	r2, #0
 8005aae:	2180      	movs	r1, #128	; 0x80
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 fa3f 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e04d      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2bff      	cmp	r3, #255	; 0xff
 8005ac8:	d90e      	bls.n	8005ae8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	22ff      	movs	r2, #255	; 0xff
 8005ace:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	8979      	ldrh	r1, [r7, #10]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fbcf 	bl	8006284 <I2C_TransferConfig>
 8005ae6:	e00f      	b.n	8005b08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	8979      	ldrh	r1, [r7, #10]
 8005afa:	2300      	movs	r3, #0
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fbbe 	bl	8006284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d19e      	bne.n	8005a50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 fa8c 	bl	8006034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e01a      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4b0a      	ldr	r3, [pc, #40]	; (8005b64 <HAL_I2C_Mem_Write+0x224>)
 8005b3a:	400b      	ands	r3, r1
 8005b3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e000      	b.n	8005b5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b5a:	2302      	movs	r3, #2
  }
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	fe00e800 	.word	0xfe00e800

08005b68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	4608      	mov	r0, r1
 8005b72:	4611      	mov	r1, r2
 8005b74:	461a      	mov	r2, r3
 8005b76:	4603      	mov	r3, r0
 8005b78:	817b      	strh	r3, [r7, #10]
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	813b      	strh	r3, [r7, #8]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b20      	cmp	r3, #32
 8005b8c:	f040 80fd 	bne.w	8005d8a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b90:	6a3b      	ldr	r3, [r7, #32]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_I2C_Mem_Read+0x34>
 8005b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ba2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0f1      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d101      	bne.n	8005bb6 <HAL_I2C_Mem_Read+0x4e>
 8005bb2:	2302      	movs	r3, #2
 8005bb4:	e0ea      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bbe:	f7ff f8b3 	bl	8004d28 <HAL_GetTick>
 8005bc2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	2319      	movs	r3, #25
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9af 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e0d5      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2222      	movs	r2, #34	; 0x22
 8005be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2240      	movs	r2, #64	; 0x40
 8005bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6a3a      	ldr	r2, [r7, #32]
 8005bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c08:	88f8      	ldrh	r0, [r7, #6]
 8005c0a:	893a      	ldrh	r2, [r7, #8]
 8005c0c:	8979      	ldrh	r1, [r7, #10]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	9301      	str	r3, [sp, #4]
 8005c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	4603      	mov	r3, r0
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f913 	bl	8005e44 <I2C_RequestMemoryRead>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0ad      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2bff      	cmp	r3, #255	; 0xff
 8005c38:	d90e      	bls.n	8005c58 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	22ff      	movs	r2, #255	; 0xff
 8005c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	8979      	ldrh	r1, [r7, #10]
 8005c48:	4b52      	ldr	r3, [pc, #328]	; (8005d94 <HAL_I2C_Mem_Read+0x22c>)
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fb17 	bl	8006284 <I2C_TransferConfig>
 8005c56:	e00f      	b.n	8005c78 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	8979      	ldrh	r1, [r7, #10]
 8005c6a:	4b4a      	ldr	r3, [pc, #296]	; (8005d94 <HAL_I2C_Mem_Read+0x22c>)
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fb06 	bl	8006284 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	9300      	str	r3, [sp, #0]
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	2200      	movs	r2, #0
 8005c80:	2104      	movs	r1, #4
 8005c82:	68f8      	ldr	r0, [r7, #12]
 8005c84:	f000 f956 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e07c      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c9c:	b2d2      	uxtb	r2, r2
 8005c9e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d034      	beq.n	8005d38 <HAL_I2C_Mem_Read+0x1d0>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d130      	bne.n	8005d38 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	9300      	str	r3, [sp, #0]
 8005cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2180      	movs	r1, #128	; 0x80
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f927 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e04d      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2bff      	cmp	r3, #255	; 0xff
 8005cf8:	d90e      	bls.n	8005d18 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	22ff      	movs	r2, #255	; 0xff
 8005cfe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	8979      	ldrh	r1, [r7, #10]
 8005d08:	2300      	movs	r3, #0
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fab7 	bl	8006284 <I2C_TransferConfig>
 8005d16:	e00f      	b.n	8005d38 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	8979      	ldrh	r1, [r7, #10]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 faa6 	bl	8006284 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d19a      	bne.n	8005c78 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f974 	bl	8006034 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e01a      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <HAL_I2C_Mem_Read+0x230>)
 8005d6a:	400b      	ands	r3, r1
 8005d6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3718      	adds	r7, #24
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	80002400 	.word	0x80002400
 8005d98:	fe00e800 	.word	0xfe00e800

08005d9c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	4608      	mov	r0, r1
 8005da6:	4611      	mov	r1, r2
 8005da8:	461a      	mov	r2, r3
 8005daa:	4603      	mov	r3, r0
 8005dac:	817b      	strh	r3, [r7, #10]
 8005dae:	460b      	mov	r3, r1
 8005db0:	813b      	strh	r3, [r7, #8]
 8005db2:	4613      	mov	r3, r2
 8005db4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005db6:	88fb      	ldrh	r3, [r7, #6]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	8979      	ldrh	r1, [r7, #10]
 8005dbc:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <I2C_RequestMemoryWrite+0xa4>)
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fa5d 	bl	8006284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	69b9      	ldr	r1, [r7, #24]
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8f0 	bl	8005fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e02c      	b.n	8005e38 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dde:	88fb      	ldrh	r3, [r7, #6]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d105      	bne.n	8005df0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005de4:	893b      	ldrh	r3, [r7, #8]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	629a      	str	r2, [r3, #40]	; 0x28
 8005dee:	e015      	b.n	8005e1c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005df0:	893b      	ldrh	r3, [r7, #8]
 8005df2:	0a1b      	lsrs	r3, r3, #8
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	69b9      	ldr	r1, [r7, #24]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f8d6 	bl	8005fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e012      	b.n	8005e38 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e12:	893b      	ldrh	r3, [r7, #8]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2200      	movs	r2, #0
 8005e24:	2180      	movs	r1, #128	; 0x80
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f000 f884 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e000      	b.n	8005e38 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	80002000 	.word	0x80002000

08005e44 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af02      	add	r7, sp, #8
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	4611      	mov	r1, r2
 8005e50:	461a      	mov	r2, r3
 8005e52:	4603      	mov	r3, r0
 8005e54:	817b      	strh	r3, [r7, #10]
 8005e56:	460b      	mov	r3, r1
 8005e58:	813b      	strh	r3, [r7, #8]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	8979      	ldrh	r1, [r7, #10]
 8005e64:	4b20      	ldr	r3, [pc, #128]	; (8005ee8 <I2C_RequestMemoryRead+0xa4>)
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fa0a 	bl	8006284 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e70:	69fa      	ldr	r2, [r7, #28]
 8005e72:	69b9      	ldr	r1, [r7, #24]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f89d 	bl	8005fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e02c      	b.n	8005ede <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e84:	88fb      	ldrh	r3, [r7, #6]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d105      	bne.n	8005e96 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e8a:	893b      	ldrh	r3, [r7, #8]
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	629a      	str	r2, [r3, #40]	; 0x28
 8005e94:	e015      	b.n	8005ec2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e96:	893b      	ldrh	r3, [r7, #8]
 8005e98:	0a1b      	lsrs	r3, r3, #8
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	69b9      	ldr	r1, [r7, #24]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f883 	bl	8005fb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e012      	b.n	8005ede <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005eb8:	893b      	ldrh	r3, [r7, #8]
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2140      	movs	r1, #64	; 0x40
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f831 	bl	8005f34 <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	80002000 	.word	0x80002000

08005eec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d103      	bne.n	8005f0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2200      	movs	r2, #0
 8005f08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d007      	beq.n	8005f28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	619a      	str	r2, [r3, #24]
  }
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b084      	sub	sp, #16
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	60f8      	str	r0, [r7, #12]
 8005f3c:	60b9      	str	r1, [r7, #8]
 8005f3e:	603b      	str	r3, [r7, #0]
 8005f40:	4613      	mov	r3, r2
 8005f42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f44:	e022      	b.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4c:	d01e      	beq.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f4e:	f7fe feeb 	bl	8004d28 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	683a      	ldr	r2, [r7, #0]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d302      	bcc.n	8005f64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d113      	bne.n	8005f8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e00f      	b.n	8005fac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	699a      	ldr	r2, [r3, #24]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4013      	ands	r3, r2
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2301      	moveq	r3, #1
 8005f9e:	2300      	movne	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	79fb      	ldrb	r3, [r7, #7]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d0cd      	beq.n	8005f46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fc0:	e02c      	b.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f870 	bl	80060ac <I2C_IsErrorOccurred>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e02a      	b.n	800602c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fdc:	d01e      	beq.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fde:	f7fe fea3 	bl	8004d28 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d302      	bcc.n	8005ff4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d113      	bne.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff8:	f043 0220 	orr.w	r2, r3, #32
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e007      	b.n	800602c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b02      	cmp	r3, #2
 8006028:	d1cb      	bne.n	8005fc2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006040:	e028      	b.n	8006094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f830 	bl	80060ac <I2C_IsErrorOccurred>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e026      	b.n	80060a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006056:	f7fe fe67 	bl	8004d28 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d113      	bne.n	8006094 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e007      	b.n	80060a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d1cf      	bne.n	8006042 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	; 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d075      	beq.n	80061c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2210      	movs	r2, #16
 80060de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060e0:	e056      	b.n	8006190 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060e8:	d052      	beq.n	8006190 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fe fe1d 	bl	8004d28 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_IsErrorOccurred+0x54>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d147      	bne.n	8006190 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006112:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800611e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006122:	d12e      	bne.n	8006182 <I2C_IsErrorOccurred+0xd6>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800612a:	d02a      	beq.n	8006182 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	2b20      	cmp	r3, #32
 8006130:	d027      	beq.n	8006182 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006140:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006142:	f7fe fdf1 	bl	8004d28 <HAL_GetTick>
 8006146:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006148:	e01b      	b.n	8006182 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800614a:	f7fe fded 	bl	8004d28 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b19      	cmp	r3, #25
 8006156:	d914      	bls.n	8006182 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	f043 0220 	orr.w	r2, r3, #32
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b20      	cmp	r3, #32
 800618e:	d1dc      	bne.n	800614a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b20      	cmp	r3, #32
 800619c:	d003      	beq.n	80061a6 <I2C_IsErrorOccurred+0xfa>
 800619e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d09d      	beq.n	80060e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80061a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d103      	bne.n	80061b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2220      	movs	r2, #32
 80061b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	f043 0304 	orr.w	r3, r3, #4
 80061bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00b      	beq.n	80061ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061f8:	6a3b      	ldr	r3, [r7, #32]
 80061fa:	f043 0308 	orr.w	r3, r3, #8
 80061fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006208:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00b      	beq.n	8006232 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f043 0302 	orr.w	r3, r3, #2
 8006220:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 7200 	mov.w	r2, #512	; 0x200
 800622a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006236:	2b00      	cmp	r3, #0
 8006238:	d01c      	beq.n	8006274 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f7ff fe56 	bl	8005eec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b0d      	ldr	r3, [pc, #52]	; (8006280 <I2C_IsErrorOccurred+0x1d4>)
 800624c:	400b      	ands	r3, r1
 800624e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006254:	6a3b      	ldr	r3, [r7, #32]
 8006256:	431a      	orrs	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006274:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006278:	4618      	mov	r0, r3
 800627a:	3728      	adds	r7, #40	; 0x28
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	fe00e800 	.word	0xfe00e800

08006284 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006284:	b480      	push	{r7}
 8006286:	b087      	sub	sp, #28
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	607b      	str	r3, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	817b      	strh	r3, [r7, #10]
 8006292:	4613      	mov	r3, r2
 8006294:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006296:	897b      	ldrh	r3, [r7, #10]
 8006298:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800629c:	7a7b      	ldrb	r3, [r7, #9]
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062a4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80062aa:	6a3b      	ldr	r3, [r7, #32]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062b2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	0d5b      	lsrs	r3, r3, #21
 80062be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80062c2:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <I2C_TransferConfig+0x60>)
 80062c4:	430b      	orrs	r3, r1
 80062c6:	43db      	mvns	r3, r3
 80062c8:	ea02 0103 	and.w	r1, r2, r3
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	03ff63ff 	.word	0x03ff63ff

080062e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d138      	bne.n	8006370 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006304:	2b01      	cmp	r3, #1
 8006306:	d101      	bne.n	800630c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006308:	2302      	movs	r3, #2
 800630a:	e032      	b.n	8006372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2224      	movs	r2, #36	; 0x24
 8006318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0201 	bic.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800633a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6819      	ldr	r1, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f042 0201 	orr.w	r2, r2, #1
 800635a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800636c:	2300      	movs	r3, #0
 800636e:	e000      	b.n	8006372 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006370:	2302      	movs	r3, #2
  }
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800637e:	b480      	push	{r7}
 8006380:	b085      	sub	sp, #20
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
 8006386:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b20      	cmp	r3, #32
 8006392:	d139      	bne.n	8006408 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800639e:	2302      	movs	r3, #2
 80063a0:	e033      	b.n	800640a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2224      	movs	r2, #36	; 0x24
 80063ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0201 	bic.w	r2, r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80063d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0201 	orr.w	r2, r2, #1
 80063f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	e000      	b.n	800640a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006408:	2302      	movs	r3, #2
  }
}
 800640a:	4618      	mov	r0, r3
 800640c:	3714      	adds	r7, #20
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <HAL_PWREx_GetVoltageRange+0x18>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006424:	4618      	mov	r0, r3
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40007000 	.word	0x40007000

08006434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006442:	d130      	bne.n	80064a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006444:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800644c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006450:	d038      	beq.n	80064c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006452:	4b20      	ldr	r3, [pc, #128]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800645a:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800645c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006460:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2232      	movs	r2, #50	; 0x32
 8006468:	fb02 f303 	mul.w	r3, r2, r3
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	0c9b      	lsrs	r3, r3, #18
 8006474:	3301      	adds	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006478:	e002      	b.n	8006480 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	3b01      	subs	r3, #1
 800647e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006480:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800648c:	d102      	bne.n	8006494 <HAL_PWREx_ControlVoltageScaling+0x60>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1f2      	bne.n	800647a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a0:	d110      	bne.n	80064c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e00f      	b.n	80064c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80064ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b2:	d007      	beq.n	80064c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064b4:	4b07      	ldr	r3, [pc, #28]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064bc:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80064be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40007000 	.word	0x40007000
 80064d8:	20000000 	.word	0x20000000
 80064dc:	431bde83 	.word	0x431bde83

080064e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b088      	sub	sp, #32
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e3d8      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f2:	4b97      	ldr	r3, [pc, #604]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f003 030c 	and.w	r3, r3, #12
 80064fa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064fc:	4b94      	ldr	r3, [pc, #592]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0303 	and.w	r3, r3, #3
 8006504:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0310 	and.w	r3, r3, #16
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80e4 	beq.w	80066dc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d007      	beq.n	800652a <HAL_RCC_OscConfig+0x4a>
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	f040 808b 	bne.w	8006638 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	2b01      	cmp	r3, #1
 8006526:	f040 8087 	bne.w	8006638 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800652a:	4b89      	ldr	r3, [pc, #548]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d005      	beq.n	8006542 <HAL_RCC_OscConfig+0x62>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	699b      	ldr	r3, [r3, #24]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e3b0      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a1a      	ldr	r2, [r3, #32]
 8006546:	4b82      	ldr	r3, [pc, #520]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0308 	and.w	r3, r3, #8
 800654e:	2b00      	cmp	r3, #0
 8006550:	d004      	beq.n	800655c <HAL_RCC_OscConfig+0x7c>
 8006552:	4b7f      	ldr	r3, [pc, #508]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800655a:	e005      	b.n	8006568 <HAL_RCC_OscConfig+0x88>
 800655c:	4b7c      	ldr	r3, [pc, #496]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800655e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006562:	091b      	lsrs	r3, r3, #4
 8006564:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006568:	4293      	cmp	r3, r2
 800656a:	d223      	bcs.n	80065b4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	4618      	mov	r0, r3
 8006572:	f000 fd43 	bl	8006ffc <RCC_SetFlashLatencyFromMSIRange>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e391      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006580:	4b73      	ldr	r3, [pc, #460]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a72      	ldr	r2, [pc, #456]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006586:	f043 0308 	orr.w	r3, r3, #8
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	4b70      	ldr	r3, [pc, #448]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	496d      	ldr	r1, [pc, #436]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800659a:	4313      	orrs	r3, r2
 800659c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800659e:	4b6c      	ldr	r3, [pc, #432]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	021b      	lsls	r3, r3, #8
 80065ac:	4968      	ldr	r1, [pc, #416]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	604b      	str	r3, [r1, #4]
 80065b2:	e025      	b.n	8006600 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065b4:	4b66      	ldr	r3, [pc, #408]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a65      	ldr	r2, [pc, #404]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065ba:	f043 0308 	orr.w	r3, r3, #8
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	4b63      	ldr	r3, [pc, #396]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	4960      	ldr	r1, [pc, #384]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065d2:	4b5f      	ldr	r3, [pc, #380]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	495b      	ldr	r1, [pc, #364]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80065e2:	4313      	orrs	r3, r2
 80065e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d109      	bne.n	8006600 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fd03 	bl	8006ffc <RCC_SetFlashLatencyFromMSIRange>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e351      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006600:	f000 fc38 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8006604:	4602      	mov	r2, r0
 8006606:	4b52      	ldr	r3, [pc, #328]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	091b      	lsrs	r3, r3, #4
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	4950      	ldr	r1, [pc, #320]	; (8006754 <HAL_RCC_OscConfig+0x274>)
 8006612:	5ccb      	ldrb	r3, [r1, r3]
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
 800661c:	4a4e      	ldr	r2, [pc, #312]	; (8006758 <HAL_RCC_OscConfig+0x278>)
 800661e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006620:	4b4e      	ldr	r3, [pc, #312]	; (800675c <HAL_RCC_OscConfig+0x27c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe fb2f 	bl	8004c88 <HAL_InitTick>
 800662a:	4603      	mov	r3, r0
 800662c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d052      	beq.n	80066da <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	e335      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d032      	beq.n	80066a6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006640:	4b43      	ldr	r3, [pc, #268]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a42      	ldr	r2, [pc, #264]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006646:	f043 0301 	orr.w	r3, r3, #1
 800664a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800664c:	f7fe fb6c 	bl	8004d28 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006654:	f7fe fb68 	bl	8004d28 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b02      	cmp	r3, #2
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e31e      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006666:	4b3a      	ldr	r3, [pc, #232]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0f0      	beq.n	8006654 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006672:	4b37      	ldr	r3, [pc, #220]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a36      	ldr	r2, [pc, #216]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006678:	f043 0308 	orr.w	r3, r3, #8
 800667c:	6013      	str	r3, [r2, #0]
 800667e:	4b34      	ldr	r3, [pc, #208]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	4931      	ldr	r1, [pc, #196]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800668c:	4313      	orrs	r3, r2
 800668e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006690:	4b2f      	ldr	r3, [pc, #188]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	021b      	lsls	r3, r3, #8
 800669e:	492c      	ldr	r1, [pc, #176]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	604b      	str	r3, [r1, #4]
 80066a4:	e01a      	b.n	80066dc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066a6:	4b2a      	ldr	r3, [pc, #168]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a29      	ldr	r2, [pc, #164]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066b2:	f7fe fb39 	bl	8004d28 <HAL_GetTick>
 80066b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066b8:	e008      	b.n	80066cc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066ba:	f7fe fb35 	bl	8004d28 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	2b02      	cmp	r3, #2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e2eb      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80066cc:	4b20      	ldr	r3, [pc, #128]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0302 	and.w	r3, r3, #2
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1f0      	bne.n	80066ba <HAL_RCC_OscConfig+0x1da>
 80066d8:	e000      	b.n	80066dc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d074      	beq.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d005      	beq.n	80066fa <HAL_RCC_OscConfig+0x21a>
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	2b0c      	cmp	r3, #12
 80066f2:	d10e      	bne.n	8006712 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d10b      	bne.n	8006712 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066fa:	4b15      	ldr	r3, [pc, #84]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d064      	beq.n	80067d0 <HAL_RCC_OscConfig+0x2f0>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d160      	bne.n	80067d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e2c8      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800671a:	d106      	bne.n	800672a <HAL_RCC_OscConfig+0x24a>
 800671c:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a0b      	ldr	r2, [pc, #44]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006726:	6013      	str	r3, [r2, #0]
 8006728:	e026      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006732:	d115      	bne.n	8006760 <HAL_RCC_OscConfig+0x280>
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a05      	ldr	r2, [pc, #20]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 800673a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	4b03      	ldr	r3, [pc, #12]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a02      	ldr	r2, [pc, #8]	; (8006750 <HAL_RCC_OscConfig+0x270>)
 8006746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	e014      	b.n	8006778 <HAL_RCC_OscConfig+0x298>
 800674e:	bf00      	nop
 8006750:	40021000 	.word	0x40021000
 8006754:	0800d694 	.word	0x0800d694
 8006758:	20000000 	.word	0x20000000
 800675c:	20000004 	.word	0x20000004
 8006760:	4ba0      	ldr	r3, [pc, #640]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a9f      	ldr	r2, [pc, #636]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676a:	6013      	str	r3, [r2, #0]
 800676c:	4b9d      	ldr	r3, [pc, #628]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a9c      	ldr	r2, [pc, #624]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d013      	beq.n	80067a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006780:	f7fe fad2 	bl	8004d28 <HAL_GetTick>
 8006784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006786:	e008      	b.n	800679a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006788:	f7fe face 	bl	8004d28 <HAL_GetTick>
 800678c:	4602      	mov	r2, r0
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	2b64      	cmp	r3, #100	; 0x64
 8006794:	d901      	bls.n	800679a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e284      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800679a:	4b92      	ldr	r3, [pc, #584]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d0f0      	beq.n	8006788 <HAL_RCC_OscConfig+0x2a8>
 80067a6:	e014      	b.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a8:	f7fe fabe 	bl	8004d28 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b0:	f7fe faba 	bl	8004d28 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b64      	cmp	r3, #100	; 0x64
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e270      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067c2:	4b88      	ldr	r3, [pc, #544]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f0      	bne.n	80067b0 <HAL_RCC_OscConfig+0x2d0>
 80067ce:	e000      	b.n	80067d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d060      	beq.n	80068a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b04      	cmp	r3, #4
 80067e2:	d005      	beq.n	80067f0 <HAL_RCC_OscConfig+0x310>
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b0c      	cmp	r3, #12
 80067e8:	d119      	bne.n	800681e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d116      	bne.n	800681e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f0:	4b7c      	ldr	r3, [pc, #496]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_RCC_OscConfig+0x328>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e24d      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b76      	ldr	r3, [pc, #472]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	061b      	lsls	r3, r3, #24
 8006816:	4973      	ldr	r1, [pc, #460]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006818:	4313      	orrs	r3, r2
 800681a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800681c:	e040      	b.n	80068a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d023      	beq.n	800686e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006826:	4b6f      	ldr	r3, [pc, #444]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a6e      	ldr	r2, [pc, #440]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006830:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006832:	f7fe fa79 	bl	8004d28 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683a:	f7fe fa75 	bl	8004d28 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e22b      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800684c:	4b65      	ldr	r3, [pc, #404]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006858:	4b62      	ldr	r3, [pc, #392]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	061b      	lsls	r3, r3, #24
 8006866:	495f      	ldr	r1, [pc, #380]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006868:	4313      	orrs	r3, r2
 800686a:	604b      	str	r3, [r1, #4]
 800686c:	e018      	b.n	80068a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686e:	4b5d      	ldr	r3, [pc, #372]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a5c      	ldr	r2, [pc, #368]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687a:	f7fe fa55 	bl	8004d28 <HAL_GetTick>
 800687e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006880:	e008      	b.n	8006894 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006882:	f7fe fa51 	bl	8004d28 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	1ad3      	subs	r3, r2, r3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d901      	bls.n	8006894 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e207      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006894:	4b53      	ldr	r3, [pc, #332]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800689c:	2b00      	cmp	r3, #0
 800689e:	d1f0      	bne.n	8006882 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d03c      	beq.n	8006926 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01c      	beq.n	80068ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068b4:	4b4b      	ldr	r3, [pc, #300]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80068b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068ba:	4a4a      	ldr	r2, [pc, #296]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80068bc:	f043 0301 	orr.w	r3, r3, #1
 80068c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c4:	f7fe fa30 	bl	8004d28 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068cc:	f7fe fa2c 	bl	8004d28 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e1e2      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068de:	4b41      	ldr	r3, [pc, #260]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80068e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0ef      	beq.n	80068cc <HAL_RCC_OscConfig+0x3ec>
 80068ec:	e01b      	b.n	8006926 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ee:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80068f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068f4:	4a3b      	ldr	r2, [pc, #236]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fe:	f7fe fa13 	bl	8004d28 <HAL_GetTick>
 8006902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006906:	f7fe fa0f 	bl	8004d28 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e1c5      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006918:	4b32      	ldr	r3, [pc, #200]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800691a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1ef      	bne.n	8006906 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f003 0304 	and.w	r3, r3, #4
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80a6 	beq.w	8006a80 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006934:	2300      	movs	r3, #0
 8006936:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006938:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800693a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800693c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10d      	bne.n	8006960 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006944:	4b27      	ldr	r3, [pc, #156]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006948:	4a26      	ldr	r2, [pc, #152]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 800694a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800694e:	6593      	str	r3, [r2, #88]	; 0x58
 8006950:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 8006952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006958:	60bb      	str	r3, [r7, #8]
 800695a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800695c:	2301      	movs	r3, #1
 800695e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006960:	4b21      	ldr	r3, [pc, #132]	; (80069e8 <HAL_RCC_OscConfig+0x508>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d118      	bne.n	800699e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800696c:	4b1e      	ldr	r3, [pc, #120]	; (80069e8 <HAL_RCC_OscConfig+0x508>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a1d      	ldr	r2, [pc, #116]	; (80069e8 <HAL_RCC_OscConfig+0x508>)
 8006972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006976:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006978:	f7fe f9d6 	bl	8004d28 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006980:	f7fe f9d2 	bl	8004d28 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e188      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006992:	4b15      	ldr	r3, [pc, #84]	; (80069e8 <HAL_RCC_OscConfig+0x508>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d108      	bne.n	80069b8 <HAL_RCC_OscConfig+0x4d8>
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80069a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ac:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069b6:	e029      	b.n	8006a0c <HAL_RCC_OscConfig+0x52c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	2b05      	cmp	r3, #5
 80069be:	d115      	bne.n	80069ec <HAL_RCC_OscConfig+0x50c>
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c6:	4a07      	ldr	r2, [pc, #28]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80069c8:	f043 0304 	orr.w	r3, r3, #4
 80069cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069d0:	4b04      	ldr	r3, [pc, #16]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80069d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d6:	4a03      	ldr	r2, [pc, #12]	; (80069e4 <HAL_RCC_OscConfig+0x504>)
 80069d8:	f043 0301 	orr.w	r3, r3, #1
 80069dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069e0:	e014      	b.n	8006a0c <HAL_RCC_OscConfig+0x52c>
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	40007000 	.word	0x40007000
 80069ec:	4b91      	ldr	r3, [pc, #580]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 80069ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069f2:	4a90      	ldr	r2, [pc, #576]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069fc:	4b8d      	ldr	r3, [pc, #564]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 80069fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a02:	4a8c      	ldr	r2, [pc, #560]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006a04:	f023 0304 	bic.w	r3, r3, #4
 8006a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d016      	beq.n	8006a42 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a14:	f7fe f988 	bl	8004d28 <HAL_GetTick>
 8006a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a1a:	e00a      	b.n	8006a32 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1c:	f7fe f984 	bl	8004d28 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e138      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a32:	4b80      	ldr	r3, [pc, #512]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ed      	beq.n	8006a1c <HAL_RCC_OscConfig+0x53c>
 8006a40:	e015      	b.n	8006a6e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a42:	f7fe f971 	bl	8004d28 <HAL_GetTick>
 8006a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a48:	e00a      	b.n	8006a60 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a4a:	f7fe f96d 	bl	8004d28 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e121      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a60:	4b74      	ldr	r3, [pc, #464]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a66:	f003 0302 	and.w	r3, r3, #2
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1ed      	bne.n	8006a4a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d105      	bne.n	8006a80 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a74:	4b6f      	ldr	r3, [pc, #444]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a78:	4a6e      	ldr	r2, [pc, #440]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 810c 	beq.w	8006ca2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	f040 80d4 	bne.w	8006c3c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a94:	4b67      	ldr	r3, [pc, #412]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	f003 0203 	and.w	r2, r3, #3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d130      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d127      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d11f      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ad4:	2a07      	cmp	r2, #7
 8006ad6:	bf14      	ite	ne
 8006ad8:	2201      	movne	r2, #1
 8006ada:	2200      	moveq	r2, #0
 8006adc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d113      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aec:	085b      	lsrs	r3, r3, #1
 8006aee:	3b01      	subs	r3, #1
 8006af0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d109      	bne.n	8006b0a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b00:	085b      	lsrs	r3, r3, #1
 8006b02:	3b01      	subs	r3, #1
 8006b04:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d06e      	beq.n	8006be8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b0c      	cmp	r3, #12
 8006b0e:	d069      	beq.n	8006be4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b10:	4b48      	ldr	r3, [pc, #288]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d105      	bne.n	8006b28 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006b1c:	4b45      	ldr	r3, [pc, #276]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e0bb      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b2c:	4b41      	ldr	r3, [pc, #260]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a40      	ldr	r2, [pc, #256]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b36:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b38:	f7fe f8f6 	bl	8004d28 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b40:	f7fe f8f2 	bl	8004d28 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e0a8      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b52:	4b38      	ldr	r3, [pc, #224]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b5e:	4b35      	ldr	r3, [pc, #212]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	4b35      	ldr	r3, [pc, #212]	; (8006c38 <HAL_RCC_OscConfig+0x758>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b6e:	3a01      	subs	r2, #1
 8006b70:	0112      	lsls	r2, r2, #4
 8006b72:	4311      	orrs	r1, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b78:	0212      	lsls	r2, r2, #8
 8006b7a:	4311      	orrs	r1, r2
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b80:	0852      	lsrs	r2, r2, #1
 8006b82:	3a01      	subs	r2, #1
 8006b84:	0552      	lsls	r2, r2, #21
 8006b86:	4311      	orrs	r1, r2
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b8c:	0852      	lsrs	r2, r2, #1
 8006b8e:	3a01      	subs	r2, #1
 8006b90:	0652      	lsls	r2, r2, #25
 8006b92:	4311      	orrs	r1, r2
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b98:	0912      	lsrs	r2, r2, #4
 8006b9a:	0452      	lsls	r2, r2, #17
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	4925      	ldr	r1, [pc, #148]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006ba4:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a22      	ldr	r2, [pc, #136]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006baa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bb0:	4b20      	ldr	r3, [pc, #128]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	4a1f      	ldr	r2, [pc, #124]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bbc:	f7fe f8b4 	bl	8004d28 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7fe f8b0 	bl	8004d28 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e066      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd6:	4b17      	ldr	r3, [pc, #92]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006be2:	e05e      	b.n	8006ca2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e05d      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be8:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d156      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bf4:	4b0f      	ldr	r3, [pc, #60]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a0e      	ldr	r2, [pc, #56]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006bfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bfe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c00:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	4a0b      	ldr	r2, [pc, #44]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c0a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c0c:	f7fe f88c 	bl	8004d28 <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c14:	f7fe f888 	bl	8004d28 <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e03e      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c26:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <HAL_RCC_OscConfig+0x754>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0f0      	beq.n	8006c14 <HAL_RCC_OscConfig+0x734>
 8006c32:	e036      	b.n	8006ca2 <HAL_RCC_OscConfig+0x7c2>
 8006c34:	40021000 	.word	0x40021000
 8006c38:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	2b0c      	cmp	r3, #12
 8006c40:	d02d      	beq.n	8006c9e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c42:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a19      	ldr	r2, [pc, #100]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8006c4e:	4b17      	ldr	r3, [pc, #92]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d105      	bne.n	8006c66 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c5a:	4b14      	ldr	r3, [pc, #80]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	4a13      	ldr	r2, [pc, #76]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c60:	f023 0303 	bic.w	r3, r3, #3
 8006c64:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	4a10      	ldr	r2, [pc, #64]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c76:	f7fe f857 	bl	8004d28 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c7e:	f7fe f853 	bl	8004d28 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e009      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c90:	4b06      	ldr	r3, [pc, #24]	; (8006cac <HAL_RCC_OscConfig+0x7cc>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1f0      	bne.n	8006c7e <HAL_RCC_OscConfig+0x79e>
 8006c9c:	e001      	b.n	8006ca2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3720      	adds	r7, #32
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	40021000 	.word	0x40021000

08006cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0c8      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cc4:	4b66      	ldr	r3, [pc, #408]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d910      	bls.n	8006cf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd2:	4b63      	ldr	r3, [pc, #396]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f023 0207 	bic.w	r2, r3, #7
 8006cda:	4961      	ldr	r1, [pc, #388]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b5f      	ldr	r3, [pc, #380]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e0b0      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0301 	and.w	r3, r3, #1
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d04c      	beq.n	8006d9a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d107      	bne.n	8006d18 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d08:	4b56      	ldr	r3, [pc, #344]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d121      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e09e      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d107      	bne.n	8006d30 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d20:	4b50      	ldr	r3, [pc, #320]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d115      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e092      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d107      	bne.n	8006d48 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d38:	4b4a      	ldr	r3, [pc, #296]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e086      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d48:	4b46      	ldr	r3, [pc, #280]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d101      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e07e      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d58:	4b42      	ldr	r3, [pc, #264]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f023 0203 	bic.w	r2, r3, #3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	493f      	ldr	r1, [pc, #252]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d6a:	f7fd ffdd 	bl	8004d28 <HAL_GetTick>
 8006d6e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d70:	e00a      	b.n	8006d88 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d72:	f7fd ffd9 	bl	8004d28 <HAL_GetTick>
 8006d76:	4602      	mov	r2, r0
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e066      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d88:	4b36      	ldr	r3, [pc, #216]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f003 020c 	and.w	r2, r3, #12
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d1eb      	bne.n	8006d72 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d008      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006da6:	4b2f      	ldr	r3, [pc, #188]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	492c      	ldr	r1, [pc, #176]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006db8:	4b29      	ldr	r3, [pc, #164]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d210      	bcs.n	8006de8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dc6:	4b26      	ldr	r3, [pc, #152]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f023 0207 	bic.w	r2, r3, #7
 8006dce:	4924      	ldr	r1, [pc, #144]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dd6:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <HAL_RCC_ClockConfig+0x1b0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0307 	and.w	r3, r3, #7
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d001      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	e036      	b.n	8006e56 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d008      	beq.n	8006e06 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006df4:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	4918      	ldr	r1, [pc, #96]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006e02:	4313      	orrs	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0308 	and.w	r3, r3, #8
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e12:	4b14      	ldr	r3, [pc, #80]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4910      	ldr	r1, [pc, #64]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e26:	f000 f825 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <HAL_RCC_ClockConfig+0x1b4>)
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	091b      	lsrs	r3, r3, #4
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	490c      	ldr	r1, [pc, #48]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006e38:	5ccb      	ldrb	r3, [r1, r3]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e42:	4a0a      	ldr	r2, [pc, #40]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e46:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <HAL_RCC_ClockConfig+0x1c0>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fd ff1c 	bl	8004c88 <HAL_InitTick>
 8006e50:	4603      	mov	r3, r0
 8006e52:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e54:	7afb      	ldrb	r3, [r7, #11]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40022000 	.word	0x40022000
 8006e64:	40021000 	.word	0x40021000
 8006e68:	0800d694 	.word	0x0800d694
 8006e6c:	20000000 	.word	0x20000000
 8006e70:	20000004 	.word	0x20000004

08006e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	; 0x24
 8006e78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	2300      	movs	r3, #0
 8006e80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e82:	4b3e      	ldr	r3, [pc, #248]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 030c 	and.w	r3, r3, #12
 8006e8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0303 	and.w	r3, r3, #3
 8006e94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d005      	beq.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	2b0c      	cmp	r3, #12
 8006ea0:	d121      	bne.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d11e      	bne.n	8006ee6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006ea8:	4b34      	ldr	r3, [pc, #208]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006eb4:	4b31      	ldr	r3, [pc, #196]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	f003 030f 	and.w	r3, r3, #15
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e005      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ec4:	4b2d      	ldr	r3, [pc, #180]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ed0:	4a2b      	ldr	r2, [pc, #172]	; (8006f80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ed8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10d      	bne.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ee4:	e00a      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d102      	bne.n	8006ef2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	e004      	b.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d101      	bne.n	8006efc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006ef8:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006efa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b0c      	cmp	r3, #12
 8006f00:	d134      	bne.n	8006f6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f02:	4b1e      	ldr	r3, [pc, #120]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d003      	beq.n	8006f1a <HAL_RCC_GetSysClockFreq+0xa6>
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d003      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0xac>
 8006f18:	e005      	b.n	8006f26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f1a:	4b1a      	ldr	r3, [pc, #104]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f1c:	617b      	str	r3, [r7, #20]
      break;
 8006f1e:	e005      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f20:	4b19      	ldr	r3, [pc, #100]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f22:	617b      	str	r3, [r7, #20]
      break;
 8006f24:	e002      	b.n	8006f2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	617b      	str	r3, [r7, #20]
      break;
 8006f2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f2c:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	091b      	lsrs	r3, r3, #4
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	3301      	adds	r3, #1
 8006f38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	fb03 f202 	mul.w	r2, r3, r2
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f52:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <HAL_RCC_GetSysClockFreq+0x108>)
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	0e5b      	lsrs	r3, r3, #25
 8006f58:	f003 0303 	and.w	r3, r3, #3
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f62:	697a      	ldr	r2, [r7, #20]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3724      	adds	r7, #36	; 0x24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	0800d6ac 	.word	0x0800d6ac
 8006f84:	00f42400 	.word	0x00f42400
 8006f88:	007a1200 	.word	0x007a1200

08006f8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f90:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f92:	681b      	ldr	r3, [r3, #0]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	20000000 	.word	0x20000000

08006fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006fa8:	f7ff fff0 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
 8006fac:	4602      	mov	r2, r0
 8006fae:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	0a1b      	lsrs	r3, r3, #8
 8006fb4:	f003 0307 	and.w	r3, r3, #7
 8006fb8:	4904      	ldr	r1, [pc, #16]	; (8006fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8006fba:	5ccb      	ldrb	r3, [r1, r3]
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40021000 	.word	0x40021000
 8006fcc:	0800d6a4 	.word	0x0800d6a4

08006fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fd4:	f7ff ffda 	bl	8006f8c <HAL_RCC_GetHCLKFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b06      	ldr	r3, [pc, #24]	; (8006ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	0adb      	lsrs	r3, r3, #11
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	4904      	ldr	r1, [pc, #16]	; (8006ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	0800d6a4 	.word	0x0800d6a4

08006ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007008:	4b2a      	ldr	r3, [pc, #168]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007014:	f7ff fa00 	bl	8006418 <HAL_PWREx_GetVoltageRange>
 8007018:	6178      	str	r0, [r7, #20]
 800701a:	e014      	b.n	8007046 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800701c:	4b25      	ldr	r3, [pc, #148]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800701e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007020:	4a24      	ldr	r2, [pc, #144]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007026:	6593      	str	r3, [r2, #88]	; 0x58
 8007028:	4b22      	ldr	r3, [pc, #136]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800702a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007034:	f7ff f9f0 	bl	8006418 <HAL_PWREx_GetVoltageRange>
 8007038:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800703a:	4b1e      	ldr	r3, [pc, #120]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800703c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800703e:	4a1d      	ldr	r2, [pc, #116]	; (80070b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007044:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704c:	d10b      	bne.n	8007066 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b80      	cmp	r3, #128	; 0x80
 8007052:	d919      	bls.n	8007088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2ba0      	cmp	r3, #160	; 0xa0
 8007058:	d902      	bls.n	8007060 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800705a:	2302      	movs	r3, #2
 800705c:	613b      	str	r3, [r7, #16]
 800705e:	e013      	b.n	8007088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007060:	2301      	movs	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e010      	b.n	8007088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b80      	cmp	r3, #128	; 0x80
 800706a:	d902      	bls.n	8007072 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800706c:	2303      	movs	r3, #3
 800706e:	613b      	str	r3, [r7, #16]
 8007070:	e00a      	b.n	8007088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b80      	cmp	r3, #128	; 0x80
 8007076:	d102      	bne.n	800707e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007078:	2302      	movs	r3, #2
 800707a:	613b      	str	r3, [r7, #16]
 800707c:	e004      	b.n	8007088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b70      	cmp	r3, #112	; 0x70
 8007082:	d101      	bne.n	8007088 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007084:	2301      	movs	r3, #1
 8007086:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007088:	4b0b      	ldr	r3, [pc, #44]	; (80070b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f023 0207 	bic.w	r2, r3, #7
 8007090:	4909      	ldr	r1, [pc, #36]	; (80070b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007098:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d001      	beq.n	80070aa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40021000 	.word	0x40021000
 80070b8:	40022000 	.word	0x40022000

080070bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070c4:	2300      	movs	r3, #0
 80070c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070c8:	2300      	movs	r3, #0
 80070ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d041      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070e0:	d02a      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80070e2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070e6:	d824      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070ec:	d008      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070f2:	d81e      	bhi.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00a      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80070f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070fc:	d010      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80070fe:	e018      	b.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007100:	4b86      	ldr	r3, [pc, #536]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	4a85      	ldr	r2, [pc, #532]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800710a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800710c:	e015      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3304      	adds	r3, #4
 8007112:	2100      	movs	r1, #0
 8007114:	4618      	mov	r0, r3
 8007116:	f000 fabb 	bl	8007690 <RCCEx_PLLSAI1_Config>
 800711a:	4603      	mov	r3, r0
 800711c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800711e:	e00c      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3320      	adds	r3, #32
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fba6 	bl	8007878 <RCCEx_PLLSAI2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007130:	e003      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	74fb      	strb	r3, [r7, #19]
      break;
 8007136:	e000      	b.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800713a:	7cfb      	ldrb	r3, [r7, #19]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d10b      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007140:	4b76      	ldr	r3, [pc, #472]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800714e:	4973      	ldr	r1, [pc, #460]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007150:	4313      	orrs	r3, r2
 8007152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007156:	e001      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d041      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800716c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007170:	d02a      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007176:	d824      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007178:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800717c:	d008      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800717e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007182:	d81e      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00a      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007188:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800718c:	d010      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800718e:	e018      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007190:	4b62      	ldr	r3, [pc, #392]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4a61      	ldr	r2, [pc, #388]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800719a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800719c:	e015      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2100      	movs	r1, #0
 80071a4:	4618      	mov	r0, r3
 80071a6:	f000 fa73 	bl	8007690 <RCCEx_PLLSAI1_Config>
 80071aa:	4603      	mov	r3, r0
 80071ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071ae:	e00c      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3320      	adds	r3, #32
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fb5e 	bl	8007878 <RCCEx_PLLSAI2_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	74fb      	strb	r3, [r7, #19]
      break;
 80071c6:	e000      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80071c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ca:	7cfb      	ldrb	r3, [r7, #19]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10b      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80071d0:	4b52      	ldr	r3, [pc, #328]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071de:	494f      	ldr	r1, [pc, #316]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80071e6:	e001      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7cfb      	ldrb	r3, [r7, #19]
 80071ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80a0 	beq.w	800733a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80071fa:	2300      	movs	r3, #0
 80071fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80071fe:	4b47      	ldr	r3, [pc, #284]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800720a:	2301      	movs	r3, #1
 800720c:	e000      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800720e:	2300      	movs	r3, #0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007214:	4b41      	ldr	r3, [pc, #260]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007218:	4a40      	ldr	r2, [pc, #256]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800721a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800721e:	6593      	str	r3, [r2, #88]	; 0x58
 8007220:	4b3e      	ldr	r3, [pc, #248]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007228:	60bb      	str	r3, [r7, #8]
 800722a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800722c:	2301      	movs	r3, #1
 800722e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007230:	4b3b      	ldr	r3, [pc, #236]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a3a      	ldr	r2, [pc, #232]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800723a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800723c:	f7fd fd74 	bl	8004d28 <HAL_GetTick>
 8007240:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007242:	e009      	b.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007244:	f7fd fd70 	bl	8004d28 <HAL_GetTick>
 8007248:	4602      	mov	r2, r0
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	2b02      	cmp	r3, #2
 8007250:	d902      	bls.n	8007258 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007252:	2303      	movs	r3, #3
 8007254:	74fb      	strb	r3, [r7, #19]
        break;
 8007256:	e005      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007258:	4b31      	ldr	r3, [pc, #196]	; (8007320 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	2b00      	cmp	r3, #0
 8007262:	d0ef      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d15c      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800726a:	4b2c      	ldr	r3, [pc, #176]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800726c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007274:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d01f      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	429a      	cmp	r2, r3
 8007286:	d019      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007288:	4b24      	ldr	r3, [pc, #144]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007294:	4b21      	ldr	r3, [pc, #132]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800729a:	4a20      	ldr	r2, [pc, #128]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800729c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072a4:	4b1d      	ldr	r3, [pc, #116]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072aa:	4a1c      	ldr	r2, [pc, #112]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072b4:	4a19      	ldr	r2, [pc, #100]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c6:	f7fd fd2f 	bl	8004d28 <HAL_GetTick>
 80072ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072cc:	e00b      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fd fd2b 	bl	8004d28 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d902      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	74fb      	strb	r3, [r7, #19]
            break;
 80072e4:	e006      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072e6:	4b0d      	ldr	r3, [pc, #52]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ec      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80072f4:	7cfb      	ldrb	r3, [r7, #19]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10c      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072fa:	4b08      	ldr	r3, [pc, #32]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800730a:	4904      	ldr	r1, [pc, #16]	; (800731c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007312:	e009      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007314:	7cfb      	ldrb	r3, [r7, #19]
 8007316:	74bb      	strb	r3, [r7, #18]
 8007318:	e006      	b.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800731a:	bf00      	nop
 800731c:	40021000 	.word	0x40021000
 8007320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007324:	7cfb      	ldrb	r3, [r7, #19]
 8007326:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007328:	7c7b      	ldrb	r3, [r7, #17]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d105      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732e:	4b9e      	ldr	r3, [pc, #632]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007332:	4a9d      	ldr	r2, [pc, #628]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007346:	4b98      	ldr	r3, [pc, #608]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734c:	f023 0203 	bic.w	r2, r3, #3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	4994      	ldr	r1, [pc, #592]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007356:	4313      	orrs	r3, r2
 8007358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007368:	4b8f      	ldr	r3, [pc, #572]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	f023 020c 	bic.w	r2, r3, #12
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007376:	498c      	ldr	r1, [pc, #560]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800738a:	4b87      	ldr	r3, [pc, #540]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007398:	4983      	ldr	r1, [pc, #524]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800739a:	4313      	orrs	r3, r2
 800739c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073ac:	4b7e      	ldr	r3, [pc, #504]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	497b      	ldr	r1, [pc, #492]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0310 	and.w	r3, r3, #16
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073ce:	4b76      	ldr	r3, [pc, #472]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073dc:	4972      	ldr	r1, [pc, #456]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f003 0320 	and.w	r3, r3, #32
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073f0:	4b6d      	ldr	r3, [pc, #436]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fe:	496a      	ldr	r1, [pc, #424]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007400:	4313      	orrs	r3, r2
 8007402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007412:	4b65      	ldr	r3, [pc, #404]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007420:	4961      	ldr	r1, [pc, #388]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007434:	4b5c      	ldr	r3, [pc, #368]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007442:	4959      	ldr	r1, [pc, #356]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007444:	4313      	orrs	r3, r2
 8007446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007456:	4b54      	ldr	r3, [pc, #336]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007464:	4950      	ldr	r1, [pc, #320]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007478:	4b4b      	ldr	r3, [pc, #300]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800747a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	4948      	ldr	r1, [pc, #288]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007488:	4313      	orrs	r3, r2
 800748a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800749a:	4b43      	ldr	r3, [pc, #268]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800749c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074a8:	493f      	ldr	r1, [pc, #252]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d028      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80074bc:	4b3a      	ldr	r3, [pc, #232]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ca:	4937      	ldr	r1, [pc, #220]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074da:	d106      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074dc:	4b32      	ldr	r3, [pc, #200]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	4a31      	ldr	r2, [pc, #196]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80074e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074e6:	60d3      	str	r3, [r2, #12]
 80074e8:	e011      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074f2:	d10c      	bne.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	3304      	adds	r3, #4
 80074f8:	2101      	movs	r1, #1
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f8c8 	bl	8007690 <RCCEx_PLLSAI1_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007504:	7cfb      	ldrb	r3, [r7, #19]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800750a:	7cfb      	ldrb	r3, [r7, #19]
 800750c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d028      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800751a:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007528:	491f      	ldr	r1, [pc, #124]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800752a:	4313      	orrs	r3, r2
 800752c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007538:	d106      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800753a:	4b1b      	ldr	r3, [pc, #108]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	4a1a      	ldr	r2, [pc, #104]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007544:	60d3      	str	r3, [r2, #12]
 8007546:	e011      	b.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800754c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007550:	d10c      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	3304      	adds	r3, #4
 8007556:	2101      	movs	r1, #1
 8007558:	4618      	mov	r0, r3
 800755a:	f000 f899 	bl	8007690 <RCCEx_PLLSAI1_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007562:	7cfb      	ldrb	r3, [r7, #19]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d001      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007568:	7cfb      	ldrb	r3, [r7, #19]
 800756a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d02b      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007578:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007586:	4908      	ldr	r1, [pc, #32]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007596:	d109      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007598:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a02      	ldr	r2, [pc, #8]	; (80075a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800759e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075a2:	60d3      	str	r3, [r2, #12]
 80075a4:	e014      	b.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80075a6:	bf00      	nop
 80075a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	3304      	adds	r3, #4
 80075ba:	2101      	movs	r1, #1
 80075bc:	4618      	mov	r0, r3
 80075be:	f000 f867 	bl	8007690 <RCCEx_PLLSAI1_Config>
 80075c2:	4603      	mov	r3, r0
 80075c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80075c6:	7cfb      	ldrb	r3, [r7, #19]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80075cc:	7cfb      	ldrb	r3, [r7, #19]
 80075ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d02f      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80075dc:	4b2b      	ldr	r3, [pc, #172]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075ea:	4928      	ldr	r1, [pc, #160]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075fa:	d10d      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	2102      	movs	r1, #2
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f844 	bl	8007690 <RCCEx_PLLSAI1_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800760c:	7cfb      	ldrb	r3, [r7, #19]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d014      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007612:	7cfb      	ldrb	r3, [r7, #19]
 8007614:	74bb      	strb	r3, [r7, #18]
 8007616:	e011      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800761c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007620:	d10c      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3320      	adds	r3, #32
 8007626:	2102      	movs	r1, #2
 8007628:	4618      	mov	r0, r3
 800762a:	f000 f925 	bl	8007878 <RCCEx_PLLSAI2_Config>
 800762e:	4603      	mov	r3, r0
 8007630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007632:	7cfb      	ldrb	r3, [r7, #19]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007638:	7cfb      	ldrb	r3, [r7, #19]
 800763a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007648:	4b10      	ldr	r3, [pc, #64]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800764a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800764e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007656:	490d      	ldr	r1, [pc, #52]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00b      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800766a:	4b08      	ldr	r3, [pc, #32]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800766c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800767a:	4904      	ldr	r1, [pc, #16]	; (800768c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007682:	7cbb      	ldrb	r3, [r7, #18]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40021000 	.word	0x40021000

08007690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800769e:	4b75      	ldr	r3, [pc, #468]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076a0:	68db      	ldr	r3, [r3, #12]
 80076a2:	f003 0303 	and.w	r3, r3, #3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d018      	beq.n	80076dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80076aa:	4b72      	ldr	r3, [pc, #456]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	f003 0203 	and.w	r2, r3, #3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d10d      	bne.n	80076d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
       ||
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d009      	beq.n	80076d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80076c2:	4b6c      	ldr	r3, [pc, #432]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	091b      	lsrs	r3, r3, #4
 80076c8:	f003 0307 	and.w	r3, r3, #7
 80076cc:	1c5a      	adds	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
       ||
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d047      	beq.n	8007766 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
 80076da:	e044      	b.n	8007766 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	2b03      	cmp	r3, #3
 80076e2:	d018      	beq.n	8007716 <RCCEx_PLLSAI1_Config+0x86>
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d825      	bhi.n	8007734 <RCCEx_PLLSAI1_Config+0xa4>
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d002      	beq.n	80076f2 <RCCEx_PLLSAI1_Config+0x62>
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d009      	beq.n	8007704 <RCCEx_PLLSAI1_Config+0x74>
 80076f0:	e020      	b.n	8007734 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076f2:	4b60      	ldr	r3, [pc, #384]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d11d      	bne.n	800773a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007702:	e01a      	b.n	800773a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007704:	4b5b      	ldr	r3, [pc, #364]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800770c:	2b00      	cmp	r3, #0
 800770e:	d116      	bne.n	800773e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007714:	e013      	b.n	800773e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007716:	4b57      	ldr	r3, [pc, #348]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10f      	bne.n	8007742 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007722:	4b54      	ldr	r3, [pc, #336]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007732:	e006      	b.n	8007742 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	73fb      	strb	r3, [r7, #15]
      break;
 8007738:	e004      	b.n	8007744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800773a:	bf00      	nop
 800773c:	e002      	b.n	8007744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800773e:	bf00      	nop
 8007740:	e000      	b.n	8007744 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007742:	bf00      	nop
    }

    if(status == HAL_OK)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10d      	bne.n	8007766 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800774a:	4b4a      	ldr	r3, [pc, #296]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6819      	ldr	r1, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	3b01      	subs	r3, #1
 800775c:	011b      	lsls	r3, r3, #4
 800775e:	430b      	orrs	r3, r1
 8007760:	4944      	ldr	r1, [pc, #272]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007762:	4313      	orrs	r3, r2
 8007764:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d17d      	bne.n	8007868 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800776c:	4b41      	ldr	r3, [pc, #260]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a40      	ldr	r2, [pc, #256]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007778:	f7fd fad6 	bl	8004d28 <HAL_GetTick>
 800777c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800777e:	e009      	b.n	8007794 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007780:	f7fd fad2 	bl	8004d28 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d902      	bls.n	8007794 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	73fb      	strb	r3, [r7, #15]
        break;
 8007792:	e005      	b.n	80077a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007794:	4b37      	ldr	r3, [pc, #220]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1ef      	bne.n	8007780 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d160      	bne.n	8007868 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d111      	bne.n	80077d0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077ac:	4b31      	ldr	r3, [pc, #196]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80077b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6892      	ldr	r2, [r2, #8]
 80077bc:	0211      	lsls	r1, r2, #8
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	68d2      	ldr	r2, [r2, #12]
 80077c2:	0912      	lsrs	r2, r2, #4
 80077c4:	0452      	lsls	r2, r2, #17
 80077c6:	430a      	orrs	r2, r1
 80077c8:	492a      	ldr	r1, [pc, #168]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]
 80077ce:	e027      	b.n	8007820 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d112      	bne.n	80077fc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077d6:	4b27      	ldr	r3, [pc, #156]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80077de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	6892      	ldr	r2, [r2, #8]
 80077e6:	0211      	lsls	r1, r2, #8
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6912      	ldr	r2, [r2, #16]
 80077ec:	0852      	lsrs	r2, r2, #1
 80077ee:	3a01      	subs	r2, #1
 80077f0:	0552      	lsls	r2, r2, #21
 80077f2:	430a      	orrs	r2, r1
 80077f4:	491f      	ldr	r1, [pc, #124]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	610b      	str	r3, [r1, #16]
 80077fa:	e011      	b.n	8007820 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80077fc:	4b1d      	ldr	r3, [pc, #116]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6892      	ldr	r2, [r2, #8]
 800780c:	0211      	lsls	r1, r2, #8
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	6952      	ldr	r2, [r2, #20]
 8007812:	0852      	lsrs	r2, r2, #1
 8007814:	3a01      	subs	r2, #1
 8007816:	0652      	lsls	r2, r2, #25
 8007818:	430a      	orrs	r2, r1
 800781a:	4916      	ldr	r1, [pc, #88]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800781c:	4313      	orrs	r3, r2
 800781e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007820:	4b14      	ldr	r3, [pc, #80]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a13      	ldr	r2, [pc, #76]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007826:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800782a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782c:	f7fd fa7c 	bl	8004d28 <HAL_GetTick>
 8007830:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007832:	e009      	b.n	8007848 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007834:	f7fd fa78 	bl	8004d28 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d902      	bls.n	8007848 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	73fb      	strb	r3, [r7, #15]
          break;
 8007846:	e005      	b.n	8007854 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0ef      	beq.n	8007834 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d106      	bne.n	8007868 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	699b      	ldr	r3, [r3, #24]
 8007862:	4904      	ldr	r1, [pc, #16]	; (8007874 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007864:	4313      	orrs	r3, r2
 8007866:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40021000 	.word	0x40021000

08007878 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007886:	4b6a      	ldr	r3, [pc, #424]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	2b00      	cmp	r3, #0
 8007890:	d018      	beq.n	80078c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007892:	4b67      	ldr	r3, [pc, #412]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	f003 0203 	and.w	r2, r3, #3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d10d      	bne.n	80078be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
       ||
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80078aa:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	f003 0307 	and.w	r3, r3, #7
 80078b4:	1c5a      	adds	r2, r3, #1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
       ||
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d047      	beq.n	800794e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
 80078c2:	e044      	b.n	800794e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2b03      	cmp	r3, #3
 80078ca:	d018      	beq.n	80078fe <RCCEx_PLLSAI2_Config+0x86>
 80078cc:	2b03      	cmp	r3, #3
 80078ce:	d825      	bhi.n	800791c <RCCEx_PLLSAI2_Config+0xa4>
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d002      	beq.n	80078da <RCCEx_PLLSAI2_Config+0x62>
 80078d4:	2b02      	cmp	r3, #2
 80078d6:	d009      	beq.n	80078ec <RCCEx_PLLSAI2_Config+0x74>
 80078d8:	e020      	b.n	800791c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80078da:	4b55      	ldr	r3, [pc, #340]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d11d      	bne.n	8007922 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078ea:	e01a      	b.n	8007922 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80078ec:	4b50      	ldr	r3, [pc, #320]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d116      	bne.n	8007926 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80078fc:	e013      	b.n	8007926 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80078fe:	4b4c      	ldr	r3, [pc, #304]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d10f      	bne.n	800792a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800790a:	4b49      	ldr	r3, [pc, #292]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d109      	bne.n	800792a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800791a:	e006      	b.n	800792a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	73fb      	strb	r3, [r7, #15]
      break;
 8007920:	e004      	b.n	800792c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800792a:	bf00      	nop
    }

    if(status == HAL_OK)
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007932:	4b3f      	ldr	r3, [pc, #252]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6819      	ldr	r1, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	3b01      	subs	r3, #1
 8007944:	011b      	lsls	r3, r3, #4
 8007946:	430b      	orrs	r3, r1
 8007948:	4939      	ldr	r1, [pc, #228]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800794a:	4313      	orrs	r3, r2
 800794c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d167      	bne.n	8007a24 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007954:	4b36      	ldr	r3, [pc, #216]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a35      	ldr	r2, [pc, #212]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800795a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007960:	f7fd f9e2 	bl	8004d28 <HAL_GetTick>
 8007964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007966:	e009      	b.n	800797c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007968:	f7fd f9de 	bl	8004d28 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b02      	cmp	r3, #2
 8007974:	d902      	bls.n	800797c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007976:	2303      	movs	r3, #3
 8007978:	73fb      	strb	r3, [r7, #15]
        break;
 800797a:	e005      	b.n	8007988 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800797c:	4b2c      	ldr	r3, [pc, #176]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ef      	bne.n	8007968 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d14a      	bne.n	8007a24 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d111      	bne.n	80079b8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007994:	4b26      	ldr	r3, [pc, #152]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800799c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6892      	ldr	r2, [r2, #8]
 80079a4:	0211      	lsls	r1, r2, #8
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	68d2      	ldr	r2, [r2, #12]
 80079aa:	0912      	lsrs	r2, r2, #4
 80079ac:	0452      	lsls	r2, r2, #17
 80079ae:	430a      	orrs	r2, r1
 80079b0:	491f      	ldr	r1, [pc, #124]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	614b      	str	r3, [r1, #20]
 80079b6:	e011      	b.n	80079dc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80079c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	6892      	ldr	r2, [r2, #8]
 80079c8:	0211      	lsls	r1, r2, #8
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6912      	ldr	r2, [r2, #16]
 80079ce:	0852      	lsrs	r2, r2, #1
 80079d0:	3a01      	subs	r2, #1
 80079d2:	0652      	lsls	r2, r2, #25
 80079d4:	430a      	orrs	r2, r1
 80079d6:	4916      	ldr	r1, [pc, #88]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079d8:	4313      	orrs	r3, r2
 80079da:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80079dc:	4b14      	ldr	r3, [pc, #80]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 80079e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079e8:	f7fd f99e 	bl	8004d28 <HAL_GetTick>
 80079ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80079ee:	e009      	b.n	8007a04 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80079f0:	f7fd f99a 	bl	8004d28 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d902      	bls.n	8007a04 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	73fb      	strb	r3, [r7, #15]
          break;
 8007a02:	e005      	b.n	8007a10 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007a04:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0ef      	beq.n	80079f0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007a16:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a18:	695a      	ldr	r2, [r3, #20]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	4904      	ldr	r1, [pc, #16]	; (8007a30 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40021000 	.word	0x40021000

08007a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e049      	b.n	8007ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fc fea8 	bl	80047b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f000 f8fe 	bl	8007c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3708      	adds	r7, #8
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b084      	sub	sp, #16
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_ConfigClockSource+0x1c>
 8007afa:	2302      	movs	r3, #2
 8007afc:	e0b6      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x18a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2201      	movs	r2, #1
 8007b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b3a:	d03e      	beq.n	8007bba <HAL_TIM_ConfigClockSource+0xd8>
 8007b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b40:	f200 8087 	bhi.w	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b48:	f000 8086 	beq.w	8007c58 <HAL_TIM_ConfigClockSource+0x176>
 8007b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b50:	d87f      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b52:	2b70      	cmp	r3, #112	; 0x70
 8007b54:	d01a      	beq.n	8007b8c <HAL_TIM_ConfigClockSource+0xaa>
 8007b56:	2b70      	cmp	r3, #112	; 0x70
 8007b58:	d87b      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b5a:	2b60      	cmp	r3, #96	; 0x60
 8007b5c:	d050      	beq.n	8007c00 <HAL_TIM_ConfigClockSource+0x11e>
 8007b5e:	2b60      	cmp	r3, #96	; 0x60
 8007b60:	d877      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b62:	2b50      	cmp	r3, #80	; 0x50
 8007b64:	d03c      	beq.n	8007be0 <HAL_TIM_ConfigClockSource+0xfe>
 8007b66:	2b50      	cmp	r3, #80	; 0x50
 8007b68:	d873      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	d058      	beq.n	8007c20 <HAL_TIM_ConfigClockSource+0x13e>
 8007b6e:	2b40      	cmp	r3, #64	; 0x40
 8007b70:	d86f      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b72:	2b30      	cmp	r3, #48	; 0x30
 8007b74:	d064      	beq.n	8007c40 <HAL_TIM_ConfigClockSource+0x15e>
 8007b76:	2b30      	cmp	r3, #48	; 0x30
 8007b78:	d86b      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b7a:	2b20      	cmp	r3, #32
 8007b7c:	d060      	beq.n	8007c40 <HAL_TIM_ConfigClockSource+0x15e>
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d867      	bhi.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d05c      	beq.n	8007c40 <HAL_TIM_ConfigClockSource+0x15e>
 8007b86:	2b10      	cmp	r3, #16
 8007b88:	d05a      	beq.n	8007c40 <HAL_TIM_ConfigClockSource+0x15e>
 8007b8a:	e062      	b.n	8007c52 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6818      	ldr	r0, [r3, #0]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	6899      	ldr	r1, [r3, #8]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	685a      	ldr	r2, [r3, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	f000 f97e 	bl	8007e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68ba      	ldr	r2, [r7, #8]
 8007bb6:	609a      	str	r2, [r3, #8]
      break;
 8007bb8:	e04f      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6818      	ldr	r0, [r3, #0]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	6899      	ldr	r1, [r3, #8]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685a      	ldr	r2, [r3, #4]
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f000 f967 	bl	8007e9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007bdc:	609a      	str	r2, [r3, #8]
      break;
 8007bde:	e03c      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6859      	ldr	r1, [r3, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	461a      	mov	r2, r3
 8007bee:	f000 f8db 	bl	8007da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2150      	movs	r1, #80	; 0x50
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f000 f934 	bl	8007e66 <TIM_ITRx_SetConfig>
      break;
 8007bfe:	e02c      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6818      	ldr	r0, [r3, #0]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	6859      	ldr	r1, [r3, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	f000 f8fa 	bl	8007e06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2160      	movs	r1, #96	; 0x60
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 f924 	bl	8007e66 <TIM_ITRx_SetConfig>
      break;
 8007c1e:	e01c      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	6859      	ldr	r1, [r3, #4]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f000 f8bb 	bl	8007da8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2140      	movs	r1, #64	; 0x40
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 f914 	bl	8007e66 <TIM_ITRx_SetConfig>
      break;
 8007c3e:	e00c      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	4610      	mov	r0, r2
 8007c4c:	f000 f90b 	bl	8007e66 <TIM_ITRx_SetConfig>
      break;
 8007c50:	e003      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	73fb      	strb	r3, [r7, #15]
      break;
 8007c56:	e000      	b.n	8007c5a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007c58:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b085      	sub	sp, #20
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a40      	ldr	r2, [pc, #256]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d013      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c92:	d00f      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a3d      	ldr	r2, [pc, #244]	; (8007d8c <TIM_Base_SetConfig+0x118>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d00b      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a3c      	ldr	r2, [pc, #240]	; (8007d90 <TIM_Base_SetConfig+0x11c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d007      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a3b      	ldr	r2, [pc, #236]	; (8007d94 <TIM_Base_SetConfig+0x120>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d003      	beq.n	8007cb4 <TIM_Base_SetConfig+0x40>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a3a      	ldr	r2, [pc, #232]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d108      	bne.n	8007cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a2f      	ldr	r2, [pc, #188]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d01f      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cd4:	d01b      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a2c      	ldr	r2, [pc, #176]	; (8007d8c <TIM_Base_SetConfig+0x118>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d017      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a2b      	ldr	r2, [pc, #172]	; (8007d90 <TIM_Base_SetConfig+0x11c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a2a      	ldr	r2, [pc, #168]	; (8007d94 <TIM_Base_SetConfig+0x120>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00f      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a29      	ldr	r2, [pc, #164]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a28      	ldr	r2, [pc, #160]	; (8007d9c <TIM_Base_SetConfig+0x128>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a27      	ldr	r2, [pc, #156]	; (8007da0 <TIM_Base_SetConfig+0x12c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_Base_SetConfig+0x9a>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a26      	ldr	r2, [pc, #152]	; (8007da4 <TIM_Base_SetConfig+0x130>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d108      	bne.n	8007d20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	689a      	ldr	r2, [r3, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a10      	ldr	r2, [pc, #64]	; (8007d88 <TIM_Base_SetConfig+0x114>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00f      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a12      	ldr	r2, [pc, #72]	; (8007d98 <TIM_Base_SetConfig+0x124>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a11      	ldr	r2, [pc, #68]	; (8007d9c <TIM_Base_SetConfig+0x128>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a10      	ldr	r2, [pc, #64]	; (8007da0 <TIM_Base_SetConfig+0x12c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_Base_SetConfig+0xf8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a0f      	ldr	r2, [pc, #60]	; (8007da4 <TIM_Base_SetConfig+0x130>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d103      	bne.n	8007d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	615a      	str	r2, [r3, #20]
}
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	40000400 	.word	0x40000400
 8007d90:	40000800 	.word	0x40000800
 8007d94:	40000c00 	.word	0x40000c00
 8007d98:	40013400 	.word	0x40013400
 8007d9c:	40014000 	.word	0x40014000
 8007da0:	40014400 	.word	0x40014400
 8007da4:	40014800 	.word	0x40014800

08007da8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b087      	sub	sp, #28
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f023 0201 	bic.w	r2, r3, #1
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	011b      	lsls	r3, r3, #4
 8007dd8:	693a      	ldr	r2, [r7, #16]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f023 030a 	bic.w	r3, r3, #10
 8007de4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	621a      	str	r2, [r3, #32]
}
 8007dfa:	bf00      	nop
 8007dfc:	371c      	adds	r7, #28
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr

08007e06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e06:	b480      	push	{r7}
 8007e08:	b087      	sub	sp, #28
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	60f8      	str	r0, [r7, #12]
 8007e0e:	60b9      	str	r1, [r7, #8]
 8007e10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	f023 0210 	bic.w	r2, r3, #16
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	031b      	lsls	r3, r3, #12
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	693a      	ldr	r2, [r7, #16]
 8007e58:	621a      	str	r2, [r3, #32]
}
 8007e5a:	bf00      	nop
 8007e5c:	371c      	adds	r7, #28
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	f043 0307 	orr.w	r3, r3, #7
 8007e88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	609a      	str	r2, [r3, #8]
}
 8007e90:	bf00      	nop
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
 8007ea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	021a      	lsls	r2, r3, #8
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	697a      	ldr	r2, [r7, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	609a      	str	r2, [r3, #8]
}
 8007ed0:	bf00      	nop
 8007ed2:	371c      	adds	r7, #28
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b085      	sub	sp, #20
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e068      	b.n	8007fc6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2202      	movs	r2, #2
 8007f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a2e      	ldr	r2, [pc, #184]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d004      	beq.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a2d      	ldr	r2, [pc, #180]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d108      	bne.n	8007f3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007f2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	4313      	orrs	r3, r2
 8007f38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a1e      	ldr	r2, [pc, #120]	; (8007fd4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d01d      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f66:	d018      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	; (8007fdc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d013      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a1a      	ldr	r2, [pc, #104]	; (8007fe0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d00e      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d009      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a13      	ldr	r2, [pc, #76]	; (8007fd8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d004      	beq.n	8007f9a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a14      	ldr	r2, [pc, #80]	; (8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d10c      	bne.n	8007fb4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3714      	adds	r7, #20
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40013400 	.word	0x40013400
 8007fdc:	40000400 	.word	0x40000400
 8007fe0:	40000800 	.word	0x40000800
 8007fe4:	40000c00 	.word	0x40000c00
 8007fe8:	40014000 	.word	0x40014000

08007fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e040      	b.n	8008080 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008002:	2b00      	cmp	r3, #0
 8008004:	d106      	bne.n	8008014 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7fc fbec 	bl	80047ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2224      	movs	r2, #36	; 0x24
 8008018:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f022 0201 	bic.w	r2, r2, #1
 8008028:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 fc1e 	bl	800886c <UART_SetConfig>
 8008030:	4603      	mov	r3, r0
 8008032:	2b01      	cmp	r3, #1
 8008034:	d101      	bne.n	800803a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e022      	b.n	8008080 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 feca 	bl	8008ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008056:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008066:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0201 	orr.w	r2, r2, #1
 8008076:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 ff51 	bl	8008f20 <UART_CheckIdleState>
 800807e:	4603      	mov	r3, r0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08a      	sub	sp, #40	; 0x28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	4613      	mov	r3, r2
 8008094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800809a:	2b20      	cmp	r3, #32
 800809c:	d178      	bne.n	8008190 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_UART_Transmit_DMA+0x22>
 80080a4:	88fb      	ldrh	r3, [r7, #6]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d101      	bne.n	80080ae <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e071      	b.n	8008192 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d101      	bne.n	80080bc <HAL_UART_Transmit_DMA+0x34>
 80080b8:	2302      	movs	r3, #2
 80080ba:	e06a      	b.n	8008192 <HAL_UART_Transmit_DMA+0x10a>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2201      	movs	r2, #1
 80080c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	88fa      	ldrh	r2, [r7, #6]
 80080ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	88fa      	ldrh	r2, [r7, #6]
 80080d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2221      	movs	r2, #33	; 0x21
 80080e6:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d02b      	beq.n	8008148 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f4:	4a29      	ldr	r2, [pc, #164]	; (800819c <HAL_UART_Transmit_DMA+0x114>)
 80080f6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080fc:	4a28      	ldr	r2, [pc, #160]	; (80081a0 <HAL_UART_Transmit_DMA+0x118>)
 80080fe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008104:	4a27      	ldr	r2, [pc, #156]	; (80081a4 <HAL_UART_Transmit_DMA+0x11c>)
 8008106:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810c:	2200      	movs	r2, #0
 800810e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008118:	4619      	mov	r1, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3328      	adds	r3, #40	; 0x28
 8008120:	461a      	mov	r2, r3
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	f7fc fffa 	bl	800511c <HAL_DMA_Start_IT>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00c      	beq.n	8008148 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2210      	movs	r2, #16
 8008132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e024      	b.n	8008192 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2240      	movs	r2, #64	; 0x40
 800814e:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3308      	adds	r3, #8
 800815e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	e853 3f00 	ldrex	r3, [r3]
 8008166:	613b      	str	r3, [r7, #16]
   return(result);
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3308      	adds	r3, #8
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	623a      	str	r2, [r7, #32]
 800817a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	69f9      	ldr	r1, [r7, #28]
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	61bb      	str	r3, [r7, #24]
   return(result);
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e5      	bne.n	8008158 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	e000      	b.n	8008192 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8008190:	2302      	movs	r3, #2
  }
}
 8008192:	4618      	mov	r0, r3
 8008194:	3728      	adds	r7, #40	; 0x28
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	0800939b 	.word	0x0800939b
 80081a0:	08009435 	.word	0x08009435
 80081a4:	080095ad 	.word	0x080095ad

080081a8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d142      	bne.n	8008244 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_UART_Receive_DMA+0x22>
 80081c4:	88fb      	ldrh	r3, [r7, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e03b      	b.n	8008246 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d101      	bne.n	80081dc <HAL_UART_Receive_DMA+0x34>
 80081d8:	2302      	movs	r3, #2
 80081da:	e034      	b.n	8008246 <HAL_UART_Receive_DMA+0x9e>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <HAL_UART_Receive_DMA+0xa8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d01f      	beq.n	8008234 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d018      	beq.n	8008234 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	e853 3f00 	ldrex	r3, [r3]
 800820e:	613b      	str	r3, [r7, #16]
   return(result);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	623b      	str	r3, [r7, #32]
 8008222:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	e841 2300 	strex	r3, r2, [r1]
 800822c:	61bb      	str	r3, [r7, #24]
   return(result);
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1e6      	bne.n	8008202 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008234:	88fb      	ldrh	r3, [r7, #6]
 8008236:	461a      	mov	r2, r3
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 ff7e 	bl	800913c <UART_Start_Receive_DMA>
 8008240:	4603      	mov	r3, r0
 8008242:	e000      	b.n	8008246 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8008244:	2302      	movs	r3, #2
  }
}
 8008246:	4618      	mov	r0, r3
 8008248:	3728      	adds	r7, #40	; 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	40008000 	.word	0x40008000

08008254 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b0ba      	sub	sp, #232	; 0xe8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800827a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800827e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008282:	4013      	ands	r3, r2
 8008284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008288:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800828c:	2b00      	cmp	r3, #0
 800828e:	d115      	bne.n	80082bc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008294:	f003 0320 	and.w	r3, r3, #32
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00f      	beq.n	80082bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800829c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d009      	beq.n	80082bc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 82a6 	beq.w	80087fe <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	4798      	blx	r3
      }
      return;
 80082ba:	e2a0      	b.n	80087fe <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80082bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8117 	beq.w	80084f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80082c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d106      	bne.n	80082e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80082d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80082d6:	4b85      	ldr	r3, [pc, #532]	; (80084ec <HAL_UART_IRQHandler+0x298>)
 80082d8:	4013      	ands	r3, r2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 810a 	beq.w	80084f4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d011      	beq.n	8008310 <HAL_UART_IRQHandler+0xbc>
 80082ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00b      	beq.n	8008310 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2201      	movs	r2, #1
 80082fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008306:	f043 0201 	orr.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008314:	f003 0302 	and.w	r3, r3, #2
 8008318:	2b00      	cmp	r3, #0
 800831a:	d011      	beq.n	8008340 <HAL_UART_IRQHandler+0xec>
 800831c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008320:	f003 0301 	and.w	r3, r3, #1
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	2202      	movs	r2, #2
 800832e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008336:	f043 0204 	orr.w	r2, r3, #4
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d011      	beq.n	8008370 <HAL_UART_IRQHandler+0x11c>
 800834c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00b      	beq.n	8008370 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2204      	movs	r2, #4
 800835e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008366:	f043 0202 	orr.w	r2, r3, #2
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008374:	f003 0308 	and.w	r3, r3, #8
 8008378:	2b00      	cmp	r3, #0
 800837a:	d017      	beq.n	80083ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800837c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800838c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00b      	beq.n	80083ac <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2208      	movs	r2, #8
 800839a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a2:	f043 0208 	orr.w	r2, r3, #8
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80083ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d012      	beq.n	80083de <HAL_UART_IRQHandler+0x18a>
 80083b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00c      	beq.n	80083de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80083cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083d4:	f043 0220 	orr.w	r2, r3, #32
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f000 820c 	beq.w	8008802 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80083ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ee:	f003 0320 	and.w	r3, r3, #32
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00d      	beq.n	8008412 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d007      	beq.n	8008412 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008418:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008426:	2b40      	cmp	r3, #64	; 0x40
 8008428:	d005      	beq.n	8008436 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800842a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800842e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008432:	2b00      	cmp	r3, #0
 8008434:	d04f      	beq.n	80084d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 ff4c 	bl	80092d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008446:	2b40      	cmp	r3, #64	; 0x40
 8008448:	d141      	bne.n	80084ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3308      	adds	r3, #8
 8008450:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008458:	e853 3f00 	ldrex	r3, [r3]
 800845c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3308      	adds	r3, #8
 8008472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008476:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800847a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008486:	e841 2300 	strex	r3, r2, [r1]
 800848a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800848e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1d9      	bne.n	800844a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800849a:	2b00      	cmp	r3, #0
 800849c:	d013      	beq.n	80084c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <HAL_UART_IRQHandler+0x29c>)
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fc fed4 	bl	8005258 <HAL_DMA_Abort_IT>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d017      	beq.n	80084e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80084c0:	4610      	mov	r0, r2
 80084c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	e00f      	b.n	80084e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f9ba 	bl	8008840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084cc:	e00b      	b.n	80084e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 f9b6 	bl	8008840 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d4:	e007      	b.n	80084e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 f9b2 	bl	8008840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80084e4:	e18d      	b.n	8008802 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e6:	bf00      	nop
    return;
 80084e8:	e18b      	b.n	8008802 <HAL_UART_IRQHandler+0x5ae>
 80084ea:	bf00      	nop
 80084ec:	04000120 	.word	0x04000120
 80084f0:	08009629 	.word	0x08009629

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	f040 8146 	bne.w	800878a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 813f 	beq.w	800878a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800850c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8138 	beq.w	800878a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2210      	movs	r2, #16
 8008520:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800852c:	2b40      	cmp	r3, #64	; 0x40
 800852e:	f040 80b4 	bne.w	800869a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800853e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 815f 	beq.w	8008806 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800854e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008552:	429a      	cmp	r2, r3
 8008554:	f080 8157 	bcs.w	8008806 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800855e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	f040 8085 	bne.w	800867e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800857c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008580:	e853 3f00 	ldrex	r3, [r3]
 8008584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008588:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800858c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008590:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	461a      	mov	r2, r3
 800859a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800859e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80085a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80085aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80085ae:	e841 2300 	strex	r3, r2, [r1]
 80085b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80085b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1da      	bne.n	8008574 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3308      	adds	r3, #8
 80085c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c8:	e853 3f00 	ldrex	r3, [r3]
 80085cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80085ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3308      	adds	r3, #8
 80085de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80085e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80085e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80085ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80085f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1e1      	bne.n	80085be <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3308      	adds	r3, #8
 8008600:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008602:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008604:	e853 3f00 	ldrex	r3, [r3]
 8008608:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800860a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800860c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008610:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800861e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008620:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008624:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008626:	e841 2300 	strex	r3, r2, [r1]
 800862a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800862c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1e3      	bne.n	80085fa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2220      	movs	r2, #32
 8008636:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800864c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800864e:	f023 0310 	bic.w	r3, r3, #16
 8008652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008660:	65bb      	str	r3, [r7, #88]	; 0x58
 8008662:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008666:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800866e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e4      	bne.n	800863e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008678:	4618      	mov	r0, r3
 800867a:	f7fc fdaf 	bl	80051dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800868a:	b29b      	uxth	r3, r3
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	b29b      	uxth	r3, r3
 8008690:	4619      	mov	r1, r3
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f8de 	bl	8008854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008698:	e0b5      	b.n	8008806 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086a6:	b29b      	uxth	r3, r3
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f000 80a7 	beq.w	800880a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80086bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 80a2 	beq.w	800880a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	461a      	mov	r2, r3
 80086e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086e8:	647b      	str	r3, [r7, #68]	; 0x44
 80086ea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80086ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086f0:	e841 2300 	strex	r3, r2, [r1]
 80086f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80086f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d1e4      	bne.n	80086c6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	623b      	str	r3, [r7, #32]
   return(result);
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	f023 0301 	bic.w	r3, r3, #1
 8008712:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008720:	633a      	str	r2, [r7, #48]	; 0x30
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e3      	bne.n	80086fc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	e853 3f00 	ldrex	r3, [r3]
 8008752:	60fb      	str	r3, [r7, #12]
   return(result);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0310 	bic.w	r3, r3, #16
 800875a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	461a      	mov	r2, r3
 8008764:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008768:	61fb      	str	r3, [r7, #28]
 800876a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876c:	69b9      	ldr	r1, [r7, #24]
 800876e:	69fa      	ldr	r2, [r7, #28]
 8008770:	e841 2300 	strex	r3, r2, [r1]
 8008774:	617b      	str	r3, [r7, #20]
   return(result);
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1e4      	bne.n	8008746 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800877c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008780:	4619      	mov	r1, r3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f866 	bl	8008854 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008788:	e03f      	b.n	800880a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800878a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800878e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00e      	beq.n	80087b4 <HAL_UART_IRQHandler+0x560>
 8008796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800879a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d008      	beq.n	80087b4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80087aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 ff7b 	bl	80096a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80087b2:	e02d      	b.n	8008810 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80087b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00e      	beq.n	80087de <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80087c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d008      	beq.n	80087de <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d01c      	beq.n	800880e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	4798      	blx	r3
    }
    return;
 80087dc:	e017      	b.n	800880e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80087de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d012      	beq.n	8008810 <HAL_UART_IRQHandler+0x5bc>
 80087ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00c      	beq.n	8008810 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 ff2c 	bl	8009654 <UART_EndTransmit_IT>
    return;
 80087fc:	e008      	b.n	8008810 <HAL_UART_IRQHandler+0x5bc>
      return;
 80087fe:	bf00      	nop
 8008800:	e006      	b.n	8008810 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008802:	bf00      	nop
 8008804:	e004      	b.n	8008810 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008806:	bf00      	nop
 8008808:	e002      	b.n	8008810 <HAL_UART_IRQHandler+0x5bc>
      return;
 800880a:	bf00      	nop
 800880c:	e000      	b.n	8008810 <HAL_UART_IRQHandler+0x5bc>
    return;
 800880e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008810:	37e8      	adds	r7, #232	; 0xe8
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop

08008818 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	460b      	mov	r3, r1
 800885e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008860:	bf00      	nop
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800886c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008870:	b08a      	sub	sp, #40	; 0x28
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	431a      	orrs	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	69db      	ldr	r3, [r3, #28]
 8008890:	4313      	orrs	r3, r2
 8008892:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	4ba4      	ldr	r3, [pc, #656]	; (8008b2c <UART_SetConfig+0x2c0>)
 800889c:	4013      	ands	r3, r2
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	6812      	ldr	r2, [r2, #0]
 80088a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088a4:	430b      	orrs	r3, r1
 80088a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a99      	ldr	r2, [pc, #612]	; (8008b30 <UART_SetConfig+0x2c4>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d004      	beq.n	80088d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088d4:	4313      	orrs	r3, r2
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088e8:	430a      	orrs	r2, r1
 80088ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a90      	ldr	r2, [pc, #576]	; (8008b34 <UART_SetConfig+0x2c8>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d126      	bne.n	8008944 <UART_SetConfig+0xd8>
 80088f6:	4b90      	ldr	r3, [pc, #576]	; (8008b38 <UART_SetConfig+0x2cc>)
 80088f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b03      	cmp	r3, #3
 8008902:	d81b      	bhi.n	800893c <UART_SetConfig+0xd0>
 8008904:	a201      	add	r2, pc, #4	; (adr r2, 800890c <UART_SetConfig+0xa0>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	0800891d 	.word	0x0800891d
 8008910:	0800892d 	.word	0x0800892d
 8008914:	08008925 	.word	0x08008925
 8008918:	08008935 	.word	0x08008935
 800891c:	2301      	movs	r3, #1
 800891e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008922:	e116      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008924:	2302      	movs	r3, #2
 8008926:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892a:	e112      	b.n	8008b52 <UART_SetConfig+0x2e6>
 800892c:	2304      	movs	r3, #4
 800892e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008932:	e10e      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008934:	2308      	movs	r3, #8
 8008936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800893a:	e10a      	b.n	8008b52 <UART_SetConfig+0x2e6>
 800893c:	2310      	movs	r3, #16
 800893e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008942:	e106      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a7c      	ldr	r2, [pc, #496]	; (8008b3c <UART_SetConfig+0x2d0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d138      	bne.n	80089c0 <UART_SetConfig+0x154>
 800894e:	4b7a      	ldr	r3, [pc, #488]	; (8008b38 <UART_SetConfig+0x2cc>)
 8008950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008954:	f003 030c 	and.w	r3, r3, #12
 8008958:	2b0c      	cmp	r3, #12
 800895a:	d82d      	bhi.n	80089b8 <UART_SetConfig+0x14c>
 800895c:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <UART_SetConfig+0xf8>)
 800895e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008962:	bf00      	nop
 8008964:	08008999 	.word	0x08008999
 8008968:	080089b9 	.word	0x080089b9
 800896c:	080089b9 	.word	0x080089b9
 8008970:	080089b9 	.word	0x080089b9
 8008974:	080089a9 	.word	0x080089a9
 8008978:	080089b9 	.word	0x080089b9
 800897c:	080089b9 	.word	0x080089b9
 8008980:	080089b9 	.word	0x080089b9
 8008984:	080089a1 	.word	0x080089a1
 8008988:	080089b9 	.word	0x080089b9
 800898c:	080089b9 	.word	0x080089b9
 8008990:	080089b9 	.word	0x080089b9
 8008994:	080089b1 	.word	0x080089b1
 8008998:	2300      	movs	r3, #0
 800899a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800899e:	e0d8      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089a0:	2302      	movs	r3, #2
 80089a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089a6:	e0d4      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089a8:	2304      	movs	r3, #4
 80089aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ae:	e0d0      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089b0:	2308      	movs	r3, #8
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b6:	e0cc      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089b8:	2310      	movs	r3, #16
 80089ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089be:	e0c8      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a5e      	ldr	r2, [pc, #376]	; (8008b40 <UART_SetConfig+0x2d4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d125      	bne.n	8008a16 <UART_SetConfig+0x1aa>
 80089ca:	4b5b      	ldr	r3, [pc, #364]	; (8008b38 <UART_SetConfig+0x2cc>)
 80089cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80089d4:	2b30      	cmp	r3, #48	; 0x30
 80089d6:	d016      	beq.n	8008a06 <UART_SetConfig+0x19a>
 80089d8:	2b30      	cmp	r3, #48	; 0x30
 80089da:	d818      	bhi.n	8008a0e <UART_SetConfig+0x1a2>
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d00a      	beq.n	80089f6 <UART_SetConfig+0x18a>
 80089e0:	2b20      	cmp	r3, #32
 80089e2:	d814      	bhi.n	8008a0e <UART_SetConfig+0x1a2>
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <UART_SetConfig+0x182>
 80089e8:	2b10      	cmp	r3, #16
 80089ea:	d008      	beq.n	80089fe <UART_SetConfig+0x192>
 80089ec:	e00f      	b.n	8008a0e <UART_SetConfig+0x1a2>
 80089ee:	2300      	movs	r3, #0
 80089f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089f4:	e0ad      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089f6:	2302      	movs	r3, #2
 80089f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089fc:	e0a9      	b.n	8008b52 <UART_SetConfig+0x2e6>
 80089fe:	2304      	movs	r3, #4
 8008a00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a04:	e0a5      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a06:	2308      	movs	r3, #8
 8008a08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a0c:	e0a1      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a0e:	2310      	movs	r3, #16
 8008a10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a14:	e09d      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a4a      	ldr	r2, [pc, #296]	; (8008b44 <UART_SetConfig+0x2d8>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d125      	bne.n	8008a6c <UART_SetConfig+0x200>
 8008a20:	4b45      	ldr	r3, [pc, #276]	; (8008b38 <UART_SetConfig+0x2cc>)
 8008a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008a2a:	2bc0      	cmp	r3, #192	; 0xc0
 8008a2c:	d016      	beq.n	8008a5c <UART_SetConfig+0x1f0>
 8008a2e:	2bc0      	cmp	r3, #192	; 0xc0
 8008a30:	d818      	bhi.n	8008a64 <UART_SetConfig+0x1f8>
 8008a32:	2b80      	cmp	r3, #128	; 0x80
 8008a34:	d00a      	beq.n	8008a4c <UART_SetConfig+0x1e0>
 8008a36:	2b80      	cmp	r3, #128	; 0x80
 8008a38:	d814      	bhi.n	8008a64 <UART_SetConfig+0x1f8>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <UART_SetConfig+0x1d8>
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	d008      	beq.n	8008a54 <UART_SetConfig+0x1e8>
 8008a42:	e00f      	b.n	8008a64 <UART_SetConfig+0x1f8>
 8008a44:	2300      	movs	r3, #0
 8008a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a4a:	e082      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a4c:	2302      	movs	r3, #2
 8008a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a52:	e07e      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a54:	2304      	movs	r3, #4
 8008a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a5a:	e07a      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a5c:	2308      	movs	r3, #8
 8008a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a62:	e076      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a64:	2310      	movs	r3, #16
 8008a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008a6a:	e072      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a35      	ldr	r2, [pc, #212]	; (8008b48 <UART_SetConfig+0x2dc>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d12a      	bne.n	8008acc <UART_SetConfig+0x260>
 8008a76:	4b30      	ldr	r3, [pc, #192]	; (8008b38 <UART_SetConfig+0x2cc>)
 8008a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a84:	d01a      	beq.n	8008abc <UART_SetConfig+0x250>
 8008a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a8a:	d81b      	bhi.n	8008ac4 <UART_SetConfig+0x258>
 8008a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a90:	d00c      	beq.n	8008aac <UART_SetConfig+0x240>
 8008a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a96:	d815      	bhi.n	8008ac4 <UART_SetConfig+0x258>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <UART_SetConfig+0x238>
 8008a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008aa0:	d008      	beq.n	8008ab4 <UART_SetConfig+0x248>
 8008aa2:	e00f      	b.n	8008ac4 <UART_SetConfig+0x258>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008aaa:	e052      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008aac:	2302      	movs	r3, #2
 8008aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ab2:	e04e      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008ab4:	2304      	movs	r3, #4
 8008ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008aba:	e04a      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008abc:	2308      	movs	r3, #8
 8008abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008ac2:	e046      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008ac4:	2310      	movs	r3, #16
 8008ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008aca:	e042      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a17      	ldr	r2, [pc, #92]	; (8008b30 <UART_SetConfig+0x2c4>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d13a      	bne.n	8008b4c <UART_SetConfig+0x2e0>
 8008ad6:	4b18      	ldr	r3, [pc, #96]	; (8008b38 <UART_SetConfig+0x2cc>)
 8008ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008adc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ae4:	d01a      	beq.n	8008b1c <UART_SetConfig+0x2b0>
 8008ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008aea:	d81b      	bhi.n	8008b24 <UART_SetConfig+0x2b8>
 8008aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af0:	d00c      	beq.n	8008b0c <UART_SetConfig+0x2a0>
 8008af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008af6:	d815      	bhi.n	8008b24 <UART_SetConfig+0x2b8>
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <UART_SetConfig+0x298>
 8008afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b00:	d008      	beq.n	8008b14 <UART_SetConfig+0x2a8>
 8008b02:	e00f      	b.n	8008b24 <UART_SetConfig+0x2b8>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b0a:	e022      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b12:	e01e      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008b14:	2304      	movs	r3, #4
 8008b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b1a:	e01a      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008b1c:	2308      	movs	r3, #8
 8008b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b22:	e016      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008b24:	2310      	movs	r3, #16
 8008b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008b2a:	e012      	b.n	8008b52 <UART_SetConfig+0x2e6>
 8008b2c:	efff69f3 	.word	0xefff69f3
 8008b30:	40008000 	.word	0x40008000
 8008b34:	40013800 	.word	0x40013800
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	40004400 	.word	0x40004400
 8008b40:	40004800 	.word	0x40004800
 8008b44:	40004c00 	.word	0x40004c00
 8008b48:	40005000 	.word	0x40005000
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a9f      	ldr	r2, [pc, #636]	; (8008dd4 <UART_SetConfig+0x568>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d17a      	bne.n	8008c52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d824      	bhi.n	8008bae <UART_SetConfig+0x342>
 8008b64:	a201      	add	r2, pc, #4	; (adr r2, 8008b6c <UART_SetConfig+0x300>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008b91 	.word	0x08008b91
 8008b70:	08008baf 	.word	0x08008baf
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008baf 	.word	0x08008baf
 8008b7c:	08008b9f 	.word	0x08008b9f
 8008b80:	08008baf 	.word	0x08008baf
 8008b84:	08008baf 	.word	0x08008baf
 8008b88:	08008baf 	.word	0x08008baf
 8008b8c:	08008ba7 	.word	0x08008ba7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b90:	f7fe fa08 	bl	8006fa4 <HAL_RCC_GetPCLK1Freq>
 8008b94:	61f8      	str	r0, [r7, #28]
        break;
 8008b96:	e010      	b.n	8008bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b98:	4b8f      	ldr	r3, [pc, #572]	; (8008dd8 <UART_SetConfig+0x56c>)
 8008b9a:	61fb      	str	r3, [r7, #28]
        break;
 8008b9c:	e00d      	b.n	8008bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b9e:	f7fe f969 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8008ba2:	61f8      	str	r0, [r7, #28]
        break;
 8008ba4:	e009      	b.n	8008bba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008baa:	61fb      	str	r3, [r7, #28]
        break;
 8008bac:	e005      	b.n	8008bba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008bb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80fb 	beq.w	8008db8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	685a      	ldr	r2, [r3, #4]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	005b      	lsls	r3, r3, #1
 8008bca:	4413      	add	r3, r2
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d305      	bcc.n	8008bde <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d903      	bls.n	8008be6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008be4:	e0e8      	b.n	8008db8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	2200      	movs	r2, #0
 8008bea:	461c      	mov	r4, r3
 8008bec:	4615      	mov	r5, r2
 8008bee:	f04f 0200 	mov.w	r2, #0
 8008bf2:	f04f 0300 	mov.w	r3, #0
 8008bf6:	022b      	lsls	r3, r5, #8
 8008bf8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008bfc:	0222      	lsls	r2, r4, #8
 8008bfe:	68f9      	ldr	r1, [r7, #12]
 8008c00:	6849      	ldr	r1, [r1, #4]
 8008c02:	0849      	lsrs	r1, r1, #1
 8008c04:	2000      	movs	r0, #0
 8008c06:	4688      	mov	r8, r1
 8008c08:	4681      	mov	r9, r0
 8008c0a:	eb12 0a08 	adds.w	sl, r2, r8
 8008c0e:	eb43 0b09 	adc.w	fp, r3, r9
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c20:	4650      	mov	r0, sl
 8008c22:	4659      	mov	r1, fp
 8008c24:	f7f8 f830 	bl	8000c88 <__aeabi_uldivmod>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c36:	d308      	bcc.n	8008c4a <UART_SetConfig+0x3de>
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c3e:	d204      	bcs.n	8008c4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	69ba      	ldr	r2, [r7, #24]
 8008c46:	60da      	str	r2, [r3, #12]
 8008c48:	e0b6      	b.n	8008db8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008c50:	e0b2      	b.n	8008db8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	69db      	ldr	r3, [r3, #28]
 8008c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c5a:	d15e      	bne.n	8008d1a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c60:	2b08      	cmp	r3, #8
 8008c62:	d828      	bhi.n	8008cb6 <UART_SetConfig+0x44a>
 8008c64:	a201      	add	r2, pc, #4	; (adr r2, 8008c6c <UART_SetConfig+0x400>)
 8008c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c6a:	bf00      	nop
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c99 	.word	0x08008c99
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	08008cb7 	.word	0x08008cb7
 8008c7c:	08008ca7 	.word	0x08008ca7
 8008c80:	08008cb7 	.word	0x08008cb7
 8008c84:	08008cb7 	.word	0x08008cb7
 8008c88:	08008cb7 	.word	0x08008cb7
 8008c8c:	08008caf 	.word	0x08008caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c90:	f7fe f988 	bl	8006fa4 <HAL_RCC_GetPCLK1Freq>
 8008c94:	61f8      	str	r0, [r7, #28]
        break;
 8008c96:	e014      	b.n	8008cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c98:	f7fe f99a 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 8008c9c:	61f8      	str	r0, [r7, #28]
        break;
 8008c9e:	e010      	b.n	8008cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ca0:	4b4d      	ldr	r3, [pc, #308]	; (8008dd8 <UART_SetConfig+0x56c>)
 8008ca2:	61fb      	str	r3, [r7, #28]
        break;
 8008ca4:	e00d      	b.n	8008cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ca6:	f7fe f8e5 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8008caa:	61f8      	str	r0, [r7, #28]
        break;
 8008cac:	e009      	b.n	8008cc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008cb2:	61fb      	str	r3, [r7, #28]
        break;
 8008cb4:	e005      	b.n	8008cc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008cc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008cc2:	69fb      	ldr	r3, [r7, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d077      	beq.n	8008db8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008cc8:	69fb      	ldr	r3, [r7, #28]
 8008cca:	005a      	lsls	r2, r3, #1
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	085b      	lsrs	r3, r3, #1
 8008cd2:	441a      	add	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	2b0f      	cmp	r3, #15
 8008ce2:	d916      	bls.n	8008d12 <UART_SetConfig+0x4a6>
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cea:	d212      	bcs.n	8008d12 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f023 030f 	bic.w	r3, r3, #15
 8008cf4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	085b      	lsrs	r3, r3, #1
 8008cfa:	b29b      	uxth	r3, r3
 8008cfc:	f003 0307 	and.w	r3, r3, #7
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	8afb      	ldrh	r3, [r7, #22]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	8afa      	ldrh	r2, [r7, #22]
 8008d0e:	60da      	str	r2, [r3, #12]
 8008d10:	e052      	b.n	8008db8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008d12:	2301      	movs	r3, #1
 8008d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008d18:	e04e      	b.n	8008db8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008d1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d827      	bhi.n	8008d72 <UART_SetConfig+0x506>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <UART_SetConfig+0x4bc>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008d4d 	.word	0x08008d4d
 8008d2c:	08008d55 	.word	0x08008d55
 8008d30:	08008d5d 	.word	0x08008d5d
 8008d34:	08008d73 	.word	0x08008d73
 8008d38:	08008d63 	.word	0x08008d63
 8008d3c:	08008d73 	.word	0x08008d73
 8008d40:	08008d73 	.word	0x08008d73
 8008d44:	08008d73 	.word	0x08008d73
 8008d48:	08008d6b 	.word	0x08008d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d4c:	f7fe f92a 	bl	8006fa4 <HAL_RCC_GetPCLK1Freq>
 8008d50:	61f8      	str	r0, [r7, #28]
        break;
 8008d52:	e014      	b.n	8008d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d54:	f7fe f93c 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 8008d58:	61f8      	str	r0, [r7, #28]
        break;
 8008d5a:	e010      	b.n	8008d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d5c:	4b1e      	ldr	r3, [pc, #120]	; (8008dd8 <UART_SetConfig+0x56c>)
 8008d5e:	61fb      	str	r3, [r7, #28]
        break;
 8008d60:	e00d      	b.n	8008d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d62:	f7fe f887 	bl	8006e74 <HAL_RCC_GetSysClockFreq>
 8008d66:	61f8      	str	r0, [r7, #28]
        break;
 8008d68:	e009      	b.n	8008d7e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d6e:	61fb      	str	r3, [r7, #28]
        break;
 8008d70:	e005      	b.n	8008d7e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008d7c:	bf00      	nop
    }

    if (pclk != 0U)
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d019      	beq.n	8008db8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	085a      	lsrs	r2, r3, #1
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	441a      	add	r2, r3
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d96:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d98:	69bb      	ldr	r3, [r7, #24]
 8008d9a:	2b0f      	cmp	r3, #15
 8008d9c:	d909      	bls.n	8008db2 <UART_SetConfig+0x546>
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008da4:	d205      	bcs.n	8008db2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60da      	str	r2, [r3, #12]
 8008db0:	e002      	b.n	8008db8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008db2:	2301      	movs	r3, #1
 8008db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008dc4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3728      	adds	r7, #40	; 0x28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dd2:	bf00      	nop
 8008dd4:	40008000 	.word	0x40008000
 8008dd8:	00f42400 	.word	0x00f42400

08008ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00a      	beq.n	8008e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	685b      	ldr	r3, [r3, #4]
 8008e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	f003 0304 	and.w	r3, r3, #4
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	f003 0308 	and.w	r3, r3, #8
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00a      	beq.n	8008e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d00a      	beq.n	8008e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	430a      	orrs	r2, r1
 8008e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	430a      	orrs	r2, r1
 8008eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d01a      	beq.n	8008ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	430a      	orrs	r2, r1
 8008ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008eda:	d10a      	bne.n	8008ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	430a      	orrs	r2, r1
 8008ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	430a      	orrs	r2, r1
 8008f12:	605a      	str	r2, [r3, #4]
  }
}
 8008f14:	bf00      	nop
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b086      	sub	sp, #24
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f30:	f7fb fefa 	bl	8004d28 <HAL_GetTick>
 8008f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0308 	and.w	r3, r3, #8
 8008f40:	2b08      	cmp	r3, #8
 8008f42:	d10e      	bne.n	8008f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f48:	9300      	str	r3, [sp, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f82d 	bl	8008fb2 <UART_WaitOnFlagUntilTimeout>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5e:	2303      	movs	r3, #3
 8008f60:	e023      	b.n	8008faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f003 0304 	and.w	r3, r3, #4
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d10e      	bne.n	8008f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f817 	bl	8008fb2 <UART_WaitOnFlagUntilTimeout>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e00d      	b.n	8008faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2220      	movs	r2, #32
 8008f92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2220      	movs	r2, #32
 8008f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b09c      	sub	sp, #112	; 0x70
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc2:	e0a5      	b.n	8009110 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fca:	f000 80a1 	beq.w	8009110 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fce:	f7fb feab 	bl	8004d28 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d13e      	bne.n	8009062 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	663b      	str	r3, [r7, #96]	; 0x60
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009036:	64ba      	str	r2, [r7, #72]	; 0x48
 8009038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800903c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2220      	movs	r2, #32
 800904e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2220      	movs	r2, #32
 8009054:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e067      	b.n	8009132 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0304 	and.w	r3, r3, #4
 800906c:	2b00      	cmp	r3, #0
 800906e:	d04f      	beq.n	8009110 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800907a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800907e:	d147      	bne.n	8009110 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009088:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	e853 3f00 	ldrex	r3, [r3]
 8009096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800909e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	461a      	mov	r2, r3
 80090a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a8:	637b      	str	r3, [r7, #52]	; 0x34
 80090aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b0:	e841 2300 	strex	r3, r2, [r1]
 80090b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e6      	bne.n	800908a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	3308      	adds	r3, #8
 80090c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	e853 3f00 	ldrex	r3, [r3]
 80090ca:	613b      	str	r3, [r7, #16]
   return(result);
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	f023 0301 	bic.w	r3, r3, #1
 80090d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3308      	adds	r3, #8
 80090da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090dc:	623a      	str	r2, [r7, #32]
 80090de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e0:	69f9      	ldr	r1, [r7, #28]
 80090e2:	6a3a      	ldr	r2, [r7, #32]
 80090e4:	e841 2300 	strex	r3, r2, [r1]
 80090e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ea:	69bb      	ldr	r3, [r7, #24]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1e5      	bne.n	80090bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2220      	movs	r2, #32
 80090f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	2220      	movs	r2, #32
 80090fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e010      	b.n	8009132 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	69da      	ldr	r2, [r3, #28]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	4013      	ands	r3, r2
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	429a      	cmp	r2, r3
 800911e:	bf0c      	ite	eq
 8009120:	2301      	moveq	r3, #1
 8009122:	2300      	movne	r3, #0
 8009124:	b2db      	uxtb	r3, r3
 8009126:	461a      	mov	r2, r3
 8009128:	79fb      	ldrb	r3, [r7, #7]
 800912a:	429a      	cmp	r2, r3
 800912c:	f43f af4a 	beq.w	8008fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3770      	adds	r7, #112	; 0x70
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b096      	sub	sp, #88	; 0x58
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	4613      	mov	r3, r2
 8009148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	88fa      	ldrh	r2, [r7, #6]
 8009154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2222      	movs	r2, #34	; 0x22
 8009164:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916a:	2b00      	cmp	r3, #0
 800916c:	d02b      	beq.n	80091c6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	4a42      	ldr	r2, [pc, #264]	; (800927c <UART_Start_Receive_DMA+0x140>)
 8009174:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917a:	4a41      	ldr	r2, [pc, #260]	; (8009280 <UART_Start_Receive_DMA+0x144>)
 800917c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	4a40      	ldr	r2, [pc, #256]	; (8009284 <UART_Start_Receive_DMA+0x148>)
 8009184:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	2200      	movs	r2, #0
 800918c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3324      	adds	r3, #36	; 0x24
 8009198:	4619      	mov	r1, r3
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919e:	461a      	mov	r2, r3
 80091a0:	88fb      	ldrh	r3, [r7, #6]
 80091a2:	f7fb ffbb 	bl	800511c <HAL_DMA_Start_IT>
 80091a6:	4603      	mov	r3, r0
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d00c      	beq.n	80091c6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2210      	movs	r2, #16
 80091b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2220      	movs	r2, #32
 80091c0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e055      	b.n	8009272 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d018      	beq.n	8009208 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ea:	657b      	str	r3, [r7, #84]	; 0x54
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	461a      	mov	r2, r3
 80091f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80091f6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80091fc:	e841 2300 	strex	r3, r2, [r1]
 8009200:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e6      	bne.n	80091d6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3308      	adds	r3, #8
 800920e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009212:	e853 3f00 	ldrex	r3, [r3]
 8009216:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	f043 0301 	orr.w	r3, r3, #1
 800921e:	653b      	str	r3, [r7, #80]	; 0x50
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3308      	adds	r3, #8
 8009226:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009228:	637a      	str	r2, [r7, #52]	; 0x34
 800922a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800922e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009230:	e841 2300 	strex	r3, r2, [r1]
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009238:	2b00      	cmp	r3, #0
 800923a:	d1e5      	bne.n	8009208 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	613b      	str	r3, [r7, #16]
   return(result);
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800925c:	623a      	str	r2, [r7, #32]
 800925e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	69f9      	ldr	r1, [r7, #28]
 8009262:	6a3a      	ldr	r2, [r7, #32]
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	61bb      	str	r3, [r7, #24]
   return(result);
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009270:	2300      	movs	r3, #0
}
 8009272:	4618      	mov	r0, r3
 8009274:	3758      	adds	r7, #88	; 0x58
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	08009451 	.word	0x08009451
 8009280:	08009575 	.word	0x08009575
 8009284:	080095ad 	.word	0x080095ad

08009288 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	; 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	e853 3f00 	ldrex	r3, [r3]
 800929c:	60bb      	str	r3, [r7, #8]
   return(result);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80092a4:	61fb      	str	r3, [r7, #28]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	6979      	ldr	r1, [r7, #20]
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	e841 2300 	strex	r3, r2, [r1]
 80092ba:	613b      	str	r3, [r7, #16]
   return(result);
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1e6      	bne.n	8009290 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2220      	movs	r2, #32
 80092c6:	679a      	str	r2, [r3, #120]	; 0x78
}
 80092c8:	bf00      	nop
 80092ca:	3724      	adds	r7, #36	; 0x24
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b095      	sub	sp, #84	; 0x54
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	461a      	mov	r2, r3
 80092f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092fa:	643b      	str	r3, [r7, #64]	; 0x40
 80092fc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009300:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e6      	bne.n	80092dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3308      	adds	r3, #8
 8009314:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6a3b      	ldr	r3, [r7, #32]
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	61fb      	str	r3, [r7, #28]
   return(result);
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	f023 0301 	bic.w	r3, r3, #1
 8009324:	64bb      	str	r3, [r7, #72]	; 0x48
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800932e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e5      	bne.n	800930e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009346:	2b01      	cmp	r3, #1
 8009348:	d118      	bne.n	800937c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	60bb      	str	r3, [r7, #8]
   return(result);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	f023 0310 	bic.w	r3, r3, #16
 800935e:	647b      	str	r3, [r7, #68]	; 0x44
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009368:	61bb      	str	r3, [r7, #24]
 800936a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	6979      	ldr	r1, [r7, #20]
 800936e:	69ba      	ldr	r2, [r7, #24]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	613b      	str	r3, [r7, #16]
   return(result);
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2220      	movs	r2, #32
 8009380:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800938e:	bf00      	nop
 8009390:	3754      	adds	r7, #84	; 0x54
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b090      	sub	sp, #64	; 0x40
 800939e:	af00      	add	r7, sp, #0
 80093a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0320 	and.w	r3, r3, #32
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d137      	bne.n	8009426 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80093b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b8:	2200      	movs	r2, #0
 80093ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80093be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3308      	adds	r3, #8
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	623b      	str	r3, [r7, #32]
   return(result);
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80093d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093de:	633a      	str	r2, [r7, #48]	; 0x30
 80093e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e5      	bne.n	80093be <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	e853 3f00 	ldrex	r3, [r3]
 80093fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009406:	637b      	str	r3, [r7, #52]	; 0x34
 8009408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	69b9      	ldr	r1, [r7, #24]
 8009416:	69fa      	ldr	r2, [r7, #28]
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	617b      	str	r3, [r7, #20]
   return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e6      	bne.n	80093f2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009424:	e002      	b.n	800942c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009426:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009428:	f7fa fa22 	bl	8003870 <HAL_UART_TxCpltCallback>
}
 800942c:	bf00      	nop
 800942e:	3740      	adds	r7, #64	; 0x40
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009440:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f7ff f9e8 	bl	8008818 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009448:	bf00      	nop
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b09c      	sub	sp, #112	; 0x70
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800945c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b00      	cmp	r3, #0
 800946a:	d170      	bne.n	800954e <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800946c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800946e:	2200      	movs	r2, #0
 8009470:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009488:	66bb      	str	r3, [r7, #104]	; 0x68
 800948a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	461a      	mov	r2, r3
 8009490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009492:	65bb      	str	r3, [r7, #88]	; 0x58
 8009494:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009496:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009498:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800949a:	e841 2300 	strex	r3, r2, [r1]
 800949e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e6      	bne.n	8009474 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	3308      	adds	r3, #8
 80094ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b8:	f023 0301 	bic.w	r3, r3, #1
 80094bc:	667b      	str	r3, [r7, #100]	; 0x64
 80094be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094c6:	647a      	str	r2, [r7, #68]	; 0x44
 80094c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e5      	bne.n	80094a6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3308      	adds	r3, #8
 80094e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e4:	e853 3f00 	ldrex	r3, [r3]
 80094e8:	623b      	str	r3, [r7, #32]
   return(result);
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f0:	663b      	str	r3, [r7, #96]	; 0x60
 80094f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80094fa:	633a      	str	r2, [r7, #48]	; 0x30
 80094fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009502:	e841 2300 	strex	r3, r2, [r1]
 8009506:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e5      	bne.n	80094da <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800950e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009510:	2220      	movs	r2, #32
 8009512:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009518:	2b01      	cmp	r3, #1
 800951a:	d118      	bne.n	800954e <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	60fb      	str	r3, [r7, #12]
   return(result);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f023 0310 	bic.w	r3, r3, #16
 8009530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953a:	61fb      	str	r3, [r7, #28]
 800953c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	69b9      	ldr	r1, [r7, #24]
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	617b      	str	r3, [r7, #20]
   return(result);
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e6      	bne.n	800951c <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800954e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009552:	2b01      	cmp	r3, #1
 8009554:	d107      	bne.n	8009566 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009558:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800955c:	4619      	mov	r1, r3
 800955e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009560:	f7ff f978 	bl	8008854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009564:	e002      	b.n	800956c <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8009566:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009568:	f7fa f994 	bl	8003894 <HAL_UART_RxCpltCallback>
}
 800956c:	bf00      	nop
 800956e:	3770      	adds	r7, #112	; 0x70
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009580:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009586:	2b01      	cmp	r3, #1
 8009588:	d109      	bne.n	800959e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009590:	085b      	lsrs	r3, r3, #1
 8009592:	b29b      	uxth	r3, r3
 8009594:	4619      	mov	r1, r3
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f7ff f95c 	bl	8008854 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800959c:	e002      	b.n	80095a4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f7ff f944 	bl	800882c <HAL_UART_RxHalfCpltCallback>
}
 80095a4:	bf00      	nop
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b80      	cmp	r3, #128	; 0x80
 80095d2:	d109      	bne.n	80095e8 <UART_DMAError+0x3c>
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b21      	cmp	r3, #33	; 0x21
 80095d8:	d106      	bne.n	80095e8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	2200      	movs	r2, #0
 80095de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80095e2:	6978      	ldr	r0, [r7, #20]
 80095e4:	f7ff fe50 	bl	8009288 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689b      	ldr	r3, [r3, #8]
 80095ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f2:	2b40      	cmp	r3, #64	; 0x40
 80095f4:	d109      	bne.n	800960a <UART_DMAError+0x5e>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2b22      	cmp	r3, #34	; 0x22
 80095fa:	d106      	bne.n	800960a <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009604:	6978      	ldr	r0, [r7, #20]
 8009606:	f7ff fe65 	bl	80092d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009610:	f043 0210 	orr.w	r2, r3, #16
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800961a:	6978      	ldr	r0, [r7, #20]
 800961c:	f7ff f910 	bl	8008840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009620:	bf00      	nop
 8009622:	3718      	adds	r7, #24
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f7ff f8fa 	bl	8008840 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	e853 3f00 	ldrex	r3, [r3]
 8009668:	60bb      	str	r3, [r7, #8]
   return(result);
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009670:	61fb      	str	r3, [r7, #28]
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	61bb      	str	r3, [r7, #24]
 800967c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6979      	ldr	r1, [r7, #20]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	613b      	str	r3, [r7, #16]
   return(result);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e6      	bne.n	800965c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f7fa f8e8 	bl	8003870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096a0:	bf00      	nop
 80096a2:	3720      	adds	r7, #32
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <__cxa_pure_virtual>:
 80096bc:	b508      	push	{r3, lr}
 80096be:	f000 f80d 	bl	80096dc <_ZSt9terminatev>

080096c2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80096c2:	b508      	push	{r3, lr}
 80096c4:	4780      	blx	r0
 80096c6:	f000 ff29 	bl	800a51c <abort>
	...

080096cc <_ZSt13get_terminatev>:
 80096cc:	4b02      	ldr	r3, [pc, #8]	; (80096d8 <_ZSt13get_terminatev+0xc>)
 80096ce:	6818      	ldr	r0, [r3, #0]
 80096d0:	f3bf 8f5b 	dmb	ish
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	2000000c 	.word	0x2000000c

080096dc <_ZSt9terminatev>:
 80096dc:	b508      	push	{r3, lr}
 80096de:	f7ff fff5 	bl	80096cc <_ZSt13get_terminatev>
 80096e2:	f7ff ffee 	bl	80096c2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080096e8 <pow>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	ed2d 8b02 	vpush	{d8}
 80096ee:	eeb0 8a40 	vmov.f32	s16, s0
 80096f2:	eef0 8a60 	vmov.f32	s17, s1
 80096f6:	ec55 4b11 	vmov	r4, r5, d1
 80096fa:	f000 f865 	bl	80097c8 <__ieee754_pow>
 80096fe:	4622      	mov	r2, r4
 8009700:	462b      	mov	r3, r5
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	ec57 6b10 	vmov	r6, r7, d0
 800970a:	f7f7 fa0f 	bl	8000b2c <__aeabi_dcmpun>
 800970e:	2800      	cmp	r0, #0
 8009710:	d13b      	bne.n	800978a <pow+0xa2>
 8009712:	ec51 0b18 	vmov	r0, r1, d8
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	f7f7 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800971e:	b1b8      	cbz	r0, 8009750 <pow+0x68>
 8009720:	2200      	movs	r2, #0
 8009722:	2300      	movs	r3, #0
 8009724:	4620      	mov	r0, r4
 8009726:	4629      	mov	r1, r5
 8009728:	f7f7 f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800972c:	2800      	cmp	r0, #0
 800972e:	d146      	bne.n	80097be <pow+0xd6>
 8009730:	ec45 4b10 	vmov	d0, r4, r5
 8009734:	f000 fe61 	bl	800a3fa <finite>
 8009738:	b338      	cbz	r0, 800978a <pow+0xa2>
 800973a:	2200      	movs	r2, #0
 800973c:	2300      	movs	r3, #0
 800973e:	4620      	mov	r0, r4
 8009740:	4629      	mov	r1, r5
 8009742:	f7f7 f9cb 	bl	8000adc <__aeabi_dcmplt>
 8009746:	b300      	cbz	r0, 800978a <pow+0xa2>
 8009748:	f000 fef0 	bl	800a52c <__errno>
 800974c:	2322      	movs	r3, #34	; 0x22
 800974e:	e01b      	b.n	8009788 <pow+0xa0>
 8009750:	ec47 6b10 	vmov	d0, r6, r7
 8009754:	f000 fe51 	bl	800a3fa <finite>
 8009758:	b9e0      	cbnz	r0, 8009794 <pow+0xac>
 800975a:	eeb0 0a48 	vmov.f32	s0, s16
 800975e:	eef0 0a68 	vmov.f32	s1, s17
 8009762:	f000 fe4a 	bl	800a3fa <finite>
 8009766:	b1a8      	cbz	r0, 8009794 <pow+0xac>
 8009768:	ec45 4b10 	vmov	d0, r4, r5
 800976c:	f000 fe45 	bl	800a3fa <finite>
 8009770:	b180      	cbz	r0, 8009794 <pow+0xac>
 8009772:	4632      	mov	r2, r6
 8009774:	463b      	mov	r3, r7
 8009776:	4630      	mov	r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	f7f7 f9d7 	bl	8000b2c <__aeabi_dcmpun>
 800977e:	2800      	cmp	r0, #0
 8009780:	d0e2      	beq.n	8009748 <pow+0x60>
 8009782:	f000 fed3 	bl	800a52c <__errno>
 8009786:	2321      	movs	r3, #33	; 0x21
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	ecbd 8b02 	vpop	{d8}
 800978e:	ec47 6b10 	vmov	d0, r6, r7
 8009792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009794:	2200      	movs	r2, #0
 8009796:	2300      	movs	r3, #0
 8009798:	4630      	mov	r0, r6
 800979a:	4639      	mov	r1, r7
 800979c:	f7f7 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d0f2      	beq.n	800978a <pow+0xa2>
 80097a4:	eeb0 0a48 	vmov.f32	s0, s16
 80097a8:	eef0 0a68 	vmov.f32	s1, s17
 80097ac:	f000 fe25 	bl	800a3fa <finite>
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d0ea      	beq.n	800978a <pow+0xa2>
 80097b4:	ec45 4b10 	vmov	d0, r4, r5
 80097b8:	f000 fe1f 	bl	800a3fa <finite>
 80097bc:	e7c3      	b.n	8009746 <pow+0x5e>
 80097be:	4f01      	ldr	r7, [pc, #4]	; (80097c4 <pow+0xdc>)
 80097c0:	2600      	movs	r6, #0
 80097c2:	e7e2      	b.n	800978a <pow+0xa2>
 80097c4:	3ff00000 	.word	0x3ff00000

080097c8 <__ieee754_pow>:
 80097c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097cc:	ed2d 8b06 	vpush	{d8-d10}
 80097d0:	b089      	sub	sp, #36	; 0x24
 80097d2:	ed8d 1b00 	vstr	d1, [sp]
 80097d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80097da:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80097de:	ea58 0102 	orrs.w	r1, r8, r2
 80097e2:	ec57 6b10 	vmov	r6, r7, d0
 80097e6:	d115      	bne.n	8009814 <__ieee754_pow+0x4c>
 80097e8:	19b3      	adds	r3, r6, r6
 80097ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80097ee:	4152      	adcs	r2, r2
 80097f0:	4299      	cmp	r1, r3
 80097f2:	4b89      	ldr	r3, [pc, #548]	; (8009a18 <__ieee754_pow+0x250>)
 80097f4:	4193      	sbcs	r3, r2
 80097f6:	f080 84d2 	bcs.w	800a19e <__ieee754_pow+0x9d6>
 80097fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097fe:	4630      	mov	r0, r6
 8009800:	4639      	mov	r1, r7
 8009802:	f7f6 fd43 	bl	800028c <__adddf3>
 8009806:	ec41 0b10 	vmov	d0, r0, r1
 800980a:	b009      	add	sp, #36	; 0x24
 800980c:	ecbd 8b06 	vpop	{d8-d10}
 8009810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009814:	4b81      	ldr	r3, [pc, #516]	; (8009a1c <__ieee754_pow+0x254>)
 8009816:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800981a:	429c      	cmp	r4, r3
 800981c:	ee10 aa10 	vmov	sl, s0
 8009820:	463d      	mov	r5, r7
 8009822:	dc06      	bgt.n	8009832 <__ieee754_pow+0x6a>
 8009824:	d101      	bne.n	800982a <__ieee754_pow+0x62>
 8009826:	2e00      	cmp	r6, #0
 8009828:	d1e7      	bne.n	80097fa <__ieee754_pow+0x32>
 800982a:	4598      	cmp	r8, r3
 800982c:	dc01      	bgt.n	8009832 <__ieee754_pow+0x6a>
 800982e:	d10f      	bne.n	8009850 <__ieee754_pow+0x88>
 8009830:	b172      	cbz	r2, 8009850 <__ieee754_pow+0x88>
 8009832:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009836:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800983a:	ea55 050a 	orrs.w	r5, r5, sl
 800983e:	d1dc      	bne.n	80097fa <__ieee754_pow+0x32>
 8009840:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009844:	18db      	adds	r3, r3, r3
 8009846:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800984a:	4152      	adcs	r2, r2
 800984c:	429d      	cmp	r5, r3
 800984e:	e7d0      	b.n	80097f2 <__ieee754_pow+0x2a>
 8009850:	2d00      	cmp	r5, #0
 8009852:	da3b      	bge.n	80098cc <__ieee754_pow+0x104>
 8009854:	4b72      	ldr	r3, [pc, #456]	; (8009a20 <__ieee754_pow+0x258>)
 8009856:	4598      	cmp	r8, r3
 8009858:	dc51      	bgt.n	80098fe <__ieee754_pow+0x136>
 800985a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800985e:	4598      	cmp	r8, r3
 8009860:	f340 84ac 	ble.w	800a1bc <__ieee754_pow+0x9f4>
 8009864:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009868:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800986c:	2b14      	cmp	r3, #20
 800986e:	dd0f      	ble.n	8009890 <__ieee754_pow+0xc8>
 8009870:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009874:	fa22 f103 	lsr.w	r1, r2, r3
 8009878:	fa01 f303 	lsl.w	r3, r1, r3
 800987c:	4293      	cmp	r3, r2
 800987e:	f040 849d 	bne.w	800a1bc <__ieee754_pow+0x9f4>
 8009882:	f001 0101 	and.w	r1, r1, #1
 8009886:	f1c1 0302 	rsb	r3, r1, #2
 800988a:	9304      	str	r3, [sp, #16]
 800988c:	b182      	cbz	r2, 80098b0 <__ieee754_pow+0xe8>
 800988e:	e05f      	b.n	8009950 <__ieee754_pow+0x188>
 8009890:	2a00      	cmp	r2, #0
 8009892:	d15b      	bne.n	800994c <__ieee754_pow+0x184>
 8009894:	f1c3 0314 	rsb	r3, r3, #20
 8009898:	fa48 f103 	asr.w	r1, r8, r3
 800989c:	fa01 f303 	lsl.w	r3, r1, r3
 80098a0:	4543      	cmp	r3, r8
 80098a2:	f040 8488 	bne.w	800a1b6 <__ieee754_pow+0x9ee>
 80098a6:	f001 0101 	and.w	r1, r1, #1
 80098aa:	f1c1 0302 	rsb	r3, r1, #2
 80098ae:	9304      	str	r3, [sp, #16]
 80098b0:	4b5c      	ldr	r3, [pc, #368]	; (8009a24 <__ieee754_pow+0x25c>)
 80098b2:	4598      	cmp	r8, r3
 80098b4:	d132      	bne.n	800991c <__ieee754_pow+0x154>
 80098b6:	f1b9 0f00 	cmp.w	r9, #0
 80098ba:	f280 8478 	bge.w	800a1ae <__ieee754_pow+0x9e6>
 80098be:	4959      	ldr	r1, [pc, #356]	; (8009a24 <__ieee754_pow+0x25c>)
 80098c0:	4632      	mov	r2, r6
 80098c2:	463b      	mov	r3, r7
 80098c4:	2000      	movs	r0, #0
 80098c6:	f7f6 ffc1 	bl	800084c <__aeabi_ddiv>
 80098ca:	e79c      	b.n	8009806 <__ieee754_pow+0x3e>
 80098cc:	2300      	movs	r3, #0
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	2a00      	cmp	r2, #0
 80098d2:	d13d      	bne.n	8009950 <__ieee754_pow+0x188>
 80098d4:	4b51      	ldr	r3, [pc, #324]	; (8009a1c <__ieee754_pow+0x254>)
 80098d6:	4598      	cmp	r8, r3
 80098d8:	d1ea      	bne.n	80098b0 <__ieee754_pow+0xe8>
 80098da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80098de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80098e2:	ea53 030a 	orrs.w	r3, r3, sl
 80098e6:	f000 845a 	beq.w	800a19e <__ieee754_pow+0x9d6>
 80098ea:	4b4f      	ldr	r3, [pc, #316]	; (8009a28 <__ieee754_pow+0x260>)
 80098ec:	429c      	cmp	r4, r3
 80098ee:	dd08      	ble.n	8009902 <__ieee754_pow+0x13a>
 80098f0:	f1b9 0f00 	cmp.w	r9, #0
 80098f4:	f2c0 8457 	blt.w	800a1a6 <__ieee754_pow+0x9de>
 80098f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098fc:	e783      	b.n	8009806 <__ieee754_pow+0x3e>
 80098fe:	2302      	movs	r3, #2
 8009900:	e7e5      	b.n	80098ce <__ieee754_pow+0x106>
 8009902:	f1b9 0f00 	cmp.w	r9, #0
 8009906:	f04f 0000 	mov.w	r0, #0
 800990a:	f04f 0100 	mov.w	r1, #0
 800990e:	f6bf af7a 	bge.w	8009806 <__ieee754_pow+0x3e>
 8009912:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800991a:	e774      	b.n	8009806 <__ieee754_pow+0x3e>
 800991c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009920:	d106      	bne.n	8009930 <__ieee754_pow+0x168>
 8009922:	4632      	mov	r2, r6
 8009924:	463b      	mov	r3, r7
 8009926:	4630      	mov	r0, r6
 8009928:	4639      	mov	r1, r7
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	e76a      	b.n	8009806 <__ieee754_pow+0x3e>
 8009930:	4b3e      	ldr	r3, [pc, #248]	; (8009a2c <__ieee754_pow+0x264>)
 8009932:	4599      	cmp	r9, r3
 8009934:	d10c      	bne.n	8009950 <__ieee754_pow+0x188>
 8009936:	2d00      	cmp	r5, #0
 8009938:	db0a      	blt.n	8009950 <__ieee754_pow+0x188>
 800993a:	ec47 6b10 	vmov	d0, r6, r7
 800993e:	b009      	add	sp, #36	; 0x24
 8009940:	ecbd 8b06 	vpop	{d8-d10}
 8009944:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	f000 bc6c 	b.w	800a224 <__ieee754_sqrt>
 800994c:	2300      	movs	r3, #0
 800994e:	9304      	str	r3, [sp, #16]
 8009950:	ec47 6b10 	vmov	d0, r6, r7
 8009954:	f000 fd48 	bl	800a3e8 <fabs>
 8009958:	ec51 0b10 	vmov	r0, r1, d0
 800995c:	f1ba 0f00 	cmp.w	sl, #0
 8009960:	d129      	bne.n	80099b6 <__ieee754_pow+0x1ee>
 8009962:	b124      	cbz	r4, 800996e <__ieee754_pow+0x1a6>
 8009964:	4b2f      	ldr	r3, [pc, #188]	; (8009a24 <__ieee754_pow+0x25c>)
 8009966:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800996a:	429a      	cmp	r2, r3
 800996c:	d123      	bne.n	80099b6 <__ieee754_pow+0x1ee>
 800996e:	f1b9 0f00 	cmp.w	r9, #0
 8009972:	da05      	bge.n	8009980 <__ieee754_pow+0x1b8>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	2000      	movs	r0, #0
 800997a:	492a      	ldr	r1, [pc, #168]	; (8009a24 <__ieee754_pow+0x25c>)
 800997c:	f7f6 ff66 	bl	800084c <__aeabi_ddiv>
 8009980:	2d00      	cmp	r5, #0
 8009982:	f6bf af40 	bge.w	8009806 <__ieee754_pow+0x3e>
 8009986:	9b04      	ldr	r3, [sp, #16]
 8009988:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800998c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009990:	4323      	orrs	r3, r4
 8009992:	d108      	bne.n	80099a6 <__ieee754_pow+0x1de>
 8009994:	4602      	mov	r2, r0
 8009996:	460b      	mov	r3, r1
 8009998:	4610      	mov	r0, r2
 800999a:	4619      	mov	r1, r3
 800999c:	f7f6 fc74 	bl	8000288 <__aeabi_dsub>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	e78f      	b.n	80098c6 <__ieee754_pow+0xfe>
 80099a6:	9b04      	ldr	r3, [sp, #16]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	f47f af2c 	bne.w	8009806 <__ieee754_pow+0x3e>
 80099ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099b2:	4619      	mov	r1, r3
 80099b4:	e727      	b.n	8009806 <__ieee754_pow+0x3e>
 80099b6:	0feb      	lsrs	r3, r5, #31
 80099b8:	3b01      	subs	r3, #1
 80099ba:	9306      	str	r3, [sp, #24]
 80099bc:	9a06      	ldr	r2, [sp, #24]
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	d102      	bne.n	80099ca <__ieee754_pow+0x202>
 80099c4:	4632      	mov	r2, r6
 80099c6:	463b      	mov	r3, r7
 80099c8:	e7e6      	b.n	8009998 <__ieee754_pow+0x1d0>
 80099ca:	4b19      	ldr	r3, [pc, #100]	; (8009a30 <__ieee754_pow+0x268>)
 80099cc:	4598      	cmp	r8, r3
 80099ce:	f340 80fb 	ble.w	8009bc8 <__ieee754_pow+0x400>
 80099d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80099d6:	4598      	cmp	r8, r3
 80099d8:	4b13      	ldr	r3, [pc, #76]	; (8009a28 <__ieee754_pow+0x260>)
 80099da:	dd0c      	ble.n	80099f6 <__ieee754_pow+0x22e>
 80099dc:	429c      	cmp	r4, r3
 80099de:	dc0f      	bgt.n	8009a00 <__ieee754_pow+0x238>
 80099e0:	f1b9 0f00 	cmp.w	r9, #0
 80099e4:	da0f      	bge.n	8009a06 <__ieee754_pow+0x23e>
 80099e6:	2000      	movs	r0, #0
 80099e8:	b009      	add	sp, #36	; 0x24
 80099ea:	ecbd 8b06 	vpop	{d8-d10}
 80099ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f2:	f000 bcf0 	b.w	800a3d6 <__math_oflow>
 80099f6:	429c      	cmp	r4, r3
 80099f8:	dbf2      	blt.n	80099e0 <__ieee754_pow+0x218>
 80099fa:	4b0a      	ldr	r3, [pc, #40]	; (8009a24 <__ieee754_pow+0x25c>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	dd19      	ble.n	8009a34 <__ieee754_pow+0x26c>
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	dcef      	bgt.n	80099e6 <__ieee754_pow+0x21e>
 8009a06:	2000      	movs	r0, #0
 8009a08:	b009      	add	sp, #36	; 0x24
 8009a0a:	ecbd 8b06 	vpop	{d8-d10}
 8009a0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a12:	f000 bcd7 	b.w	800a3c4 <__math_uflow>
 8009a16:	bf00      	nop
 8009a18:	fff00000 	.word	0xfff00000
 8009a1c:	7ff00000 	.word	0x7ff00000
 8009a20:	433fffff 	.word	0x433fffff
 8009a24:	3ff00000 	.word	0x3ff00000
 8009a28:	3fefffff 	.word	0x3fefffff
 8009a2c:	3fe00000 	.word	0x3fe00000
 8009a30:	41e00000 	.word	0x41e00000
 8009a34:	4b60      	ldr	r3, [pc, #384]	; (8009bb8 <__ieee754_pow+0x3f0>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	f7f6 fc26 	bl	8000288 <__aeabi_dsub>
 8009a3c:	a354      	add	r3, pc, #336	; (adr r3, 8009b90 <__ieee754_pow+0x3c8>)
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	4604      	mov	r4, r0
 8009a44:	460d      	mov	r5, r1
 8009a46:	f7f6 fdd7 	bl	80005f8 <__aeabi_dmul>
 8009a4a:	a353      	add	r3, pc, #332	; (adr r3, 8009b98 <__ieee754_pow+0x3d0>)
 8009a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a50:	4606      	mov	r6, r0
 8009a52:	460f      	mov	r7, r1
 8009a54:	4620      	mov	r0, r4
 8009a56:	4629      	mov	r1, r5
 8009a58:	f7f6 fdce 	bl	80005f8 <__aeabi_dmul>
 8009a5c:	4b57      	ldr	r3, [pc, #348]	; (8009bbc <__ieee754_pow+0x3f4>)
 8009a5e:	4682      	mov	sl, r0
 8009a60:	468b      	mov	fp, r1
 8009a62:	2200      	movs	r2, #0
 8009a64:	4620      	mov	r0, r4
 8009a66:	4629      	mov	r1, r5
 8009a68:	f7f6 fdc6 	bl	80005f8 <__aeabi_dmul>
 8009a6c:	4602      	mov	r2, r0
 8009a6e:	460b      	mov	r3, r1
 8009a70:	a14b      	add	r1, pc, #300	; (adr r1, 8009ba0 <__ieee754_pow+0x3d8>)
 8009a72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a76:	f7f6 fc07 	bl	8000288 <__aeabi_dsub>
 8009a7a:	4622      	mov	r2, r4
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	f7f6 fdbb 	bl	80005f8 <__aeabi_dmul>
 8009a82:	4602      	mov	r2, r0
 8009a84:	460b      	mov	r3, r1
 8009a86:	2000      	movs	r0, #0
 8009a88:	494d      	ldr	r1, [pc, #308]	; (8009bc0 <__ieee754_pow+0x3f8>)
 8009a8a:	f7f6 fbfd 	bl	8000288 <__aeabi_dsub>
 8009a8e:	4622      	mov	r2, r4
 8009a90:	4680      	mov	r8, r0
 8009a92:	4689      	mov	r9, r1
 8009a94:	462b      	mov	r3, r5
 8009a96:	4620      	mov	r0, r4
 8009a98:	4629      	mov	r1, r5
 8009a9a:	f7f6 fdad 	bl	80005f8 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	4649      	mov	r1, r9
 8009aa6:	f7f6 fda7 	bl	80005f8 <__aeabi_dmul>
 8009aaa:	a33f      	add	r3, pc, #252	; (adr r3, 8009ba8 <__ieee754_pow+0x3e0>)
 8009aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	4650      	mov	r0, sl
 8009aba:	4659      	mov	r1, fp
 8009abc:	f7f6 fbe4 	bl	8000288 <__aeabi_dsub>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	460b      	mov	r3, r1
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	4689      	mov	r9, r1
 8009ac8:	4630      	mov	r0, r6
 8009aca:	4639      	mov	r1, r7
 8009acc:	f7f6 fbde 	bl	800028c <__adddf3>
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	4632      	mov	r2, r6
 8009ad4:	463b      	mov	r3, r7
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	460d      	mov	r5, r1
 8009ada:	f7f6 fbd5 	bl	8000288 <__aeabi_dsub>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	460b      	mov	r3, r1
 8009ae2:	4640      	mov	r0, r8
 8009ae4:	4649      	mov	r1, r9
 8009ae6:	f7f6 fbcf 	bl	8000288 <__aeabi_dsub>
 8009aea:	9b04      	ldr	r3, [sp, #16]
 8009aec:	9a06      	ldr	r2, [sp, #24]
 8009aee:	3b01      	subs	r3, #1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	4682      	mov	sl, r0
 8009af4:	468b      	mov	fp, r1
 8009af6:	f040 81e7 	bne.w	8009ec8 <__ieee754_pow+0x700>
 8009afa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009bb0 <__ieee754_pow+0x3e8>
 8009afe:	eeb0 8a47 	vmov.f32	s16, s14
 8009b02:	eef0 8a67 	vmov.f32	s17, s15
 8009b06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009b0a:	2600      	movs	r6, #0
 8009b0c:	4632      	mov	r2, r6
 8009b0e:	463b      	mov	r3, r7
 8009b10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b14:	f7f6 fbb8 	bl	8000288 <__aeabi_dsub>
 8009b18:	4622      	mov	r2, r4
 8009b1a:	462b      	mov	r3, r5
 8009b1c:	f7f6 fd6c 	bl	80005f8 <__aeabi_dmul>
 8009b20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b24:	4680      	mov	r8, r0
 8009b26:	4689      	mov	r9, r1
 8009b28:	4650      	mov	r0, sl
 8009b2a:	4659      	mov	r1, fp
 8009b2c:	f7f6 fd64 	bl	80005f8 <__aeabi_dmul>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fba8 	bl	800028c <__adddf3>
 8009b3c:	4632      	mov	r2, r6
 8009b3e:	463b      	mov	r3, r7
 8009b40:	4680      	mov	r8, r0
 8009b42:	4689      	mov	r9, r1
 8009b44:	4620      	mov	r0, r4
 8009b46:	4629      	mov	r1, r5
 8009b48:	f7f6 fd56 	bl	80005f8 <__aeabi_dmul>
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4604      	mov	r4, r0
 8009b50:	460d      	mov	r5, r1
 8009b52:	4602      	mov	r2, r0
 8009b54:	4649      	mov	r1, r9
 8009b56:	4640      	mov	r0, r8
 8009b58:	f7f6 fb98 	bl	800028c <__adddf3>
 8009b5c:	4b19      	ldr	r3, [pc, #100]	; (8009bc4 <__ieee754_pow+0x3fc>)
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	ec45 4b19 	vmov	d9, r4, r5
 8009b64:	4606      	mov	r6, r0
 8009b66:	460f      	mov	r7, r1
 8009b68:	468b      	mov	fp, r1
 8009b6a:	f340 82f1 	ble.w	800a150 <__ieee754_pow+0x988>
 8009b6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009b72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009b76:	4303      	orrs	r3, r0
 8009b78:	f000 81e4 	beq.w	8009f44 <__ieee754_pow+0x77c>
 8009b7c:	ec51 0b18 	vmov	r0, r1, d8
 8009b80:	2200      	movs	r2, #0
 8009b82:	2300      	movs	r3, #0
 8009b84:	f7f6 ffaa 	bl	8000adc <__aeabi_dcmplt>
 8009b88:	3800      	subs	r0, #0
 8009b8a:	bf18      	it	ne
 8009b8c:	2001      	movne	r0, #1
 8009b8e:	e72b      	b.n	80099e8 <__ieee754_pow+0x220>
 8009b90:	60000000 	.word	0x60000000
 8009b94:	3ff71547 	.word	0x3ff71547
 8009b98:	f85ddf44 	.word	0xf85ddf44
 8009b9c:	3e54ae0b 	.word	0x3e54ae0b
 8009ba0:	55555555 	.word	0x55555555
 8009ba4:	3fd55555 	.word	0x3fd55555
 8009ba8:	652b82fe 	.word	0x652b82fe
 8009bac:	3ff71547 	.word	0x3ff71547
 8009bb0:	00000000 	.word	0x00000000
 8009bb4:	bff00000 	.word	0xbff00000
 8009bb8:	3ff00000 	.word	0x3ff00000
 8009bbc:	3fd00000 	.word	0x3fd00000
 8009bc0:	3fe00000 	.word	0x3fe00000
 8009bc4:	408fffff 	.word	0x408fffff
 8009bc8:	4bd5      	ldr	r3, [pc, #852]	; (8009f20 <__ieee754_pow+0x758>)
 8009bca:	402b      	ands	r3, r5
 8009bcc:	2200      	movs	r2, #0
 8009bce:	b92b      	cbnz	r3, 8009bdc <__ieee754_pow+0x414>
 8009bd0:	4bd4      	ldr	r3, [pc, #848]	; (8009f24 <__ieee754_pow+0x75c>)
 8009bd2:	f7f6 fd11 	bl	80005f8 <__aeabi_dmul>
 8009bd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009bda:	460c      	mov	r4, r1
 8009bdc:	1523      	asrs	r3, r4, #20
 8009bde:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009be2:	4413      	add	r3, r2
 8009be4:	9305      	str	r3, [sp, #20]
 8009be6:	4bd0      	ldr	r3, [pc, #832]	; (8009f28 <__ieee754_pow+0x760>)
 8009be8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009bec:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009bf6:	dd08      	ble.n	8009c0a <__ieee754_pow+0x442>
 8009bf8:	4bcc      	ldr	r3, [pc, #816]	; (8009f2c <__ieee754_pow+0x764>)
 8009bfa:	429c      	cmp	r4, r3
 8009bfc:	f340 8162 	ble.w	8009ec4 <__ieee754_pow+0x6fc>
 8009c00:	9b05      	ldr	r3, [sp, #20]
 8009c02:	3301      	adds	r3, #1
 8009c04:	9305      	str	r3, [sp, #20]
 8009c06:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009c0a:	2400      	movs	r4, #0
 8009c0c:	00e3      	lsls	r3, r4, #3
 8009c0e:	9307      	str	r3, [sp, #28]
 8009c10:	4bc7      	ldr	r3, [pc, #796]	; (8009f30 <__ieee754_pow+0x768>)
 8009c12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c16:	ed93 7b00 	vldr	d7, [r3]
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	ec53 2b17 	vmov	r2, r3, d7
 8009c20:	eeb0 9a47 	vmov.f32	s18, s14
 8009c24:	eef0 9a67 	vmov.f32	s19, s15
 8009c28:	4682      	mov	sl, r0
 8009c2a:	f7f6 fb2d 	bl	8000288 <__aeabi_dsub>
 8009c2e:	4652      	mov	r2, sl
 8009c30:	4606      	mov	r6, r0
 8009c32:	460f      	mov	r7, r1
 8009c34:	462b      	mov	r3, r5
 8009c36:	ec51 0b19 	vmov	r0, r1, d9
 8009c3a:	f7f6 fb27 	bl	800028c <__adddf3>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	460b      	mov	r3, r1
 8009c42:	2000      	movs	r0, #0
 8009c44:	49bb      	ldr	r1, [pc, #748]	; (8009f34 <__ieee754_pow+0x76c>)
 8009c46:	f7f6 fe01 	bl	800084c <__aeabi_ddiv>
 8009c4a:	ec41 0b1a 	vmov	d10, r0, r1
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4630      	mov	r0, r6
 8009c54:	4639      	mov	r1, r7
 8009c56:	f7f6 fccf 	bl	80005f8 <__aeabi_dmul>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c60:	9302      	str	r3, [sp, #8]
 8009c62:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009c66:	46ab      	mov	fp, r5
 8009c68:	106d      	asrs	r5, r5, #1
 8009c6a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009c6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009c72:	ec41 0b18 	vmov	d8, r0, r1
 8009c76:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	4649      	mov	r1, r9
 8009c80:	4614      	mov	r4, r2
 8009c82:	461d      	mov	r5, r3
 8009c84:	f7f6 fcb8 	bl	80005f8 <__aeabi_dmul>
 8009c88:	4602      	mov	r2, r0
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 fafa 	bl	8000288 <__aeabi_dsub>
 8009c94:	ec53 2b19 	vmov	r2, r3, d9
 8009c98:	4606      	mov	r6, r0
 8009c9a:	460f      	mov	r7, r1
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	4629      	mov	r1, r5
 8009ca0:	f7f6 faf2 	bl	8000288 <__aeabi_dsub>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	460b      	mov	r3, r1
 8009ca8:	4650      	mov	r0, sl
 8009caa:	4659      	mov	r1, fp
 8009cac:	f7f6 faec 	bl	8000288 <__aeabi_dsub>
 8009cb0:	4642      	mov	r2, r8
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f7f6 fae2 	bl	8000288 <__aeabi_dsub>
 8009cc4:	ec53 2b1a 	vmov	r2, r3, d10
 8009cc8:	f7f6 fc96 	bl	80005f8 <__aeabi_dmul>
 8009ccc:	ec53 2b18 	vmov	r2, r3, d8
 8009cd0:	ec41 0b19 	vmov	d9, r0, r1
 8009cd4:	ec51 0b18 	vmov	r0, r1, d8
 8009cd8:	f7f6 fc8e 	bl	80005f8 <__aeabi_dmul>
 8009cdc:	a37c      	add	r3, pc, #496	; (adr r3, 8009ed0 <__ieee754_pow+0x708>)
 8009cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	f7f6 fc87 	bl	80005f8 <__aeabi_dmul>
 8009cea:	a37b      	add	r3, pc, #492	; (adr r3, 8009ed8 <__ieee754_pow+0x710>)
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	f7f6 facc 	bl	800028c <__adddf3>
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	462b      	mov	r3, r5
 8009cf8:	f7f6 fc7e 	bl	80005f8 <__aeabi_dmul>
 8009cfc:	a378      	add	r3, pc, #480	; (adr r3, 8009ee0 <__ieee754_pow+0x718>)
 8009cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d02:	f7f6 fac3 	bl	800028c <__adddf3>
 8009d06:	4622      	mov	r2, r4
 8009d08:	462b      	mov	r3, r5
 8009d0a:	f7f6 fc75 	bl	80005f8 <__aeabi_dmul>
 8009d0e:	a376      	add	r3, pc, #472	; (adr r3, 8009ee8 <__ieee754_pow+0x720>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f7f6 faba 	bl	800028c <__adddf3>
 8009d18:	4622      	mov	r2, r4
 8009d1a:	462b      	mov	r3, r5
 8009d1c:	f7f6 fc6c 	bl	80005f8 <__aeabi_dmul>
 8009d20:	a373      	add	r3, pc, #460	; (adr r3, 8009ef0 <__ieee754_pow+0x728>)
 8009d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d26:	f7f6 fab1 	bl	800028c <__adddf3>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	462b      	mov	r3, r5
 8009d2e:	f7f6 fc63 	bl	80005f8 <__aeabi_dmul>
 8009d32:	a371      	add	r3, pc, #452	; (adr r3, 8009ef8 <__ieee754_pow+0x730>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 faa8 	bl	800028c <__adddf3>
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	4606      	mov	r6, r0
 8009d40:	460f      	mov	r7, r1
 8009d42:	462b      	mov	r3, r5
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fc56 	bl	80005f8 <__aeabi_dmul>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	460b      	mov	r3, r1
 8009d50:	4630      	mov	r0, r6
 8009d52:	4639      	mov	r1, r7
 8009d54:	f7f6 fc50 	bl	80005f8 <__aeabi_dmul>
 8009d58:	4642      	mov	r2, r8
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	464b      	mov	r3, r9
 8009d60:	ec51 0b18 	vmov	r0, r1, d8
 8009d64:	f7f6 fa92 	bl	800028c <__adddf3>
 8009d68:	ec53 2b19 	vmov	r2, r3, d9
 8009d6c:	f7f6 fc44 	bl	80005f8 <__aeabi_dmul>
 8009d70:	4622      	mov	r2, r4
 8009d72:	462b      	mov	r3, r5
 8009d74:	f7f6 fa8a 	bl	800028c <__adddf3>
 8009d78:	4642      	mov	r2, r8
 8009d7a:	4682      	mov	sl, r0
 8009d7c:	468b      	mov	fp, r1
 8009d7e:	464b      	mov	r3, r9
 8009d80:	4640      	mov	r0, r8
 8009d82:	4649      	mov	r1, r9
 8009d84:	f7f6 fc38 	bl	80005f8 <__aeabi_dmul>
 8009d88:	4b6b      	ldr	r3, [pc, #428]	; (8009f38 <__ieee754_pow+0x770>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460f      	mov	r7, r1
 8009d90:	f7f6 fa7c 	bl	800028c <__adddf3>
 8009d94:	4652      	mov	r2, sl
 8009d96:	465b      	mov	r3, fp
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	460d      	mov	r5, r1
 8009da2:	4602      	mov	r2, r0
 8009da4:	460b      	mov	r3, r1
 8009da6:	4640      	mov	r0, r8
 8009da8:	4649      	mov	r1, r9
 8009daa:	f7f6 fc25 	bl	80005f8 <__aeabi_dmul>
 8009dae:	4b62      	ldr	r3, [pc, #392]	; (8009f38 <__ieee754_pow+0x770>)
 8009db0:	4680      	mov	r8, r0
 8009db2:	4689      	mov	r9, r1
 8009db4:	2200      	movs	r2, #0
 8009db6:	4620      	mov	r0, r4
 8009db8:	4629      	mov	r1, r5
 8009dba:	f7f6 fa65 	bl	8000288 <__aeabi_dsub>
 8009dbe:	4632      	mov	r2, r6
 8009dc0:	463b      	mov	r3, r7
 8009dc2:	f7f6 fa61 	bl	8000288 <__aeabi_dsub>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4650      	mov	r0, sl
 8009dcc:	4659      	mov	r1, fp
 8009dce:	f7f6 fa5b 	bl	8000288 <__aeabi_dsub>
 8009dd2:	ec53 2b18 	vmov	r2, r3, d8
 8009dd6:	f7f6 fc0f 	bl	80005f8 <__aeabi_dmul>
 8009dda:	4622      	mov	r2, r4
 8009ddc:	4606      	mov	r6, r0
 8009dde:	460f      	mov	r7, r1
 8009de0:	462b      	mov	r3, r5
 8009de2:	ec51 0b19 	vmov	r0, r1, d9
 8009de6:	f7f6 fc07 	bl	80005f8 <__aeabi_dmul>
 8009dea:	4602      	mov	r2, r0
 8009dec:	460b      	mov	r3, r1
 8009dee:	4630      	mov	r0, r6
 8009df0:	4639      	mov	r1, r7
 8009df2:	f7f6 fa4b 	bl	800028c <__adddf3>
 8009df6:	4606      	mov	r6, r0
 8009df8:	460f      	mov	r7, r1
 8009dfa:	4602      	mov	r2, r0
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4640      	mov	r0, r8
 8009e00:	4649      	mov	r1, r9
 8009e02:	f7f6 fa43 	bl	800028c <__adddf3>
 8009e06:	a33e      	add	r3, pc, #248	; (adr r3, 8009f00 <__ieee754_pow+0x738>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	4604      	mov	r4, r0
 8009e10:	460d      	mov	r5, r1
 8009e12:	f7f6 fbf1 	bl	80005f8 <__aeabi_dmul>
 8009e16:	4642      	mov	r2, r8
 8009e18:	ec41 0b18 	vmov	d8, r0, r1
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	4620      	mov	r0, r4
 8009e20:	4629      	mov	r1, r5
 8009e22:	f7f6 fa31 	bl	8000288 <__aeabi_dsub>
 8009e26:	4602      	mov	r2, r0
 8009e28:	460b      	mov	r3, r1
 8009e2a:	4630      	mov	r0, r6
 8009e2c:	4639      	mov	r1, r7
 8009e2e:	f7f6 fa2b 	bl	8000288 <__aeabi_dsub>
 8009e32:	a335      	add	r3, pc, #212	; (adr r3, 8009f08 <__ieee754_pow+0x740>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	f7f6 fbde 	bl	80005f8 <__aeabi_dmul>
 8009e3c:	a334      	add	r3, pc, #208	; (adr r3, 8009f10 <__ieee754_pow+0x748>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	4606      	mov	r6, r0
 8009e44:	460f      	mov	r7, r1
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7f6 fbd5 	bl	80005f8 <__aeabi_dmul>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	4630      	mov	r0, r6
 8009e54:	4639      	mov	r1, r7
 8009e56:	f7f6 fa19 	bl	800028c <__adddf3>
 8009e5a:	9a07      	ldr	r2, [sp, #28]
 8009e5c:	4b37      	ldr	r3, [pc, #220]	; (8009f3c <__ieee754_pow+0x774>)
 8009e5e:	4413      	add	r3, r2
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 fa12 	bl	800028c <__adddf3>
 8009e68:	4682      	mov	sl, r0
 8009e6a:	9805      	ldr	r0, [sp, #20]
 8009e6c:	468b      	mov	fp, r1
 8009e6e:	f7f6 fb59 	bl	8000524 <__aeabi_i2d>
 8009e72:	9a07      	ldr	r2, [sp, #28]
 8009e74:	4b32      	ldr	r3, [pc, #200]	; (8009f40 <__ieee754_pow+0x778>)
 8009e76:	4413      	add	r3, r2
 8009e78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e7c:	4606      	mov	r6, r0
 8009e7e:	460f      	mov	r7, r1
 8009e80:	4652      	mov	r2, sl
 8009e82:	465b      	mov	r3, fp
 8009e84:	ec51 0b18 	vmov	r0, r1, d8
 8009e88:	f7f6 fa00 	bl	800028c <__adddf3>
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	f7f6 f9fc 	bl	800028c <__adddf3>
 8009e94:	4632      	mov	r2, r6
 8009e96:	463b      	mov	r3, r7
 8009e98:	f7f6 f9f8 	bl	800028c <__adddf3>
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	4632      	mov	r2, r6
 8009ea0:	463b      	mov	r3, r7
 8009ea2:	4604      	mov	r4, r0
 8009ea4:	460d      	mov	r5, r1
 8009ea6:	f7f6 f9ef 	bl	8000288 <__aeabi_dsub>
 8009eaa:	4642      	mov	r2, r8
 8009eac:	464b      	mov	r3, r9
 8009eae:	f7f6 f9eb 	bl	8000288 <__aeabi_dsub>
 8009eb2:	ec53 2b18 	vmov	r2, r3, d8
 8009eb6:	f7f6 f9e7 	bl	8000288 <__aeabi_dsub>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	e610      	b.n	8009ae6 <__ieee754_pow+0x31e>
 8009ec4:	2401      	movs	r4, #1
 8009ec6:	e6a1      	b.n	8009c0c <__ieee754_pow+0x444>
 8009ec8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8009f18 <__ieee754_pow+0x750>
 8009ecc:	e617      	b.n	8009afe <__ieee754_pow+0x336>
 8009ece:	bf00      	nop
 8009ed0:	4a454eef 	.word	0x4a454eef
 8009ed4:	3fca7e28 	.word	0x3fca7e28
 8009ed8:	93c9db65 	.word	0x93c9db65
 8009edc:	3fcd864a 	.word	0x3fcd864a
 8009ee0:	a91d4101 	.word	0xa91d4101
 8009ee4:	3fd17460 	.word	0x3fd17460
 8009ee8:	518f264d 	.word	0x518f264d
 8009eec:	3fd55555 	.word	0x3fd55555
 8009ef0:	db6fabff 	.word	0xdb6fabff
 8009ef4:	3fdb6db6 	.word	0x3fdb6db6
 8009ef8:	33333303 	.word	0x33333303
 8009efc:	3fe33333 	.word	0x3fe33333
 8009f00:	e0000000 	.word	0xe0000000
 8009f04:	3feec709 	.word	0x3feec709
 8009f08:	dc3a03fd 	.word	0xdc3a03fd
 8009f0c:	3feec709 	.word	0x3feec709
 8009f10:	145b01f5 	.word	0x145b01f5
 8009f14:	be3e2fe0 	.word	0xbe3e2fe0
 8009f18:	00000000 	.word	0x00000000
 8009f1c:	3ff00000 	.word	0x3ff00000
 8009f20:	7ff00000 	.word	0x7ff00000
 8009f24:	43400000 	.word	0x43400000
 8009f28:	0003988e 	.word	0x0003988e
 8009f2c:	000bb679 	.word	0x000bb679
 8009f30:	0800d6e0 	.word	0x0800d6e0
 8009f34:	3ff00000 	.word	0x3ff00000
 8009f38:	40080000 	.word	0x40080000
 8009f3c:	0800d700 	.word	0x0800d700
 8009f40:	0800d6f0 	.word	0x0800d6f0
 8009f44:	a3b5      	add	r3, pc, #724	; (adr r3, 800a21c <__ieee754_pow+0xa54>)
 8009f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 f99d 	bl	800028c <__adddf3>
 8009f52:	4622      	mov	r2, r4
 8009f54:	ec41 0b1a 	vmov	d10, r0, r1
 8009f58:	462b      	mov	r3, r5
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4639      	mov	r1, r7
 8009f5e:	f7f6 f993 	bl	8000288 <__aeabi_dsub>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	ec51 0b1a 	vmov	r0, r1, d10
 8009f6a:	f7f6 fdd5 	bl	8000b18 <__aeabi_dcmpgt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f47f ae04 	bne.w	8009b7c <__ieee754_pow+0x3b4>
 8009f74:	4aa4      	ldr	r2, [pc, #656]	; (800a208 <__ieee754_pow+0xa40>)
 8009f76:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	f340 8108 	ble.w	800a190 <__ieee754_pow+0x9c8>
 8009f80:	151b      	asrs	r3, r3, #20
 8009f82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009f86:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009f8a:	fa4a f303 	asr.w	r3, sl, r3
 8009f8e:	445b      	add	r3, fp
 8009f90:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009f94:	4e9d      	ldr	r6, [pc, #628]	; (800a20c <__ieee754_pow+0xa44>)
 8009f96:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009f9a:	4116      	asrs	r6, r2
 8009f9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	ea23 0106 	bic.w	r1, r3, r6
 8009fa6:	f1c2 0214 	rsb	r2, r2, #20
 8009faa:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009fae:	fa4a fa02 	asr.w	sl, sl, r2
 8009fb2:	f1bb 0f00 	cmp.w	fp, #0
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4620      	mov	r0, r4
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	bfb8      	it	lt
 8009fc0:	f1ca 0a00 	rsblt	sl, sl, #0
 8009fc4:	f7f6 f960 	bl	8000288 <__aeabi_dsub>
 8009fc8:	ec41 0b19 	vmov	d9, r0, r1
 8009fcc:	4642      	mov	r2, r8
 8009fce:	464b      	mov	r3, r9
 8009fd0:	ec51 0b19 	vmov	r0, r1, d9
 8009fd4:	f7f6 f95a 	bl	800028c <__adddf3>
 8009fd8:	a37b      	add	r3, pc, #492	; (adr r3, 800a1c8 <__ieee754_pow+0xa00>)
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	2000      	movs	r0, #0
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	f7f6 fb08 	bl	80005f8 <__aeabi_dmul>
 8009fe8:	ec53 2b19 	vmov	r2, r3, d9
 8009fec:	4606      	mov	r6, r0
 8009fee:	460f      	mov	r7, r1
 8009ff0:	4620      	mov	r0, r4
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	f7f6 f948 	bl	8000288 <__aeabi_dsub>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	460b      	mov	r3, r1
 8009ffc:	4640      	mov	r0, r8
 8009ffe:	4649      	mov	r1, r9
 800a000:	f7f6 f942 	bl	8000288 <__aeabi_dsub>
 800a004:	a372      	add	r3, pc, #456	; (adr r3, 800a1d0 <__ieee754_pow+0xa08>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	f7f6 faf5 	bl	80005f8 <__aeabi_dmul>
 800a00e:	a372      	add	r3, pc, #456	; (adr r3, 800a1d8 <__ieee754_pow+0xa10>)
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	4680      	mov	r8, r0
 800a016:	4689      	mov	r9, r1
 800a018:	4620      	mov	r0, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	f7f6 faec 	bl	80005f8 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4640      	mov	r0, r8
 800a026:	4649      	mov	r1, r9
 800a028:	f7f6 f930 	bl	800028c <__adddf3>
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4602      	mov	r2, r0
 800a032:	460b      	mov	r3, r1
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 f928 	bl	800028c <__adddf3>
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	4680      	mov	r8, r0
 800a042:	4689      	mov	r9, r1
 800a044:	f7f6 f920 	bl	8000288 <__aeabi_dsub>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f91a 	bl	8000288 <__aeabi_dsub>
 800a054:	4642      	mov	r2, r8
 800a056:	4606      	mov	r6, r0
 800a058:	460f      	mov	r7, r1
 800a05a:	464b      	mov	r3, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 faca 	bl	80005f8 <__aeabi_dmul>
 800a064:	a35e      	add	r3, pc, #376	; (adr r3, 800a1e0 <__ieee754_pow+0xa18>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	4604      	mov	r4, r0
 800a06c:	460d      	mov	r5, r1
 800a06e:	f7f6 fac3 	bl	80005f8 <__aeabi_dmul>
 800a072:	a35d      	add	r3, pc, #372	; (adr r3, 800a1e8 <__ieee754_pow+0xa20>)
 800a074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a078:	f7f6 f906 	bl	8000288 <__aeabi_dsub>
 800a07c:	4622      	mov	r2, r4
 800a07e:	462b      	mov	r3, r5
 800a080:	f7f6 faba 	bl	80005f8 <__aeabi_dmul>
 800a084:	a35a      	add	r3, pc, #360	; (adr r3, 800a1f0 <__ieee754_pow+0xa28>)
 800a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08a:	f7f6 f8ff 	bl	800028c <__adddf3>
 800a08e:	4622      	mov	r2, r4
 800a090:	462b      	mov	r3, r5
 800a092:	f7f6 fab1 	bl	80005f8 <__aeabi_dmul>
 800a096:	a358      	add	r3, pc, #352	; (adr r3, 800a1f8 <__ieee754_pow+0xa30>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	f7f6 f8f4 	bl	8000288 <__aeabi_dsub>
 800a0a0:	4622      	mov	r2, r4
 800a0a2:	462b      	mov	r3, r5
 800a0a4:	f7f6 faa8 	bl	80005f8 <__aeabi_dmul>
 800a0a8:	a355      	add	r3, pc, #340	; (adr r3, 800a200 <__ieee754_pow+0xa38>)
 800a0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ae:	f7f6 f8ed 	bl	800028c <__adddf3>
 800a0b2:	4622      	mov	r2, r4
 800a0b4:	462b      	mov	r3, r5
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4640      	mov	r0, r8
 800a0c0:	4649      	mov	r1, r9
 800a0c2:	f7f6 f8e1 	bl	8000288 <__aeabi_dsub>
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	4649      	mov	r1, r9
 800a0d2:	f7f6 fa91 	bl	80005f8 <__aeabi_dmul>
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	ec41 0b19 	vmov	d9, r0, r1
 800a0dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	4629      	mov	r1, r5
 800a0e4:	f7f6 f8d0 	bl	8000288 <__aeabi_dsub>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	ec51 0b19 	vmov	r0, r1, d9
 800a0f0:	f7f6 fbac 	bl	800084c <__aeabi_ddiv>
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	463b      	mov	r3, r7
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	4649      	mov	r1, r9
 800a100:	f7f6 fa7a 	bl	80005f8 <__aeabi_dmul>
 800a104:	4632      	mov	r2, r6
 800a106:	463b      	mov	r3, r7
 800a108:	f7f6 f8c0 	bl	800028c <__adddf3>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4620      	mov	r0, r4
 800a112:	4629      	mov	r1, r5
 800a114:	f7f6 f8b8 	bl	8000288 <__aeabi_dsub>
 800a118:	4642      	mov	r2, r8
 800a11a:	464b      	mov	r3, r9
 800a11c:	f7f6 f8b4 	bl	8000288 <__aeabi_dsub>
 800a120:	460b      	mov	r3, r1
 800a122:	4602      	mov	r2, r0
 800a124:	493a      	ldr	r1, [pc, #232]	; (800a210 <__ieee754_pow+0xa48>)
 800a126:	2000      	movs	r0, #0
 800a128:	f7f6 f8ae 	bl	8000288 <__aeabi_dsub>
 800a12c:	ec41 0b10 	vmov	d0, r0, r1
 800a130:	ee10 3a90 	vmov	r3, s1
 800a134:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a13c:	da2b      	bge.n	800a196 <__ieee754_pow+0x9ce>
 800a13e:	4650      	mov	r0, sl
 800a140:	f000 f966 	bl	800a410 <scalbn>
 800a144:	ec51 0b10 	vmov	r0, r1, d0
 800a148:	ec53 2b18 	vmov	r2, r3, d8
 800a14c:	f7ff bbed 	b.w	800992a <__ieee754_pow+0x162>
 800a150:	4b30      	ldr	r3, [pc, #192]	; (800a214 <__ieee754_pow+0xa4c>)
 800a152:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a156:	429e      	cmp	r6, r3
 800a158:	f77f af0c 	ble.w	8009f74 <__ieee754_pow+0x7ac>
 800a15c:	4b2e      	ldr	r3, [pc, #184]	; (800a218 <__ieee754_pow+0xa50>)
 800a15e:	440b      	add	r3, r1
 800a160:	4303      	orrs	r3, r0
 800a162:	d009      	beq.n	800a178 <__ieee754_pow+0x9b0>
 800a164:	ec51 0b18 	vmov	r0, r1, d8
 800a168:	2200      	movs	r2, #0
 800a16a:	2300      	movs	r3, #0
 800a16c:	f7f6 fcb6 	bl	8000adc <__aeabi_dcmplt>
 800a170:	3800      	subs	r0, #0
 800a172:	bf18      	it	ne
 800a174:	2001      	movne	r0, #1
 800a176:	e447      	b.n	8009a08 <__ieee754_pow+0x240>
 800a178:	4622      	mov	r2, r4
 800a17a:	462b      	mov	r3, r5
 800a17c:	f7f6 f884 	bl	8000288 <__aeabi_dsub>
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	f7f6 fcbe 	bl	8000b04 <__aeabi_dcmpge>
 800a188:	2800      	cmp	r0, #0
 800a18a:	f43f aef3 	beq.w	8009f74 <__ieee754_pow+0x7ac>
 800a18e:	e7e9      	b.n	800a164 <__ieee754_pow+0x99c>
 800a190:	f04f 0a00 	mov.w	sl, #0
 800a194:	e71a      	b.n	8009fcc <__ieee754_pow+0x804>
 800a196:	ec51 0b10 	vmov	r0, r1, d0
 800a19a:	4619      	mov	r1, r3
 800a19c:	e7d4      	b.n	800a148 <__ieee754_pow+0x980>
 800a19e:	491c      	ldr	r1, [pc, #112]	; (800a210 <__ieee754_pow+0xa48>)
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	f7ff bb30 	b.w	8009806 <__ieee754_pow+0x3e>
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	f7ff bb2c 	b.w	8009806 <__ieee754_pow+0x3e>
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4639      	mov	r1, r7
 800a1b2:	f7ff bb28 	b.w	8009806 <__ieee754_pow+0x3e>
 800a1b6:	9204      	str	r2, [sp, #16]
 800a1b8:	f7ff bb7a 	b.w	80098b0 <__ieee754_pow+0xe8>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	f7ff bb64 	b.w	800988a <__ieee754_pow+0xc2>
 800a1c2:	bf00      	nop
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	00000000 	.word	0x00000000
 800a1cc:	3fe62e43 	.word	0x3fe62e43
 800a1d0:	fefa39ef 	.word	0xfefa39ef
 800a1d4:	3fe62e42 	.word	0x3fe62e42
 800a1d8:	0ca86c39 	.word	0x0ca86c39
 800a1dc:	be205c61 	.word	0xbe205c61
 800a1e0:	72bea4d0 	.word	0x72bea4d0
 800a1e4:	3e663769 	.word	0x3e663769
 800a1e8:	c5d26bf1 	.word	0xc5d26bf1
 800a1ec:	3ebbbd41 	.word	0x3ebbbd41
 800a1f0:	af25de2c 	.word	0xaf25de2c
 800a1f4:	3f11566a 	.word	0x3f11566a
 800a1f8:	16bebd93 	.word	0x16bebd93
 800a1fc:	3f66c16c 	.word	0x3f66c16c
 800a200:	5555553e 	.word	0x5555553e
 800a204:	3fc55555 	.word	0x3fc55555
 800a208:	3fe00000 	.word	0x3fe00000
 800a20c:	000fffff 	.word	0x000fffff
 800a210:	3ff00000 	.word	0x3ff00000
 800a214:	4090cbff 	.word	0x4090cbff
 800a218:	3f6f3400 	.word	0x3f6f3400
 800a21c:	652b82fe 	.word	0x652b82fe
 800a220:	3c971547 	.word	0x3c971547

0800a224 <__ieee754_sqrt>:
 800a224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a228:	ec55 4b10 	vmov	r4, r5, d0
 800a22c:	4e55      	ldr	r6, [pc, #340]	; (800a384 <__ieee754_sqrt+0x160>)
 800a22e:	43ae      	bics	r6, r5
 800a230:	ee10 0a10 	vmov	r0, s0
 800a234:	ee10 3a10 	vmov	r3, s0
 800a238:	462a      	mov	r2, r5
 800a23a:	4629      	mov	r1, r5
 800a23c:	d110      	bne.n	800a260 <__ieee754_sqrt+0x3c>
 800a23e:	ee10 2a10 	vmov	r2, s0
 800a242:	462b      	mov	r3, r5
 800a244:	f7f6 f9d8 	bl	80005f8 <__aeabi_dmul>
 800a248:	4602      	mov	r2, r0
 800a24a:	460b      	mov	r3, r1
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	f7f6 f81c 	bl	800028c <__adddf3>
 800a254:	4604      	mov	r4, r0
 800a256:	460d      	mov	r5, r1
 800a258:	ec45 4b10 	vmov	d0, r4, r5
 800a25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a260:	2d00      	cmp	r5, #0
 800a262:	dc10      	bgt.n	800a286 <__ieee754_sqrt+0x62>
 800a264:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a268:	4330      	orrs	r0, r6
 800a26a:	d0f5      	beq.n	800a258 <__ieee754_sqrt+0x34>
 800a26c:	b15d      	cbz	r5, 800a286 <__ieee754_sqrt+0x62>
 800a26e:	ee10 2a10 	vmov	r2, s0
 800a272:	462b      	mov	r3, r5
 800a274:	ee10 0a10 	vmov	r0, s0
 800a278:	f7f6 f806 	bl	8000288 <__aeabi_dsub>
 800a27c:	4602      	mov	r2, r0
 800a27e:	460b      	mov	r3, r1
 800a280:	f7f6 fae4 	bl	800084c <__aeabi_ddiv>
 800a284:	e7e6      	b.n	800a254 <__ieee754_sqrt+0x30>
 800a286:	1512      	asrs	r2, r2, #20
 800a288:	d074      	beq.n	800a374 <__ieee754_sqrt+0x150>
 800a28a:	07d4      	lsls	r4, r2, #31
 800a28c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a290:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a298:	bf5e      	ittt	pl
 800a29a:	0fda      	lsrpl	r2, r3, #31
 800a29c:	005b      	lslpl	r3, r3, #1
 800a29e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a2a2:	2400      	movs	r4, #0
 800a2a4:	0fda      	lsrs	r2, r3, #31
 800a2a6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a2aa:	107f      	asrs	r7, r7, #1
 800a2ac:	005b      	lsls	r3, r3, #1
 800a2ae:	2516      	movs	r5, #22
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a2b6:	1886      	adds	r6, r0, r2
 800a2b8:	428e      	cmp	r6, r1
 800a2ba:	bfde      	ittt	le
 800a2bc:	1b89      	suble	r1, r1, r6
 800a2be:	18b0      	addle	r0, r6, r2
 800a2c0:	18a4      	addle	r4, r4, r2
 800a2c2:	0049      	lsls	r1, r1, #1
 800a2c4:	3d01      	subs	r5, #1
 800a2c6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a2ca:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a2ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a2d2:	d1f0      	bne.n	800a2b6 <__ieee754_sqrt+0x92>
 800a2d4:	462a      	mov	r2, r5
 800a2d6:	f04f 0e20 	mov.w	lr, #32
 800a2da:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a2de:	4281      	cmp	r1, r0
 800a2e0:	eb06 0c05 	add.w	ip, r6, r5
 800a2e4:	dc02      	bgt.n	800a2ec <__ieee754_sqrt+0xc8>
 800a2e6:	d113      	bne.n	800a310 <__ieee754_sqrt+0xec>
 800a2e8:	459c      	cmp	ip, r3
 800a2ea:	d811      	bhi.n	800a310 <__ieee754_sqrt+0xec>
 800a2ec:	f1bc 0f00 	cmp.w	ip, #0
 800a2f0:	eb0c 0506 	add.w	r5, ip, r6
 800a2f4:	da43      	bge.n	800a37e <__ieee754_sqrt+0x15a>
 800a2f6:	2d00      	cmp	r5, #0
 800a2f8:	db41      	blt.n	800a37e <__ieee754_sqrt+0x15a>
 800a2fa:	f100 0801 	add.w	r8, r0, #1
 800a2fe:	1a09      	subs	r1, r1, r0
 800a300:	459c      	cmp	ip, r3
 800a302:	bf88      	it	hi
 800a304:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a308:	eba3 030c 	sub.w	r3, r3, ip
 800a30c:	4432      	add	r2, r6
 800a30e:	4640      	mov	r0, r8
 800a310:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a314:	f1be 0e01 	subs.w	lr, lr, #1
 800a318:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a31c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a320:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a324:	d1db      	bne.n	800a2de <__ieee754_sqrt+0xba>
 800a326:	430b      	orrs	r3, r1
 800a328:	d006      	beq.n	800a338 <__ieee754_sqrt+0x114>
 800a32a:	1c50      	adds	r0, r2, #1
 800a32c:	bf13      	iteet	ne
 800a32e:	3201      	addne	r2, #1
 800a330:	3401      	addeq	r4, #1
 800a332:	4672      	moveq	r2, lr
 800a334:	f022 0201 	bicne.w	r2, r2, #1
 800a338:	1063      	asrs	r3, r4, #1
 800a33a:	0852      	lsrs	r2, r2, #1
 800a33c:	07e1      	lsls	r1, r4, #31
 800a33e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a342:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a346:	bf48      	it	mi
 800a348:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a34c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a350:	4614      	mov	r4, r2
 800a352:	e781      	b.n	800a258 <__ieee754_sqrt+0x34>
 800a354:	0ad9      	lsrs	r1, r3, #11
 800a356:	3815      	subs	r0, #21
 800a358:	055b      	lsls	r3, r3, #21
 800a35a:	2900      	cmp	r1, #0
 800a35c:	d0fa      	beq.n	800a354 <__ieee754_sqrt+0x130>
 800a35e:	02cd      	lsls	r5, r1, #11
 800a360:	d50a      	bpl.n	800a378 <__ieee754_sqrt+0x154>
 800a362:	f1c2 0420 	rsb	r4, r2, #32
 800a366:	fa23 f404 	lsr.w	r4, r3, r4
 800a36a:	1e55      	subs	r5, r2, #1
 800a36c:	4093      	lsls	r3, r2
 800a36e:	4321      	orrs	r1, r4
 800a370:	1b42      	subs	r2, r0, r5
 800a372:	e78a      	b.n	800a28a <__ieee754_sqrt+0x66>
 800a374:	4610      	mov	r0, r2
 800a376:	e7f0      	b.n	800a35a <__ieee754_sqrt+0x136>
 800a378:	0049      	lsls	r1, r1, #1
 800a37a:	3201      	adds	r2, #1
 800a37c:	e7ef      	b.n	800a35e <__ieee754_sqrt+0x13a>
 800a37e:	4680      	mov	r8, r0
 800a380:	e7bd      	b.n	800a2fe <__ieee754_sqrt+0xda>
 800a382:	bf00      	nop
 800a384:	7ff00000 	.word	0x7ff00000

0800a388 <with_errno>:
 800a388:	b570      	push	{r4, r5, r6, lr}
 800a38a:	4604      	mov	r4, r0
 800a38c:	460d      	mov	r5, r1
 800a38e:	4616      	mov	r6, r2
 800a390:	f000 f8cc 	bl	800a52c <__errno>
 800a394:	4629      	mov	r1, r5
 800a396:	6006      	str	r6, [r0, #0]
 800a398:	4620      	mov	r0, r4
 800a39a:	bd70      	pop	{r4, r5, r6, pc}

0800a39c <xflow>:
 800a39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a39e:	4614      	mov	r4, r2
 800a3a0:	461d      	mov	r5, r3
 800a3a2:	b108      	cbz	r0, 800a3a8 <xflow+0xc>
 800a3a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a3a8:	e9cd 2300 	strd	r2, r3, [sp]
 800a3ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	f7f6 f920 	bl	80005f8 <__aeabi_dmul>
 800a3b8:	2222      	movs	r2, #34	; 0x22
 800a3ba:	b003      	add	sp, #12
 800a3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3c0:	f7ff bfe2 	b.w	800a388 <with_errno>

0800a3c4 <__math_uflow>:
 800a3c4:	b508      	push	{r3, lr}
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3cc:	f7ff ffe6 	bl	800a39c <xflow>
 800a3d0:	ec41 0b10 	vmov	d0, r0, r1
 800a3d4:	bd08      	pop	{r3, pc}

0800a3d6 <__math_oflow>:
 800a3d6:	b508      	push	{r3, lr}
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a3de:	f7ff ffdd 	bl	800a39c <xflow>
 800a3e2:	ec41 0b10 	vmov	d0, r0, r1
 800a3e6:	bd08      	pop	{r3, pc}

0800a3e8 <fabs>:
 800a3e8:	ec51 0b10 	vmov	r0, r1, d0
 800a3ec:	ee10 2a10 	vmov	r2, s0
 800a3f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3f4:	ec43 2b10 	vmov	d0, r2, r3
 800a3f8:	4770      	bx	lr

0800a3fa <finite>:
 800a3fa:	b082      	sub	sp, #8
 800a3fc:	ed8d 0b00 	vstr	d0, [sp]
 800a400:	9801      	ldr	r0, [sp, #4]
 800a402:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a406:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a40a:	0fc0      	lsrs	r0, r0, #31
 800a40c:	b002      	add	sp, #8
 800a40e:	4770      	bx	lr

0800a410 <scalbn>:
 800a410:	b570      	push	{r4, r5, r6, lr}
 800a412:	ec55 4b10 	vmov	r4, r5, d0
 800a416:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a41a:	4606      	mov	r6, r0
 800a41c:	462b      	mov	r3, r5
 800a41e:	b99a      	cbnz	r2, 800a448 <scalbn+0x38>
 800a420:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a424:	4323      	orrs	r3, r4
 800a426:	d036      	beq.n	800a496 <scalbn+0x86>
 800a428:	4b39      	ldr	r3, [pc, #228]	; (800a510 <scalbn+0x100>)
 800a42a:	4629      	mov	r1, r5
 800a42c:	ee10 0a10 	vmov	r0, s0
 800a430:	2200      	movs	r2, #0
 800a432:	f7f6 f8e1 	bl	80005f8 <__aeabi_dmul>
 800a436:	4b37      	ldr	r3, [pc, #220]	; (800a514 <scalbn+0x104>)
 800a438:	429e      	cmp	r6, r3
 800a43a:	4604      	mov	r4, r0
 800a43c:	460d      	mov	r5, r1
 800a43e:	da10      	bge.n	800a462 <scalbn+0x52>
 800a440:	a32b      	add	r3, pc, #172	; (adr r3, 800a4f0 <scalbn+0xe0>)
 800a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a446:	e03a      	b.n	800a4be <scalbn+0xae>
 800a448:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a44c:	428a      	cmp	r2, r1
 800a44e:	d10c      	bne.n	800a46a <scalbn+0x5a>
 800a450:	ee10 2a10 	vmov	r2, s0
 800a454:	4620      	mov	r0, r4
 800a456:	4629      	mov	r1, r5
 800a458:	f7f5 ff18 	bl	800028c <__adddf3>
 800a45c:	4604      	mov	r4, r0
 800a45e:	460d      	mov	r5, r1
 800a460:	e019      	b.n	800a496 <scalbn+0x86>
 800a462:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a466:	460b      	mov	r3, r1
 800a468:	3a36      	subs	r2, #54	; 0x36
 800a46a:	4432      	add	r2, r6
 800a46c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a470:	428a      	cmp	r2, r1
 800a472:	dd08      	ble.n	800a486 <scalbn+0x76>
 800a474:	2d00      	cmp	r5, #0
 800a476:	a120      	add	r1, pc, #128	; (adr r1, 800a4f8 <scalbn+0xe8>)
 800a478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a47c:	da1c      	bge.n	800a4b8 <scalbn+0xa8>
 800a47e:	a120      	add	r1, pc, #128	; (adr r1, 800a500 <scalbn+0xf0>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	e018      	b.n	800a4b8 <scalbn+0xa8>
 800a486:	2a00      	cmp	r2, #0
 800a488:	dd08      	ble.n	800a49c <scalbn+0x8c>
 800a48a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a48e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a492:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a496:	ec45 4b10 	vmov	d0, r4, r5
 800a49a:	bd70      	pop	{r4, r5, r6, pc}
 800a49c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a4a0:	da19      	bge.n	800a4d6 <scalbn+0xc6>
 800a4a2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a4a6:	429e      	cmp	r6, r3
 800a4a8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a4ac:	dd0a      	ble.n	800a4c4 <scalbn+0xb4>
 800a4ae:	a112      	add	r1, pc, #72	; (adr r1, 800a4f8 <scalbn+0xe8>)
 800a4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d1e2      	bne.n	800a47e <scalbn+0x6e>
 800a4b8:	a30f      	add	r3, pc, #60	; (adr r3, 800a4f8 <scalbn+0xe8>)
 800a4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4be:	f7f6 f89b 	bl	80005f8 <__aeabi_dmul>
 800a4c2:	e7cb      	b.n	800a45c <scalbn+0x4c>
 800a4c4:	a10a      	add	r1, pc, #40	; (adr r1, 800a4f0 <scalbn+0xe0>)
 800a4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0b8      	beq.n	800a440 <scalbn+0x30>
 800a4ce:	a10e      	add	r1, pc, #56	; (adr r1, 800a508 <scalbn+0xf8>)
 800a4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d4:	e7b4      	b.n	800a440 <scalbn+0x30>
 800a4d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4da:	3236      	adds	r2, #54	; 0x36
 800a4dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4e0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <scalbn+0x108>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	e7e8      	b.n	800a4be <scalbn+0xae>
 800a4ec:	f3af 8000 	nop.w
 800a4f0:	c2f8f359 	.word	0xc2f8f359
 800a4f4:	01a56e1f 	.word	0x01a56e1f
 800a4f8:	8800759c 	.word	0x8800759c
 800a4fc:	7e37e43c 	.word	0x7e37e43c
 800a500:	8800759c 	.word	0x8800759c
 800a504:	fe37e43c 	.word	0xfe37e43c
 800a508:	c2f8f359 	.word	0xc2f8f359
 800a50c:	81a56e1f 	.word	0x81a56e1f
 800a510:	43500000 	.word	0x43500000
 800a514:	ffff3cb0 	.word	0xffff3cb0
 800a518:	3c900000 	.word	0x3c900000

0800a51c <abort>:
 800a51c:	b508      	push	{r3, lr}
 800a51e:	2006      	movs	r0, #6
 800a520:	f000 fcde 	bl	800aee0 <raise>
 800a524:	2001      	movs	r0, #1
 800a526:	f7fa fa81 	bl	8004a2c <_exit>
	...

0800a52c <__errno>:
 800a52c:	4b01      	ldr	r3, [pc, #4]	; (800a534 <__errno+0x8>)
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20000010 	.word	0x20000010

0800a538 <__libc_init_array>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	4d0d      	ldr	r5, [pc, #52]	; (800a570 <__libc_init_array+0x38>)
 800a53c:	4c0d      	ldr	r4, [pc, #52]	; (800a574 <__libc_init_array+0x3c>)
 800a53e:	1b64      	subs	r4, r4, r5
 800a540:	10a4      	asrs	r4, r4, #2
 800a542:	2600      	movs	r6, #0
 800a544:	42a6      	cmp	r6, r4
 800a546:	d109      	bne.n	800a55c <__libc_init_array+0x24>
 800a548:	4d0b      	ldr	r5, [pc, #44]	; (800a578 <__libc_init_array+0x40>)
 800a54a:	4c0c      	ldr	r4, [pc, #48]	; (800a57c <__libc_init_array+0x44>)
 800a54c:	f002 ff02 	bl	800d354 <_init>
 800a550:	1b64      	subs	r4, r4, r5
 800a552:	10a4      	asrs	r4, r4, #2
 800a554:	2600      	movs	r6, #0
 800a556:	42a6      	cmp	r6, r4
 800a558:	d105      	bne.n	800a566 <__libc_init_array+0x2e>
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a560:	4798      	blx	r3
 800a562:	3601      	adds	r6, #1
 800a564:	e7ee      	b.n	800a544 <__libc_init_array+0xc>
 800a566:	f855 3b04 	ldr.w	r3, [r5], #4
 800a56a:	4798      	blx	r3
 800a56c:	3601      	adds	r6, #1
 800a56e:	e7f2      	b.n	800a556 <__libc_init_array+0x1e>
 800a570:	0800daf4 	.word	0x0800daf4
 800a574:	0800daf4 	.word	0x0800daf4
 800a578:	0800daf4 	.word	0x0800daf4
 800a57c:	0800dafc 	.word	0x0800dafc

0800a580 <memcpy>:
 800a580:	440a      	add	r2, r1
 800a582:	4291      	cmp	r1, r2
 800a584:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a588:	d100      	bne.n	800a58c <memcpy+0xc>
 800a58a:	4770      	bx	lr
 800a58c:	b510      	push	{r4, lr}
 800a58e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a592:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a596:	4291      	cmp	r1, r2
 800a598:	d1f9      	bne.n	800a58e <memcpy+0xe>
 800a59a:	bd10      	pop	{r4, pc}

0800a59c <memset>:
 800a59c:	4402      	add	r2, r0
 800a59e:	4603      	mov	r3, r0
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d100      	bne.n	800a5a6 <memset+0xa>
 800a5a4:	4770      	bx	lr
 800a5a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5aa:	e7f9      	b.n	800a5a0 <memset+0x4>

0800a5ac <__cvt>:
 800a5ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	ec55 4b10 	vmov	r4, r5, d0
 800a5b4:	2d00      	cmp	r5, #0
 800a5b6:	460e      	mov	r6, r1
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	462b      	mov	r3, r5
 800a5bc:	bfbb      	ittet	lt
 800a5be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a5c2:	461d      	movlt	r5, r3
 800a5c4:	2300      	movge	r3, #0
 800a5c6:	232d      	movlt	r3, #45	; 0x2d
 800a5c8:	700b      	strb	r3, [r1, #0]
 800a5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a5d0:	4691      	mov	r9, r2
 800a5d2:	f023 0820 	bic.w	r8, r3, #32
 800a5d6:	bfbc      	itt	lt
 800a5d8:	4622      	movlt	r2, r4
 800a5da:	4614      	movlt	r4, r2
 800a5dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a5e0:	d005      	beq.n	800a5ee <__cvt+0x42>
 800a5e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a5e6:	d100      	bne.n	800a5ea <__cvt+0x3e>
 800a5e8:	3601      	adds	r6, #1
 800a5ea:	2102      	movs	r1, #2
 800a5ec:	e000      	b.n	800a5f0 <__cvt+0x44>
 800a5ee:	2103      	movs	r1, #3
 800a5f0:	ab03      	add	r3, sp, #12
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	ab02      	add	r3, sp, #8
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	ec45 4b10 	vmov	d0, r4, r5
 800a5fc:	4653      	mov	r3, sl
 800a5fe:	4632      	mov	r2, r6
 800a600:	f000 fd36 	bl	800b070 <_dtoa_r>
 800a604:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a608:	4607      	mov	r7, r0
 800a60a:	d102      	bne.n	800a612 <__cvt+0x66>
 800a60c:	f019 0f01 	tst.w	r9, #1
 800a610:	d022      	beq.n	800a658 <__cvt+0xac>
 800a612:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a616:	eb07 0906 	add.w	r9, r7, r6
 800a61a:	d110      	bne.n	800a63e <__cvt+0x92>
 800a61c:	783b      	ldrb	r3, [r7, #0]
 800a61e:	2b30      	cmp	r3, #48	; 0x30
 800a620:	d10a      	bne.n	800a638 <__cvt+0x8c>
 800a622:	2200      	movs	r2, #0
 800a624:	2300      	movs	r3, #0
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f6 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a62e:	b918      	cbnz	r0, 800a638 <__cvt+0x8c>
 800a630:	f1c6 0601 	rsb	r6, r6, #1
 800a634:	f8ca 6000 	str.w	r6, [sl]
 800a638:	f8da 3000 	ldr.w	r3, [sl]
 800a63c:	4499      	add	r9, r3
 800a63e:	2200      	movs	r2, #0
 800a640:	2300      	movs	r3, #0
 800a642:	4620      	mov	r0, r4
 800a644:	4629      	mov	r1, r5
 800a646:	f7f6 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a64a:	b108      	cbz	r0, 800a650 <__cvt+0xa4>
 800a64c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a650:	2230      	movs	r2, #48	; 0x30
 800a652:	9b03      	ldr	r3, [sp, #12]
 800a654:	454b      	cmp	r3, r9
 800a656:	d307      	bcc.n	800a668 <__cvt+0xbc>
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a65c:	1bdb      	subs	r3, r3, r7
 800a65e:	4638      	mov	r0, r7
 800a660:	6013      	str	r3, [r2, #0]
 800a662:	b004      	add	sp, #16
 800a664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a668:	1c59      	adds	r1, r3, #1
 800a66a:	9103      	str	r1, [sp, #12]
 800a66c:	701a      	strb	r2, [r3, #0]
 800a66e:	e7f0      	b.n	800a652 <__cvt+0xa6>

0800a670 <__exponent>:
 800a670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a672:	4603      	mov	r3, r0
 800a674:	2900      	cmp	r1, #0
 800a676:	bfb8      	it	lt
 800a678:	4249      	neglt	r1, r1
 800a67a:	f803 2b02 	strb.w	r2, [r3], #2
 800a67e:	bfb4      	ite	lt
 800a680:	222d      	movlt	r2, #45	; 0x2d
 800a682:	222b      	movge	r2, #43	; 0x2b
 800a684:	2909      	cmp	r1, #9
 800a686:	7042      	strb	r2, [r0, #1]
 800a688:	dd2a      	ble.n	800a6e0 <__exponent+0x70>
 800a68a:	f10d 0407 	add.w	r4, sp, #7
 800a68e:	46a4      	mov	ip, r4
 800a690:	270a      	movs	r7, #10
 800a692:	46a6      	mov	lr, r4
 800a694:	460a      	mov	r2, r1
 800a696:	fb91 f6f7 	sdiv	r6, r1, r7
 800a69a:	fb07 1516 	mls	r5, r7, r6, r1
 800a69e:	3530      	adds	r5, #48	; 0x30
 800a6a0:	2a63      	cmp	r2, #99	; 0x63
 800a6a2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800a6a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a6aa:	4631      	mov	r1, r6
 800a6ac:	dcf1      	bgt.n	800a692 <__exponent+0x22>
 800a6ae:	3130      	adds	r1, #48	; 0x30
 800a6b0:	f1ae 0502 	sub.w	r5, lr, #2
 800a6b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a6b8:	1c44      	adds	r4, r0, #1
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	4561      	cmp	r1, ip
 800a6be:	d30a      	bcc.n	800a6d6 <__exponent+0x66>
 800a6c0:	f10d 0209 	add.w	r2, sp, #9
 800a6c4:	eba2 020e 	sub.w	r2, r2, lr
 800a6c8:	4565      	cmp	r5, ip
 800a6ca:	bf88      	it	hi
 800a6cc:	2200      	movhi	r2, #0
 800a6ce:	4413      	add	r3, r2
 800a6d0:	1a18      	subs	r0, r3, r0
 800a6d2:	b003      	add	sp, #12
 800a6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6da:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a6de:	e7ed      	b.n	800a6bc <__exponent+0x4c>
 800a6e0:	2330      	movs	r3, #48	; 0x30
 800a6e2:	3130      	adds	r1, #48	; 0x30
 800a6e4:	7083      	strb	r3, [r0, #2]
 800a6e6:	70c1      	strb	r1, [r0, #3]
 800a6e8:	1d03      	adds	r3, r0, #4
 800a6ea:	e7f1      	b.n	800a6d0 <__exponent+0x60>

0800a6ec <_printf_float>:
 800a6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f0:	ed2d 8b02 	vpush	{d8}
 800a6f4:	b08d      	sub	sp, #52	; 0x34
 800a6f6:	460c      	mov	r4, r1
 800a6f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a6fc:	4616      	mov	r6, r2
 800a6fe:	461f      	mov	r7, r3
 800a700:	4605      	mov	r5, r0
 800a702:	f001 faa3 	bl	800bc4c <_localeconv_r>
 800a706:	f8d0 a000 	ldr.w	sl, [r0]
 800a70a:	4650      	mov	r0, sl
 800a70c:	f7f5 fd60 	bl	80001d0 <strlen>
 800a710:	2300      	movs	r3, #0
 800a712:	930a      	str	r3, [sp, #40]	; 0x28
 800a714:	6823      	ldr	r3, [r4, #0]
 800a716:	9305      	str	r3, [sp, #20]
 800a718:	f8d8 3000 	ldr.w	r3, [r8]
 800a71c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a720:	3307      	adds	r3, #7
 800a722:	f023 0307 	bic.w	r3, r3, #7
 800a726:	f103 0208 	add.w	r2, r3, #8
 800a72a:	f8c8 2000 	str.w	r2, [r8]
 800a72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a732:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a736:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a73a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a73e:	9307      	str	r3, [sp, #28]
 800a740:	f8cd 8018 	str.w	r8, [sp, #24]
 800a744:	ee08 0a10 	vmov	s16, r0
 800a748:	4b9f      	ldr	r3, [pc, #636]	; (800a9c8 <_printf_float+0x2dc>)
 800a74a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a74e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a752:	f7f6 f9eb 	bl	8000b2c <__aeabi_dcmpun>
 800a756:	bb88      	cbnz	r0, 800a7bc <_printf_float+0xd0>
 800a758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a75c:	4b9a      	ldr	r3, [pc, #616]	; (800a9c8 <_printf_float+0x2dc>)
 800a75e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a762:	f7f6 f9c5 	bl	8000af0 <__aeabi_dcmple>
 800a766:	bb48      	cbnz	r0, 800a7bc <_printf_float+0xd0>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4640      	mov	r0, r8
 800a76e:	4649      	mov	r1, r9
 800a770:	f7f6 f9b4 	bl	8000adc <__aeabi_dcmplt>
 800a774:	b110      	cbz	r0, 800a77c <_printf_float+0x90>
 800a776:	232d      	movs	r3, #45	; 0x2d
 800a778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a77c:	4b93      	ldr	r3, [pc, #588]	; (800a9cc <_printf_float+0x2e0>)
 800a77e:	4894      	ldr	r0, [pc, #592]	; (800a9d0 <_printf_float+0x2e4>)
 800a780:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a784:	bf94      	ite	ls
 800a786:	4698      	movls	r8, r3
 800a788:	4680      	movhi	r8, r0
 800a78a:	2303      	movs	r3, #3
 800a78c:	6123      	str	r3, [r4, #16]
 800a78e:	9b05      	ldr	r3, [sp, #20]
 800a790:	f023 0204 	bic.w	r2, r3, #4
 800a794:	6022      	str	r2, [r4, #0]
 800a796:	f04f 0900 	mov.w	r9, #0
 800a79a:	9700      	str	r7, [sp, #0]
 800a79c:	4633      	mov	r3, r6
 800a79e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a7a0:	4621      	mov	r1, r4
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	f000 f9d8 	bl	800ab58 <_printf_common>
 800a7a8:	3001      	adds	r0, #1
 800a7aa:	f040 8090 	bne.w	800a8ce <_printf_float+0x1e2>
 800a7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7b2:	b00d      	add	sp, #52	; 0x34
 800a7b4:	ecbd 8b02 	vpop	{d8}
 800a7b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7bc:	4642      	mov	r2, r8
 800a7be:	464b      	mov	r3, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	f7f6 f9b2 	bl	8000b2c <__aeabi_dcmpun>
 800a7c8:	b140      	cbz	r0, 800a7dc <_printf_float+0xf0>
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bfbc      	itt	lt
 800a7d0:	232d      	movlt	r3, #45	; 0x2d
 800a7d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a7d6:	487f      	ldr	r0, [pc, #508]	; (800a9d4 <_printf_float+0x2e8>)
 800a7d8:	4b7f      	ldr	r3, [pc, #508]	; (800a9d8 <_printf_float+0x2ec>)
 800a7da:	e7d1      	b.n	800a780 <_printf_float+0x94>
 800a7dc:	6863      	ldr	r3, [r4, #4]
 800a7de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a7e2:	9206      	str	r2, [sp, #24]
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	d13f      	bne.n	800a868 <_printf_float+0x17c>
 800a7e8:	2306      	movs	r3, #6
 800a7ea:	6063      	str	r3, [r4, #4]
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	6861      	ldr	r1, [r4, #4]
 800a7f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9303      	str	r3, [sp, #12]
 800a7f8:	ab0a      	add	r3, sp, #40	; 0x28
 800a7fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a7fe:	ab09      	add	r3, sp, #36	; 0x24
 800a800:	ec49 8b10 	vmov	d0, r8, r9
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a80c:	4628      	mov	r0, r5
 800a80e:	f7ff fecd 	bl	800a5ac <__cvt>
 800a812:	9b06      	ldr	r3, [sp, #24]
 800a814:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a816:	2b47      	cmp	r3, #71	; 0x47
 800a818:	4680      	mov	r8, r0
 800a81a:	d108      	bne.n	800a82e <_printf_float+0x142>
 800a81c:	1cc8      	adds	r0, r1, #3
 800a81e:	db02      	blt.n	800a826 <_printf_float+0x13a>
 800a820:	6863      	ldr	r3, [r4, #4]
 800a822:	4299      	cmp	r1, r3
 800a824:	dd41      	ble.n	800a8aa <_printf_float+0x1be>
 800a826:	f1ab 0b02 	sub.w	fp, fp, #2
 800a82a:	fa5f fb8b 	uxtb.w	fp, fp
 800a82e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a832:	d820      	bhi.n	800a876 <_printf_float+0x18a>
 800a834:	3901      	subs	r1, #1
 800a836:	465a      	mov	r2, fp
 800a838:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a83c:	9109      	str	r1, [sp, #36]	; 0x24
 800a83e:	f7ff ff17 	bl	800a670 <__exponent>
 800a842:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a844:	1813      	adds	r3, r2, r0
 800a846:	2a01      	cmp	r2, #1
 800a848:	4681      	mov	r9, r0
 800a84a:	6123      	str	r3, [r4, #16]
 800a84c:	dc02      	bgt.n	800a854 <_printf_float+0x168>
 800a84e:	6822      	ldr	r2, [r4, #0]
 800a850:	07d2      	lsls	r2, r2, #31
 800a852:	d501      	bpl.n	800a858 <_printf_float+0x16c>
 800a854:	3301      	adds	r3, #1
 800a856:	6123      	str	r3, [r4, #16]
 800a858:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d09c      	beq.n	800a79a <_printf_float+0xae>
 800a860:	232d      	movs	r3, #45	; 0x2d
 800a862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a866:	e798      	b.n	800a79a <_printf_float+0xae>
 800a868:	9a06      	ldr	r2, [sp, #24]
 800a86a:	2a47      	cmp	r2, #71	; 0x47
 800a86c:	d1be      	bne.n	800a7ec <_printf_float+0x100>
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1bc      	bne.n	800a7ec <_printf_float+0x100>
 800a872:	2301      	movs	r3, #1
 800a874:	e7b9      	b.n	800a7ea <_printf_float+0xfe>
 800a876:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a87a:	d118      	bne.n	800a8ae <_printf_float+0x1c2>
 800a87c:	2900      	cmp	r1, #0
 800a87e:	6863      	ldr	r3, [r4, #4]
 800a880:	dd0b      	ble.n	800a89a <_printf_float+0x1ae>
 800a882:	6121      	str	r1, [r4, #16]
 800a884:	b913      	cbnz	r3, 800a88c <_printf_float+0x1a0>
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	07d0      	lsls	r0, r2, #31
 800a88a:	d502      	bpl.n	800a892 <_printf_float+0x1a6>
 800a88c:	3301      	adds	r3, #1
 800a88e:	440b      	add	r3, r1
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	65a1      	str	r1, [r4, #88]	; 0x58
 800a894:	f04f 0900 	mov.w	r9, #0
 800a898:	e7de      	b.n	800a858 <_printf_float+0x16c>
 800a89a:	b913      	cbnz	r3, 800a8a2 <_printf_float+0x1b6>
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	07d2      	lsls	r2, r2, #31
 800a8a0:	d501      	bpl.n	800a8a6 <_printf_float+0x1ba>
 800a8a2:	3302      	adds	r3, #2
 800a8a4:	e7f4      	b.n	800a890 <_printf_float+0x1a4>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e7f2      	b.n	800a890 <_printf_float+0x1a4>
 800a8aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8b0:	4299      	cmp	r1, r3
 800a8b2:	db05      	blt.n	800a8c0 <_printf_float+0x1d4>
 800a8b4:	6823      	ldr	r3, [r4, #0]
 800a8b6:	6121      	str	r1, [r4, #16]
 800a8b8:	07d8      	lsls	r0, r3, #31
 800a8ba:	d5ea      	bpl.n	800a892 <_printf_float+0x1a6>
 800a8bc:	1c4b      	adds	r3, r1, #1
 800a8be:	e7e7      	b.n	800a890 <_printf_float+0x1a4>
 800a8c0:	2900      	cmp	r1, #0
 800a8c2:	bfd4      	ite	le
 800a8c4:	f1c1 0202 	rsble	r2, r1, #2
 800a8c8:	2201      	movgt	r2, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	e7e0      	b.n	800a890 <_printf_float+0x1a4>
 800a8ce:	6823      	ldr	r3, [r4, #0]
 800a8d0:	055a      	lsls	r2, r3, #21
 800a8d2:	d407      	bmi.n	800a8e4 <_printf_float+0x1f8>
 800a8d4:	6923      	ldr	r3, [r4, #16]
 800a8d6:	4642      	mov	r2, r8
 800a8d8:	4631      	mov	r1, r6
 800a8da:	4628      	mov	r0, r5
 800a8dc:	47b8      	blx	r7
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d12c      	bne.n	800a93c <_printf_float+0x250>
 800a8e2:	e764      	b.n	800a7ae <_printf_float+0xc2>
 800a8e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a8e8:	f240 80e0 	bls.w	800aaac <_printf_float+0x3c0>
 800a8ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	f7f6 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f8:	2800      	cmp	r0, #0
 800a8fa:	d034      	beq.n	800a966 <_printf_float+0x27a>
 800a8fc:	4a37      	ldr	r2, [pc, #220]	; (800a9dc <_printf_float+0x2f0>)
 800a8fe:	2301      	movs	r3, #1
 800a900:	4631      	mov	r1, r6
 800a902:	4628      	mov	r0, r5
 800a904:	47b8      	blx	r7
 800a906:	3001      	adds	r0, #1
 800a908:	f43f af51 	beq.w	800a7ae <_printf_float+0xc2>
 800a90c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a910:	429a      	cmp	r2, r3
 800a912:	db02      	blt.n	800a91a <_printf_float+0x22e>
 800a914:	6823      	ldr	r3, [r4, #0]
 800a916:	07d8      	lsls	r0, r3, #31
 800a918:	d510      	bpl.n	800a93c <_printf_float+0x250>
 800a91a:	ee18 3a10 	vmov	r3, s16
 800a91e:	4652      	mov	r2, sl
 800a920:	4631      	mov	r1, r6
 800a922:	4628      	mov	r0, r5
 800a924:	47b8      	blx	r7
 800a926:	3001      	adds	r0, #1
 800a928:	f43f af41 	beq.w	800a7ae <_printf_float+0xc2>
 800a92c:	f04f 0800 	mov.w	r8, #0
 800a930:	f104 091a 	add.w	r9, r4, #26
 800a934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a936:	3b01      	subs	r3, #1
 800a938:	4543      	cmp	r3, r8
 800a93a:	dc09      	bgt.n	800a950 <_printf_float+0x264>
 800a93c:	6823      	ldr	r3, [r4, #0]
 800a93e:	079b      	lsls	r3, r3, #30
 800a940:	f100 8105 	bmi.w	800ab4e <_printf_float+0x462>
 800a944:	68e0      	ldr	r0, [r4, #12]
 800a946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a948:	4298      	cmp	r0, r3
 800a94a:	bfb8      	it	lt
 800a94c:	4618      	movlt	r0, r3
 800a94e:	e730      	b.n	800a7b2 <_printf_float+0xc6>
 800a950:	2301      	movs	r3, #1
 800a952:	464a      	mov	r2, r9
 800a954:	4631      	mov	r1, r6
 800a956:	4628      	mov	r0, r5
 800a958:	47b8      	blx	r7
 800a95a:	3001      	adds	r0, #1
 800a95c:	f43f af27 	beq.w	800a7ae <_printf_float+0xc2>
 800a960:	f108 0801 	add.w	r8, r8, #1
 800a964:	e7e6      	b.n	800a934 <_printf_float+0x248>
 800a966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a968:	2b00      	cmp	r3, #0
 800a96a:	dc39      	bgt.n	800a9e0 <_printf_float+0x2f4>
 800a96c:	4a1b      	ldr	r2, [pc, #108]	; (800a9dc <_printf_float+0x2f0>)
 800a96e:	2301      	movs	r3, #1
 800a970:	4631      	mov	r1, r6
 800a972:	4628      	mov	r0, r5
 800a974:	47b8      	blx	r7
 800a976:	3001      	adds	r0, #1
 800a978:	f43f af19 	beq.w	800a7ae <_printf_float+0xc2>
 800a97c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a980:	4313      	orrs	r3, r2
 800a982:	d102      	bne.n	800a98a <_printf_float+0x29e>
 800a984:	6823      	ldr	r3, [r4, #0]
 800a986:	07d9      	lsls	r1, r3, #31
 800a988:	d5d8      	bpl.n	800a93c <_printf_float+0x250>
 800a98a:	ee18 3a10 	vmov	r3, s16
 800a98e:	4652      	mov	r2, sl
 800a990:	4631      	mov	r1, r6
 800a992:	4628      	mov	r0, r5
 800a994:	47b8      	blx	r7
 800a996:	3001      	adds	r0, #1
 800a998:	f43f af09 	beq.w	800a7ae <_printf_float+0xc2>
 800a99c:	f04f 0900 	mov.w	r9, #0
 800a9a0:	f104 0a1a 	add.w	sl, r4, #26
 800a9a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a6:	425b      	negs	r3, r3
 800a9a8:	454b      	cmp	r3, r9
 800a9aa:	dc01      	bgt.n	800a9b0 <_printf_float+0x2c4>
 800a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ae:	e792      	b.n	800a8d6 <_printf_float+0x1ea>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4652      	mov	r2, sl
 800a9b4:	4631      	mov	r1, r6
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	f43f aef7 	beq.w	800a7ae <_printf_float+0xc2>
 800a9c0:	f109 0901 	add.w	r9, r9, #1
 800a9c4:	e7ee      	b.n	800a9a4 <_printf_float+0x2b8>
 800a9c6:	bf00      	nop
 800a9c8:	7fefffff 	.word	0x7fefffff
 800a9cc:	0800d714 	.word	0x0800d714
 800a9d0:	0800d718 	.word	0x0800d718
 800a9d4:	0800d720 	.word	0x0800d720
 800a9d8:	0800d71c 	.word	0x0800d71c
 800a9dc:	0800d724 	.word	0x0800d724
 800a9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	bfa8      	it	ge
 800a9e8:	461a      	movge	r2, r3
 800a9ea:	2a00      	cmp	r2, #0
 800a9ec:	4691      	mov	r9, r2
 800a9ee:	dc37      	bgt.n	800aa60 <_printf_float+0x374>
 800a9f0:	f04f 0b00 	mov.w	fp, #0
 800a9f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a9f8:	f104 021a 	add.w	r2, r4, #26
 800a9fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9fe:	9305      	str	r3, [sp, #20]
 800aa00:	eba3 0309 	sub.w	r3, r3, r9
 800aa04:	455b      	cmp	r3, fp
 800aa06:	dc33      	bgt.n	800aa70 <_printf_float+0x384>
 800aa08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa0c:	429a      	cmp	r2, r3
 800aa0e:	db3b      	blt.n	800aa88 <_printf_float+0x39c>
 800aa10:	6823      	ldr	r3, [r4, #0]
 800aa12:	07da      	lsls	r2, r3, #31
 800aa14:	d438      	bmi.n	800aa88 <_printf_float+0x39c>
 800aa16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa18:	9a05      	ldr	r2, [sp, #20]
 800aa1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa1c:	1a9a      	subs	r2, r3, r2
 800aa1e:	eba3 0901 	sub.w	r9, r3, r1
 800aa22:	4591      	cmp	r9, r2
 800aa24:	bfa8      	it	ge
 800aa26:	4691      	movge	r9, r2
 800aa28:	f1b9 0f00 	cmp.w	r9, #0
 800aa2c:	dc35      	bgt.n	800aa9a <_printf_float+0x3ae>
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aa36:	f104 0a1a 	add.w	sl, r4, #26
 800aa3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aa3e:	1a9b      	subs	r3, r3, r2
 800aa40:	eba3 0309 	sub.w	r3, r3, r9
 800aa44:	4543      	cmp	r3, r8
 800aa46:	f77f af79 	ble.w	800a93c <_printf_float+0x250>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4628      	mov	r0, r5
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	f43f aeaa 	beq.w	800a7ae <_printf_float+0xc2>
 800aa5a:	f108 0801 	add.w	r8, r8, #1
 800aa5e:	e7ec      	b.n	800aa3a <_printf_float+0x34e>
 800aa60:	4613      	mov	r3, r2
 800aa62:	4631      	mov	r1, r6
 800aa64:	4642      	mov	r2, r8
 800aa66:	4628      	mov	r0, r5
 800aa68:	47b8      	blx	r7
 800aa6a:	3001      	adds	r0, #1
 800aa6c:	d1c0      	bne.n	800a9f0 <_printf_float+0x304>
 800aa6e:	e69e      	b.n	800a7ae <_printf_float+0xc2>
 800aa70:	2301      	movs	r3, #1
 800aa72:	4631      	mov	r1, r6
 800aa74:	4628      	mov	r0, r5
 800aa76:	9205      	str	r2, [sp, #20]
 800aa78:	47b8      	blx	r7
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f43f ae97 	beq.w	800a7ae <_printf_float+0xc2>
 800aa80:	9a05      	ldr	r2, [sp, #20]
 800aa82:	f10b 0b01 	add.w	fp, fp, #1
 800aa86:	e7b9      	b.n	800a9fc <_printf_float+0x310>
 800aa88:	ee18 3a10 	vmov	r3, s16
 800aa8c:	4652      	mov	r2, sl
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4628      	mov	r0, r5
 800aa92:	47b8      	blx	r7
 800aa94:	3001      	adds	r0, #1
 800aa96:	d1be      	bne.n	800aa16 <_printf_float+0x32a>
 800aa98:	e689      	b.n	800a7ae <_printf_float+0xc2>
 800aa9a:	9a05      	ldr	r2, [sp, #20]
 800aa9c:	464b      	mov	r3, r9
 800aa9e:	4442      	add	r2, r8
 800aaa0:	4631      	mov	r1, r6
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	47b8      	blx	r7
 800aaa6:	3001      	adds	r0, #1
 800aaa8:	d1c1      	bne.n	800aa2e <_printf_float+0x342>
 800aaaa:	e680      	b.n	800a7ae <_printf_float+0xc2>
 800aaac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aaae:	2a01      	cmp	r2, #1
 800aab0:	dc01      	bgt.n	800aab6 <_printf_float+0x3ca>
 800aab2:	07db      	lsls	r3, r3, #31
 800aab4:	d538      	bpl.n	800ab28 <_printf_float+0x43c>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4642      	mov	r2, r8
 800aaba:	4631      	mov	r1, r6
 800aabc:	4628      	mov	r0, r5
 800aabe:	47b8      	blx	r7
 800aac0:	3001      	adds	r0, #1
 800aac2:	f43f ae74 	beq.w	800a7ae <_printf_float+0xc2>
 800aac6:	ee18 3a10 	vmov	r3, s16
 800aaca:	4652      	mov	r2, sl
 800aacc:	4631      	mov	r1, r6
 800aace:	4628      	mov	r0, r5
 800aad0:	47b8      	blx	r7
 800aad2:	3001      	adds	r0, #1
 800aad4:	f43f ae6b 	beq.w	800a7ae <_printf_float+0xc2>
 800aad8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aadc:	2200      	movs	r2, #0
 800aade:	2300      	movs	r3, #0
 800aae0:	f7f5 fff2 	bl	8000ac8 <__aeabi_dcmpeq>
 800aae4:	b9d8      	cbnz	r0, 800ab1e <_printf_float+0x432>
 800aae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae8:	f108 0201 	add.w	r2, r8, #1
 800aaec:	3b01      	subs	r3, #1
 800aaee:	4631      	mov	r1, r6
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b8      	blx	r7
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d10e      	bne.n	800ab16 <_printf_float+0x42a>
 800aaf8:	e659      	b.n	800a7ae <_printf_float+0xc2>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4652      	mov	r2, sl
 800aafe:	4631      	mov	r1, r6
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b8      	blx	r7
 800ab04:	3001      	adds	r0, #1
 800ab06:	f43f ae52 	beq.w	800a7ae <_printf_float+0xc2>
 800ab0a:	f108 0801 	add.w	r8, r8, #1
 800ab0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab10:	3b01      	subs	r3, #1
 800ab12:	4543      	cmp	r3, r8
 800ab14:	dcf1      	bgt.n	800aafa <_printf_float+0x40e>
 800ab16:	464b      	mov	r3, r9
 800ab18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ab1c:	e6dc      	b.n	800a8d8 <_printf_float+0x1ec>
 800ab1e:	f04f 0800 	mov.w	r8, #0
 800ab22:	f104 0a1a 	add.w	sl, r4, #26
 800ab26:	e7f2      	b.n	800ab0e <_printf_float+0x422>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	4642      	mov	r2, r8
 800ab2c:	e7df      	b.n	800aaee <_printf_float+0x402>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	464a      	mov	r2, r9
 800ab32:	4631      	mov	r1, r6
 800ab34:	4628      	mov	r0, r5
 800ab36:	47b8      	blx	r7
 800ab38:	3001      	adds	r0, #1
 800ab3a:	f43f ae38 	beq.w	800a7ae <_printf_float+0xc2>
 800ab3e:	f108 0801 	add.w	r8, r8, #1
 800ab42:	68e3      	ldr	r3, [r4, #12]
 800ab44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ab46:	1a5b      	subs	r3, r3, r1
 800ab48:	4543      	cmp	r3, r8
 800ab4a:	dcf0      	bgt.n	800ab2e <_printf_float+0x442>
 800ab4c:	e6fa      	b.n	800a944 <_printf_float+0x258>
 800ab4e:	f04f 0800 	mov.w	r8, #0
 800ab52:	f104 0919 	add.w	r9, r4, #25
 800ab56:	e7f4      	b.n	800ab42 <_printf_float+0x456>

0800ab58 <_printf_common>:
 800ab58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab5c:	4616      	mov	r6, r2
 800ab5e:	4699      	mov	r9, r3
 800ab60:	688a      	ldr	r2, [r1, #8]
 800ab62:	690b      	ldr	r3, [r1, #16]
 800ab64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	bfb8      	it	lt
 800ab6c:	4613      	movlt	r3, r2
 800ab6e:	6033      	str	r3, [r6, #0]
 800ab70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab74:	4607      	mov	r7, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	b10a      	cbz	r2, 800ab7e <_printf_common+0x26>
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	6033      	str	r3, [r6, #0]
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	0699      	lsls	r1, r3, #26
 800ab82:	bf42      	ittt	mi
 800ab84:	6833      	ldrmi	r3, [r6, #0]
 800ab86:	3302      	addmi	r3, #2
 800ab88:	6033      	strmi	r3, [r6, #0]
 800ab8a:	6825      	ldr	r5, [r4, #0]
 800ab8c:	f015 0506 	ands.w	r5, r5, #6
 800ab90:	d106      	bne.n	800aba0 <_printf_common+0x48>
 800ab92:	f104 0a19 	add.w	sl, r4, #25
 800ab96:	68e3      	ldr	r3, [r4, #12]
 800ab98:	6832      	ldr	r2, [r6, #0]
 800ab9a:	1a9b      	subs	r3, r3, r2
 800ab9c:	42ab      	cmp	r3, r5
 800ab9e:	dc26      	bgt.n	800abee <_printf_common+0x96>
 800aba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aba4:	1e13      	subs	r3, r2, #0
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	bf18      	it	ne
 800abaa:	2301      	movne	r3, #1
 800abac:	0692      	lsls	r2, r2, #26
 800abae:	d42b      	bmi.n	800ac08 <_printf_common+0xb0>
 800abb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abb4:	4649      	mov	r1, r9
 800abb6:	4638      	mov	r0, r7
 800abb8:	47c0      	blx	r8
 800abba:	3001      	adds	r0, #1
 800abbc:	d01e      	beq.n	800abfc <_printf_common+0xa4>
 800abbe:	6823      	ldr	r3, [r4, #0]
 800abc0:	68e5      	ldr	r5, [r4, #12]
 800abc2:	6832      	ldr	r2, [r6, #0]
 800abc4:	f003 0306 	and.w	r3, r3, #6
 800abc8:	2b04      	cmp	r3, #4
 800abca:	bf08      	it	eq
 800abcc:	1aad      	subeq	r5, r5, r2
 800abce:	68a3      	ldr	r3, [r4, #8]
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	bf0c      	ite	eq
 800abd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abd8:	2500      	movne	r5, #0
 800abda:	4293      	cmp	r3, r2
 800abdc:	bfc4      	itt	gt
 800abde:	1a9b      	subgt	r3, r3, r2
 800abe0:	18ed      	addgt	r5, r5, r3
 800abe2:	2600      	movs	r6, #0
 800abe4:	341a      	adds	r4, #26
 800abe6:	42b5      	cmp	r5, r6
 800abe8:	d11a      	bne.n	800ac20 <_printf_common+0xc8>
 800abea:	2000      	movs	r0, #0
 800abec:	e008      	b.n	800ac00 <_printf_common+0xa8>
 800abee:	2301      	movs	r3, #1
 800abf0:	4652      	mov	r2, sl
 800abf2:	4649      	mov	r1, r9
 800abf4:	4638      	mov	r0, r7
 800abf6:	47c0      	blx	r8
 800abf8:	3001      	adds	r0, #1
 800abfa:	d103      	bne.n	800ac04 <_printf_common+0xac>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac04:	3501      	adds	r5, #1
 800ac06:	e7c6      	b.n	800ab96 <_printf_common+0x3e>
 800ac08:	18e1      	adds	r1, r4, r3
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	2030      	movs	r0, #48	; 0x30
 800ac0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac12:	4422      	add	r2, r4
 800ac14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac1c:	3302      	adds	r3, #2
 800ac1e:	e7c7      	b.n	800abb0 <_printf_common+0x58>
 800ac20:	2301      	movs	r3, #1
 800ac22:	4622      	mov	r2, r4
 800ac24:	4649      	mov	r1, r9
 800ac26:	4638      	mov	r0, r7
 800ac28:	47c0      	blx	r8
 800ac2a:	3001      	adds	r0, #1
 800ac2c:	d0e6      	beq.n	800abfc <_printf_common+0xa4>
 800ac2e:	3601      	adds	r6, #1
 800ac30:	e7d9      	b.n	800abe6 <_printf_common+0x8e>
	...

0800ac34 <_printf_i>:
 800ac34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac38:	7e0f      	ldrb	r7, [r1, #24]
 800ac3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac3c:	2f78      	cmp	r7, #120	; 0x78
 800ac3e:	4691      	mov	r9, r2
 800ac40:	4680      	mov	r8, r0
 800ac42:	460c      	mov	r4, r1
 800ac44:	469a      	mov	sl, r3
 800ac46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac4a:	d807      	bhi.n	800ac5c <_printf_i+0x28>
 800ac4c:	2f62      	cmp	r7, #98	; 0x62
 800ac4e:	d80a      	bhi.n	800ac66 <_printf_i+0x32>
 800ac50:	2f00      	cmp	r7, #0
 800ac52:	f000 80d8 	beq.w	800ae06 <_printf_i+0x1d2>
 800ac56:	2f58      	cmp	r7, #88	; 0x58
 800ac58:	f000 80a3 	beq.w	800ada2 <_printf_i+0x16e>
 800ac5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac64:	e03a      	b.n	800acdc <_printf_i+0xa8>
 800ac66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac6a:	2b15      	cmp	r3, #21
 800ac6c:	d8f6      	bhi.n	800ac5c <_printf_i+0x28>
 800ac6e:	a101      	add	r1, pc, #4	; (adr r1, 800ac74 <_printf_i+0x40>)
 800ac70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac74:	0800accd 	.word	0x0800accd
 800ac78:	0800ace1 	.word	0x0800ace1
 800ac7c:	0800ac5d 	.word	0x0800ac5d
 800ac80:	0800ac5d 	.word	0x0800ac5d
 800ac84:	0800ac5d 	.word	0x0800ac5d
 800ac88:	0800ac5d 	.word	0x0800ac5d
 800ac8c:	0800ace1 	.word	0x0800ace1
 800ac90:	0800ac5d 	.word	0x0800ac5d
 800ac94:	0800ac5d 	.word	0x0800ac5d
 800ac98:	0800ac5d 	.word	0x0800ac5d
 800ac9c:	0800ac5d 	.word	0x0800ac5d
 800aca0:	0800aded 	.word	0x0800aded
 800aca4:	0800ad11 	.word	0x0800ad11
 800aca8:	0800adcf 	.word	0x0800adcf
 800acac:	0800ac5d 	.word	0x0800ac5d
 800acb0:	0800ac5d 	.word	0x0800ac5d
 800acb4:	0800ae0f 	.word	0x0800ae0f
 800acb8:	0800ac5d 	.word	0x0800ac5d
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ac5d 	.word	0x0800ac5d
 800acc4:	0800ac5d 	.word	0x0800ac5d
 800acc8:	0800add7 	.word	0x0800add7
 800accc:	682b      	ldr	r3, [r5, #0]
 800acce:	1d1a      	adds	r2, r3, #4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	602a      	str	r2, [r5, #0]
 800acd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800acd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acdc:	2301      	movs	r3, #1
 800acde:	e0a3      	b.n	800ae28 <_printf_i+0x1f4>
 800ace0:	6820      	ldr	r0, [r4, #0]
 800ace2:	6829      	ldr	r1, [r5, #0]
 800ace4:	0606      	lsls	r6, r0, #24
 800ace6:	f101 0304 	add.w	r3, r1, #4
 800acea:	d50a      	bpl.n	800ad02 <_printf_i+0xce>
 800acec:	680e      	ldr	r6, [r1, #0]
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	2e00      	cmp	r6, #0
 800acf2:	da03      	bge.n	800acfc <_printf_i+0xc8>
 800acf4:	232d      	movs	r3, #45	; 0x2d
 800acf6:	4276      	negs	r6, r6
 800acf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acfc:	485e      	ldr	r0, [pc, #376]	; (800ae78 <_printf_i+0x244>)
 800acfe:	230a      	movs	r3, #10
 800ad00:	e019      	b.n	800ad36 <_printf_i+0x102>
 800ad02:	680e      	ldr	r6, [r1, #0]
 800ad04:	602b      	str	r3, [r5, #0]
 800ad06:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad0a:	bf18      	it	ne
 800ad0c:	b236      	sxthne	r6, r6
 800ad0e:	e7ef      	b.n	800acf0 <_printf_i+0xbc>
 800ad10:	682b      	ldr	r3, [r5, #0]
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	1d19      	adds	r1, r3, #4
 800ad16:	6029      	str	r1, [r5, #0]
 800ad18:	0601      	lsls	r1, r0, #24
 800ad1a:	d501      	bpl.n	800ad20 <_printf_i+0xec>
 800ad1c:	681e      	ldr	r6, [r3, #0]
 800ad1e:	e002      	b.n	800ad26 <_printf_i+0xf2>
 800ad20:	0646      	lsls	r6, r0, #25
 800ad22:	d5fb      	bpl.n	800ad1c <_printf_i+0xe8>
 800ad24:	881e      	ldrh	r6, [r3, #0]
 800ad26:	4854      	ldr	r0, [pc, #336]	; (800ae78 <_printf_i+0x244>)
 800ad28:	2f6f      	cmp	r7, #111	; 0x6f
 800ad2a:	bf0c      	ite	eq
 800ad2c:	2308      	moveq	r3, #8
 800ad2e:	230a      	movne	r3, #10
 800ad30:	2100      	movs	r1, #0
 800ad32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad36:	6865      	ldr	r5, [r4, #4]
 800ad38:	60a5      	str	r5, [r4, #8]
 800ad3a:	2d00      	cmp	r5, #0
 800ad3c:	bfa2      	ittt	ge
 800ad3e:	6821      	ldrge	r1, [r4, #0]
 800ad40:	f021 0104 	bicge.w	r1, r1, #4
 800ad44:	6021      	strge	r1, [r4, #0]
 800ad46:	b90e      	cbnz	r6, 800ad4c <_printf_i+0x118>
 800ad48:	2d00      	cmp	r5, #0
 800ad4a:	d04d      	beq.n	800ade8 <_printf_i+0x1b4>
 800ad4c:	4615      	mov	r5, r2
 800ad4e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad52:	fb03 6711 	mls	r7, r3, r1, r6
 800ad56:	5dc7      	ldrb	r7, [r0, r7]
 800ad58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad5c:	4637      	mov	r7, r6
 800ad5e:	42bb      	cmp	r3, r7
 800ad60:	460e      	mov	r6, r1
 800ad62:	d9f4      	bls.n	800ad4e <_printf_i+0x11a>
 800ad64:	2b08      	cmp	r3, #8
 800ad66:	d10b      	bne.n	800ad80 <_printf_i+0x14c>
 800ad68:	6823      	ldr	r3, [r4, #0]
 800ad6a:	07de      	lsls	r6, r3, #31
 800ad6c:	d508      	bpl.n	800ad80 <_printf_i+0x14c>
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	6861      	ldr	r1, [r4, #4]
 800ad72:	4299      	cmp	r1, r3
 800ad74:	bfde      	ittt	le
 800ad76:	2330      	movle	r3, #48	; 0x30
 800ad78:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ad80:	1b52      	subs	r2, r2, r5
 800ad82:	6122      	str	r2, [r4, #16]
 800ad84:	f8cd a000 	str.w	sl, [sp]
 800ad88:	464b      	mov	r3, r9
 800ad8a:	aa03      	add	r2, sp, #12
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	4640      	mov	r0, r8
 800ad90:	f7ff fee2 	bl	800ab58 <_printf_common>
 800ad94:	3001      	adds	r0, #1
 800ad96:	d14c      	bne.n	800ae32 <_printf_i+0x1fe>
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad9c:	b004      	add	sp, #16
 800ad9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada2:	4835      	ldr	r0, [pc, #212]	; (800ae78 <_printf_i+0x244>)
 800ada4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ada8:	6829      	ldr	r1, [r5, #0]
 800adaa:	6823      	ldr	r3, [r4, #0]
 800adac:	f851 6b04 	ldr.w	r6, [r1], #4
 800adb0:	6029      	str	r1, [r5, #0]
 800adb2:	061d      	lsls	r5, r3, #24
 800adb4:	d514      	bpl.n	800ade0 <_printf_i+0x1ac>
 800adb6:	07df      	lsls	r7, r3, #31
 800adb8:	bf44      	itt	mi
 800adba:	f043 0320 	orrmi.w	r3, r3, #32
 800adbe:	6023      	strmi	r3, [r4, #0]
 800adc0:	b91e      	cbnz	r6, 800adca <_printf_i+0x196>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	f023 0320 	bic.w	r3, r3, #32
 800adc8:	6023      	str	r3, [r4, #0]
 800adca:	2310      	movs	r3, #16
 800adcc:	e7b0      	b.n	800ad30 <_printf_i+0xfc>
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	f043 0320 	orr.w	r3, r3, #32
 800add4:	6023      	str	r3, [r4, #0]
 800add6:	2378      	movs	r3, #120	; 0x78
 800add8:	4828      	ldr	r0, [pc, #160]	; (800ae7c <_printf_i+0x248>)
 800adda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adde:	e7e3      	b.n	800ada8 <_printf_i+0x174>
 800ade0:	0659      	lsls	r1, r3, #25
 800ade2:	bf48      	it	mi
 800ade4:	b2b6      	uxthmi	r6, r6
 800ade6:	e7e6      	b.n	800adb6 <_printf_i+0x182>
 800ade8:	4615      	mov	r5, r2
 800adea:	e7bb      	b.n	800ad64 <_printf_i+0x130>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	6826      	ldr	r6, [r4, #0]
 800adf0:	6961      	ldr	r1, [r4, #20]
 800adf2:	1d18      	adds	r0, r3, #4
 800adf4:	6028      	str	r0, [r5, #0]
 800adf6:	0635      	lsls	r5, r6, #24
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	d501      	bpl.n	800ae00 <_printf_i+0x1cc>
 800adfc:	6019      	str	r1, [r3, #0]
 800adfe:	e002      	b.n	800ae06 <_printf_i+0x1d2>
 800ae00:	0670      	lsls	r0, r6, #25
 800ae02:	d5fb      	bpl.n	800adfc <_printf_i+0x1c8>
 800ae04:	8019      	strh	r1, [r3, #0]
 800ae06:	2300      	movs	r3, #0
 800ae08:	6123      	str	r3, [r4, #16]
 800ae0a:	4615      	mov	r5, r2
 800ae0c:	e7ba      	b.n	800ad84 <_printf_i+0x150>
 800ae0e:	682b      	ldr	r3, [r5, #0]
 800ae10:	1d1a      	adds	r2, r3, #4
 800ae12:	602a      	str	r2, [r5, #0]
 800ae14:	681d      	ldr	r5, [r3, #0]
 800ae16:	6862      	ldr	r2, [r4, #4]
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4628      	mov	r0, r5
 800ae1c:	f7f5 f9e0 	bl	80001e0 <memchr>
 800ae20:	b108      	cbz	r0, 800ae26 <_printf_i+0x1f2>
 800ae22:	1b40      	subs	r0, r0, r5
 800ae24:	6060      	str	r0, [r4, #4]
 800ae26:	6863      	ldr	r3, [r4, #4]
 800ae28:	6123      	str	r3, [r4, #16]
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae30:	e7a8      	b.n	800ad84 <_printf_i+0x150>
 800ae32:	6923      	ldr	r3, [r4, #16]
 800ae34:	462a      	mov	r2, r5
 800ae36:	4649      	mov	r1, r9
 800ae38:	4640      	mov	r0, r8
 800ae3a:	47d0      	blx	sl
 800ae3c:	3001      	adds	r0, #1
 800ae3e:	d0ab      	beq.n	800ad98 <_printf_i+0x164>
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	079b      	lsls	r3, r3, #30
 800ae44:	d413      	bmi.n	800ae6e <_printf_i+0x23a>
 800ae46:	68e0      	ldr	r0, [r4, #12]
 800ae48:	9b03      	ldr	r3, [sp, #12]
 800ae4a:	4298      	cmp	r0, r3
 800ae4c:	bfb8      	it	lt
 800ae4e:	4618      	movlt	r0, r3
 800ae50:	e7a4      	b.n	800ad9c <_printf_i+0x168>
 800ae52:	2301      	movs	r3, #1
 800ae54:	4632      	mov	r2, r6
 800ae56:	4649      	mov	r1, r9
 800ae58:	4640      	mov	r0, r8
 800ae5a:	47d0      	blx	sl
 800ae5c:	3001      	adds	r0, #1
 800ae5e:	d09b      	beq.n	800ad98 <_printf_i+0x164>
 800ae60:	3501      	adds	r5, #1
 800ae62:	68e3      	ldr	r3, [r4, #12]
 800ae64:	9903      	ldr	r1, [sp, #12]
 800ae66:	1a5b      	subs	r3, r3, r1
 800ae68:	42ab      	cmp	r3, r5
 800ae6a:	dcf2      	bgt.n	800ae52 <_printf_i+0x21e>
 800ae6c:	e7eb      	b.n	800ae46 <_printf_i+0x212>
 800ae6e:	2500      	movs	r5, #0
 800ae70:	f104 0619 	add.w	r6, r4, #25
 800ae74:	e7f5      	b.n	800ae62 <_printf_i+0x22e>
 800ae76:	bf00      	nop
 800ae78:	0800d726 	.word	0x0800d726
 800ae7c:	0800d737 	.word	0x0800d737

0800ae80 <realloc>:
 800ae80:	4b02      	ldr	r3, [pc, #8]	; (800ae8c <realloc+0xc>)
 800ae82:	460a      	mov	r2, r1
 800ae84:	4601      	mov	r1, r0
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	f001 bb66 	b.w	800c558 <_realloc_r>
 800ae8c:	20000010 	.word	0x20000010

0800ae90 <_raise_r>:
 800ae90:	291f      	cmp	r1, #31
 800ae92:	b538      	push	{r3, r4, r5, lr}
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	d904      	bls.n	800aea4 <_raise_r+0x14>
 800ae9a:	2316      	movs	r3, #22
 800ae9c:	6003      	str	r3, [r0, #0]
 800ae9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aea2:	bd38      	pop	{r3, r4, r5, pc}
 800aea4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aea6:	b112      	cbz	r2, 800aeae <_raise_r+0x1e>
 800aea8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aeac:	b94b      	cbnz	r3, 800aec2 <_raise_r+0x32>
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 f830 	bl	800af14 <_getpid_r>
 800aeb4:	462a      	mov	r2, r5
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4620      	mov	r0, r4
 800aeba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aebe:	f000 b817 	b.w	800aef0 <_kill_r>
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d00a      	beq.n	800aedc <_raise_r+0x4c>
 800aec6:	1c59      	adds	r1, r3, #1
 800aec8:	d103      	bne.n	800aed2 <_raise_r+0x42>
 800aeca:	2316      	movs	r3, #22
 800aecc:	6003      	str	r3, [r0, #0]
 800aece:	2001      	movs	r0, #1
 800aed0:	e7e7      	b.n	800aea2 <_raise_r+0x12>
 800aed2:	2400      	movs	r4, #0
 800aed4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aed8:	4628      	mov	r0, r5
 800aeda:	4798      	blx	r3
 800aedc:	2000      	movs	r0, #0
 800aede:	e7e0      	b.n	800aea2 <_raise_r+0x12>

0800aee0 <raise>:
 800aee0:	4b02      	ldr	r3, [pc, #8]	; (800aeec <raise+0xc>)
 800aee2:	4601      	mov	r1, r0
 800aee4:	6818      	ldr	r0, [r3, #0]
 800aee6:	f7ff bfd3 	b.w	800ae90 <_raise_r>
 800aeea:	bf00      	nop
 800aeec:	20000010 	.word	0x20000010

0800aef0 <_kill_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	4d07      	ldr	r5, [pc, #28]	; (800af10 <_kill_r+0x20>)
 800aef4:	2300      	movs	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	4608      	mov	r0, r1
 800aefa:	4611      	mov	r1, r2
 800aefc:	602b      	str	r3, [r5, #0]
 800aefe:	f7f9 fd85 	bl	8004a0c <_kill>
 800af02:	1c43      	adds	r3, r0, #1
 800af04:	d102      	bne.n	800af0c <_kill_r+0x1c>
 800af06:	682b      	ldr	r3, [r5, #0]
 800af08:	b103      	cbz	r3, 800af0c <_kill_r+0x1c>
 800af0a:	6023      	str	r3, [r4, #0]
 800af0c:	bd38      	pop	{r3, r4, r5, pc}
 800af0e:	bf00      	nop
 800af10:	20000e20 	.word	0x20000e20

0800af14 <_getpid_r>:
 800af14:	f7f9 bd72 	b.w	80049fc <_getpid>

0800af18 <siprintf>:
 800af18:	b40e      	push	{r1, r2, r3}
 800af1a:	b500      	push	{lr}
 800af1c:	b09c      	sub	sp, #112	; 0x70
 800af1e:	ab1d      	add	r3, sp, #116	; 0x74
 800af20:	9002      	str	r0, [sp, #8]
 800af22:	9006      	str	r0, [sp, #24]
 800af24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800af28:	4809      	ldr	r0, [pc, #36]	; (800af50 <siprintf+0x38>)
 800af2a:	9107      	str	r1, [sp, #28]
 800af2c:	9104      	str	r1, [sp, #16]
 800af2e:	4909      	ldr	r1, [pc, #36]	; (800af54 <siprintf+0x3c>)
 800af30:	f853 2b04 	ldr.w	r2, [r3], #4
 800af34:	9105      	str	r1, [sp, #20]
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	a902      	add	r1, sp, #8
 800af3c:	f001 fb96 	bl	800c66c <_svfiprintf_r>
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	2200      	movs	r2, #0
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	b01c      	add	sp, #112	; 0x70
 800af48:	f85d eb04 	ldr.w	lr, [sp], #4
 800af4c:	b003      	add	sp, #12
 800af4e:	4770      	bx	lr
 800af50:	20000010 	.word	0x20000010
 800af54:	ffff0208 	.word	0xffff0208

0800af58 <quorem>:
 800af58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af5c:	6903      	ldr	r3, [r0, #16]
 800af5e:	690c      	ldr	r4, [r1, #16]
 800af60:	42a3      	cmp	r3, r4
 800af62:	4607      	mov	r7, r0
 800af64:	f2c0 8081 	blt.w	800b06a <quorem+0x112>
 800af68:	3c01      	subs	r4, #1
 800af6a:	f101 0814 	add.w	r8, r1, #20
 800af6e:	f100 0514 	add.w	r5, r0, #20
 800af72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800af7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af80:	3301      	adds	r3, #1
 800af82:	429a      	cmp	r2, r3
 800af84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800af88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800af8c:	fbb2 f6f3 	udiv	r6, r2, r3
 800af90:	d331      	bcc.n	800aff6 <quorem+0x9e>
 800af92:	f04f 0e00 	mov.w	lr, #0
 800af96:	4640      	mov	r0, r8
 800af98:	46ac      	mov	ip, r5
 800af9a:	46f2      	mov	sl, lr
 800af9c:	f850 2b04 	ldr.w	r2, [r0], #4
 800afa0:	b293      	uxth	r3, r2
 800afa2:	fb06 e303 	mla	r3, r6, r3, lr
 800afa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afaa:	b29b      	uxth	r3, r3
 800afac:	ebaa 0303 	sub.w	r3, sl, r3
 800afb0:	f8dc a000 	ldr.w	sl, [ip]
 800afb4:	0c12      	lsrs	r2, r2, #16
 800afb6:	fa13 f38a 	uxtah	r3, r3, sl
 800afba:	fb06 e202 	mla	r2, r6, r2, lr
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	9b00      	ldr	r3, [sp, #0]
 800afc2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800afc6:	b292      	uxth	r2, r2
 800afc8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800afcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800afd0:	f8bd 3000 	ldrh.w	r3, [sp]
 800afd4:	4581      	cmp	r9, r0
 800afd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afda:	f84c 3b04 	str.w	r3, [ip], #4
 800afde:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800afe2:	d2db      	bcs.n	800af9c <quorem+0x44>
 800afe4:	f855 300b 	ldr.w	r3, [r5, fp]
 800afe8:	b92b      	cbnz	r3, 800aff6 <quorem+0x9e>
 800afea:	9b01      	ldr	r3, [sp, #4]
 800afec:	3b04      	subs	r3, #4
 800afee:	429d      	cmp	r5, r3
 800aff0:	461a      	mov	r2, r3
 800aff2:	d32e      	bcc.n	800b052 <quorem+0xfa>
 800aff4:	613c      	str	r4, [r7, #16]
 800aff6:	4638      	mov	r0, r7
 800aff8:	f001 f8b6 	bl	800c168 <__mcmp>
 800affc:	2800      	cmp	r0, #0
 800affe:	db24      	blt.n	800b04a <quorem+0xf2>
 800b000:	3601      	adds	r6, #1
 800b002:	4628      	mov	r0, r5
 800b004:	f04f 0c00 	mov.w	ip, #0
 800b008:	f858 2b04 	ldr.w	r2, [r8], #4
 800b00c:	f8d0 e000 	ldr.w	lr, [r0]
 800b010:	b293      	uxth	r3, r2
 800b012:	ebac 0303 	sub.w	r3, ip, r3
 800b016:	0c12      	lsrs	r2, r2, #16
 800b018:	fa13 f38e 	uxtah	r3, r3, lr
 800b01c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b024:	b29b      	uxth	r3, r3
 800b026:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b02a:	45c1      	cmp	r9, r8
 800b02c:	f840 3b04 	str.w	r3, [r0], #4
 800b030:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b034:	d2e8      	bcs.n	800b008 <quorem+0xb0>
 800b036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b03a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b03e:	b922      	cbnz	r2, 800b04a <quorem+0xf2>
 800b040:	3b04      	subs	r3, #4
 800b042:	429d      	cmp	r5, r3
 800b044:	461a      	mov	r2, r3
 800b046:	d30a      	bcc.n	800b05e <quorem+0x106>
 800b048:	613c      	str	r4, [r7, #16]
 800b04a:	4630      	mov	r0, r6
 800b04c:	b003      	add	sp, #12
 800b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b052:	6812      	ldr	r2, [r2, #0]
 800b054:	3b04      	subs	r3, #4
 800b056:	2a00      	cmp	r2, #0
 800b058:	d1cc      	bne.n	800aff4 <quorem+0x9c>
 800b05a:	3c01      	subs	r4, #1
 800b05c:	e7c7      	b.n	800afee <quorem+0x96>
 800b05e:	6812      	ldr	r2, [r2, #0]
 800b060:	3b04      	subs	r3, #4
 800b062:	2a00      	cmp	r2, #0
 800b064:	d1f0      	bne.n	800b048 <quorem+0xf0>
 800b066:	3c01      	subs	r4, #1
 800b068:	e7eb      	b.n	800b042 <quorem+0xea>
 800b06a:	2000      	movs	r0, #0
 800b06c:	e7ee      	b.n	800b04c <quorem+0xf4>
	...

0800b070 <_dtoa_r>:
 800b070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b074:	ed2d 8b04 	vpush	{d8-d9}
 800b078:	ec57 6b10 	vmov	r6, r7, d0
 800b07c:	b093      	sub	sp, #76	; 0x4c
 800b07e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b080:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b084:	9106      	str	r1, [sp, #24]
 800b086:	ee10 aa10 	vmov	sl, s0
 800b08a:	4604      	mov	r4, r0
 800b08c:	9209      	str	r2, [sp, #36]	; 0x24
 800b08e:	930c      	str	r3, [sp, #48]	; 0x30
 800b090:	46bb      	mov	fp, r7
 800b092:	b975      	cbnz	r5, 800b0b2 <_dtoa_r+0x42>
 800b094:	2010      	movs	r0, #16
 800b096:	f000 fddd 	bl	800bc54 <malloc>
 800b09a:	4602      	mov	r2, r0
 800b09c:	6260      	str	r0, [r4, #36]	; 0x24
 800b09e:	b920      	cbnz	r0, 800b0aa <_dtoa_r+0x3a>
 800b0a0:	4ba7      	ldr	r3, [pc, #668]	; (800b340 <_dtoa_r+0x2d0>)
 800b0a2:	21ea      	movs	r1, #234	; 0xea
 800b0a4:	48a7      	ldr	r0, [pc, #668]	; (800b344 <_dtoa_r+0x2d4>)
 800b0a6:	f001 fbf1 	bl	800c88c <__assert_func>
 800b0aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b0ae:	6005      	str	r5, [r0, #0]
 800b0b0:	60c5      	str	r5, [r0, #12]
 800b0b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b4:	6819      	ldr	r1, [r3, #0]
 800b0b6:	b151      	cbz	r1, 800b0ce <_dtoa_r+0x5e>
 800b0b8:	685a      	ldr	r2, [r3, #4]
 800b0ba:	604a      	str	r2, [r1, #4]
 800b0bc:	2301      	movs	r3, #1
 800b0be:	4093      	lsls	r3, r2
 800b0c0:	608b      	str	r3, [r1, #8]
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fe0e 	bl	800bce4 <_Bfree>
 800b0c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	1e3b      	subs	r3, r7, #0
 800b0d0:	bfaa      	itet	ge
 800b0d2:	2300      	movge	r3, #0
 800b0d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b0d8:	f8c8 3000 	strge.w	r3, [r8]
 800b0dc:	4b9a      	ldr	r3, [pc, #616]	; (800b348 <_dtoa_r+0x2d8>)
 800b0de:	bfbc      	itt	lt
 800b0e0:	2201      	movlt	r2, #1
 800b0e2:	f8c8 2000 	strlt.w	r2, [r8]
 800b0e6:	ea33 030b 	bics.w	r3, r3, fp
 800b0ea:	d11b      	bne.n	800b124 <_dtoa_r+0xb4>
 800b0ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0ee:	f242 730f 	movw	r3, #9999	; 0x270f
 800b0f2:	6013      	str	r3, [r2, #0]
 800b0f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0f8:	4333      	orrs	r3, r6
 800b0fa:	f000 8592 	beq.w	800bc22 <_dtoa_r+0xbb2>
 800b0fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b100:	b963      	cbnz	r3, 800b11c <_dtoa_r+0xac>
 800b102:	4b92      	ldr	r3, [pc, #584]	; (800b34c <_dtoa_r+0x2dc>)
 800b104:	e022      	b.n	800b14c <_dtoa_r+0xdc>
 800b106:	4b92      	ldr	r3, [pc, #584]	; (800b350 <_dtoa_r+0x2e0>)
 800b108:	9301      	str	r3, [sp, #4]
 800b10a:	3308      	adds	r3, #8
 800b10c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	9801      	ldr	r0, [sp, #4]
 800b112:	b013      	add	sp, #76	; 0x4c
 800b114:	ecbd 8b04 	vpop	{d8-d9}
 800b118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11c:	4b8b      	ldr	r3, [pc, #556]	; (800b34c <_dtoa_r+0x2dc>)
 800b11e:	9301      	str	r3, [sp, #4]
 800b120:	3303      	adds	r3, #3
 800b122:	e7f3      	b.n	800b10c <_dtoa_r+0x9c>
 800b124:	2200      	movs	r2, #0
 800b126:	2300      	movs	r3, #0
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	f7f5 fccc 	bl	8000ac8 <__aeabi_dcmpeq>
 800b130:	ec4b ab19 	vmov	d9, sl, fp
 800b134:	4680      	mov	r8, r0
 800b136:	b158      	cbz	r0, 800b150 <_dtoa_r+0xe0>
 800b138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b13a:	2301      	movs	r3, #1
 800b13c:	6013      	str	r3, [r2, #0]
 800b13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b140:	2b00      	cmp	r3, #0
 800b142:	f000 856b 	beq.w	800bc1c <_dtoa_r+0xbac>
 800b146:	4883      	ldr	r0, [pc, #524]	; (800b354 <_dtoa_r+0x2e4>)
 800b148:	6018      	str	r0, [r3, #0]
 800b14a:	1e43      	subs	r3, r0, #1
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	e7df      	b.n	800b110 <_dtoa_r+0xa0>
 800b150:	ec4b ab10 	vmov	d0, sl, fp
 800b154:	aa10      	add	r2, sp, #64	; 0x40
 800b156:	a911      	add	r1, sp, #68	; 0x44
 800b158:	4620      	mov	r0, r4
 800b15a:	f001 f8ab 	bl	800c2b4 <__d2b>
 800b15e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b162:	ee08 0a10 	vmov	s16, r0
 800b166:	2d00      	cmp	r5, #0
 800b168:	f000 8084 	beq.w	800b274 <_dtoa_r+0x204>
 800b16c:	ee19 3a90 	vmov	r3, s19
 800b170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b174:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b178:	4656      	mov	r6, sl
 800b17a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b17e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b182:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b186:	4b74      	ldr	r3, [pc, #464]	; (800b358 <_dtoa_r+0x2e8>)
 800b188:	2200      	movs	r2, #0
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 f87b 	bl	8000288 <__aeabi_dsub>
 800b192:	a365      	add	r3, pc, #404	; (adr r3, 800b328 <_dtoa_r+0x2b8>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f5 fa2e 	bl	80005f8 <__aeabi_dmul>
 800b19c:	a364      	add	r3, pc, #400	; (adr r3, 800b330 <_dtoa_r+0x2c0>)
 800b19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a2:	f7f5 f873 	bl	800028c <__adddf3>
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	460f      	mov	r7, r1
 800b1ac:	f7f5 f9ba 	bl	8000524 <__aeabi_i2d>
 800b1b0:	a361      	add	r3, pc, #388	; (adr r3, 800b338 <_dtoa_r+0x2c8>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	f7f5 fa1f 	bl	80005f8 <__aeabi_dmul>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 f863 	bl	800028c <__adddf3>
 800b1c6:	4606      	mov	r6, r0
 800b1c8:	460f      	mov	r7, r1
 800b1ca:	f7f5 fcc5 	bl	8000b58 <__aeabi_d2iz>
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	9000      	str	r0, [sp, #0]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	f7f5 fc80 	bl	8000adc <__aeabi_dcmplt>
 800b1dc:	b150      	cbz	r0, 800b1f4 <_dtoa_r+0x184>
 800b1de:	9800      	ldr	r0, [sp, #0]
 800b1e0:	f7f5 f9a0 	bl	8000524 <__aeabi_i2d>
 800b1e4:	4632      	mov	r2, r6
 800b1e6:	463b      	mov	r3, r7
 800b1e8:	f7f5 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1ec:	b910      	cbnz	r0, 800b1f4 <_dtoa_r+0x184>
 800b1ee:	9b00      	ldr	r3, [sp, #0]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	9b00      	ldr	r3, [sp, #0]
 800b1f6:	2b16      	cmp	r3, #22
 800b1f8:	d85a      	bhi.n	800b2b0 <_dtoa_r+0x240>
 800b1fa:	9a00      	ldr	r2, [sp, #0]
 800b1fc:	4b57      	ldr	r3, [pc, #348]	; (800b35c <_dtoa_r+0x2ec>)
 800b1fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b206:	ec51 0b19 	vmov	r0, r1, d9
 800b20a:	f7f5 fc67 	bl	8000adc <__aeabi_dcmplt>
 800b20e:	2800      	cmp	r0, #0
 800b210:	d050      	beq.n	800b2b4 <_dtoa_r+0x244>
 800b212:	9b00      	ldr	r3, [sp, #0]
 800b214:	3b01      	subs	r3, #1
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	2300      	movs	r3, #0
 800b21a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b21e:	1b5d      	subs	r5, r3, r5
 800b220:	1e6b      	subs	r3, r5, #1
 800b222:	9305      	str	r3, [sp, #20]
 800b224:	bf45      	ittet	mi
 800b226:	f1c5 0301 	rsbmi	r3, r5, #1
 800b22a:	9304      	strmi	r3, [sp, #16]
 800b22c:	2300      	movpl	r3, #0
 800b22e:	2300      	movmi	r3, #0
 800b230:	bf4c      	ite	mi
 800b232:	9305      	strmi	r3, [sp, #20]
 800b234:	9304      	strpl	r3, [sp, #16]
 800b236:	9b00      	ldr	r3, [sp, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	db3d      	blt.n	800b2b8 <_dtoa_r+0x248>
 800b23c:	9b05      	ldr	r3, [sp, #20]
 800b23e:	9a00      	ldr	r2, [sp, #0]
 800b240:	920a      	str	r2, [sp, #40]	; 0x28
 800b242:	4413      	add	r3, r2
 800b244:	9305      	str	r3, [sp, #20]
 800b246:	2300      	movs	r3, #0
 800b248:	9307      	str	r3, [sp, #28]
 800b24a:	9b06      	ldr	r3, [sp, #24]
 800b24c:	2b09      	cmp	r3, #9
 800b24e:	f200 8089 	bhi.w	800b364 <_dtoa_r+0x2f4>
 800b252:	2b05      	cmp	r3, #5
 800b254:	bfc4      	itt	gt
 800b256:	3b04      	subgt	r3, #4
 800b258:	9306      	strgt	r3, [sp, #24]
 800b25a:	9b06      	ldr	r3, [sp, #24]
 800b25c:	f1a3 0302 	sub.w	r3, r3, #2
 800b260:	bfcc      	ite	gt
 800b262:	2500      	movgt	r5, #0
 800b264:	2501      	movle	r5, #1
 800b266:	2b03      	cmp	r3, #3
 800b268:	f200 8087 	bhi.w	800b37a <_dtoa_r+0x30a>
 800b26c:	e8df f003 	tbb	[pc, r3]
 800b270:	59383a2d 	.word	0x59383a2d
 800b274:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b278:	441d      	add	r5, r3
 800b27a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b27e:	2b20      	cmp	r3, #32
 800b280:	bfc1      	itttt	gt
 800b282:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b286:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b28a:	fa0b f303 	lslgt.w	r3, fp, r3
 800b28e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b292:	bfda      	itte	le
 800b294:	f1c3 0320 	rsble	r3, r3, #32
 800b298:	fa06 f003 	lslle.w	r0, r6, r3
 800b29c:	4318      	orrgt	r0, r3
 800b29e:	f7f5 f931 	bl	8000504 <__aeabi_ui2d>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b2aa:	3d01      	subs	r5, #1
 800b2ac:	930e      	str	r3, [sp, #56]	; 0x38
 800b2ae:	e76a      	b.n	800b186 <_dtoa_r+0x116>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e7b2      	b.n	800b21a <_dtoa_r+0x1aa>
 800b2b4:	900b      	str	r0, [sp, #44]	; 0x2c
 800b2b6:	e7b1      	b.n	800b21c <_dtoa_r+0x1ac>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	9a00      	ldr	r2, [sp, #0]
 800b2bc:	1a9b      	subs	r3, r3, r2
 800b2be:	9304      	str	r3, [sp, #16]
 800b2c0:	4253      	negs	r3, r2
 800b2c2:	9307      	str	r3, [sp, #28]
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2c8:	e7bf      	b.n	800b24a <_dtoa_r+0x1da>
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9308      	str	r3, [sp, #32]
 800b2ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	dc55      	bgt.n	800b380 <_dtoa_r+0x310>
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2da:	461a      	mov	r2, r3
 800b2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800b2de:	e00c      	b.n	800b2fa <_dtoa_r+0x28a>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	e7f3      	b.n	800b2cc <_dtoa_r+0x25c>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2e8:	9308      	str	r3, [sp, #32]
 800b2ea:	9b00      	ldr	r3, [sp, #0]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	9302      	str	r3, [sp, #8]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	9303      	str	r3, [sp, #12]
 800b2f6:	bfb8      	it	lt
 800b2f8:	2301      	movlt	r3, #1
 800b2fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	6042      	str	r2, [r0, #4]
 800b300:	2204      	movs	r2, #4
 800b302:	f102 0614 	add.w	r6, r2, #20
 800b306:	429e      	cmp	r6, r3
 800b308:	6841      	ldr	r1, [r0, #4]
 800b30a:	d93d      	bls.n	800b388 <_dtoa_r+0x318>
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fca9 	bl	800bc64 <_Balloc>
 800b312:	9001      	str	r0, [sp, #4]
 800b314:	2800      	cmp	r0, #0
 800b316:	d13b      	bne.n	800b390 <_dtoa_r+0x320>
 800b318:	4b11      	ldr	r3, [pc, #68]	; (800b360 <_dtoa_r+0x2f0>)
 800b31a:	4602      	mov	r2, r0
 800b31c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b320:	e6c0      	b.n	800b0a4 <_dtoa_r+0x34>
 800b322:	2301      	movs	r3, #1
 800b324:	e7df      	b.n	800b2e6 <_dtoa_r+0x276>
 800b326:	bf00      	nop
 800b328:	636f4361 	.word	0x636f4361
 800b32c:	3fd287a7 	.word	0x3fd287a7
 800b330:	8b60c8b3 	.word	0x8b60c8b3
 800b334:	3fc68a28 	.word	0x3fc68a28
 800b338:	509f79fb 	.word	0x509f79fb
 800b33c:	3fd34413 	.word	0x3fd34413
 800b340:	0800d755 	.word	0x0800d755
 800b344:	0800d76c 	.word	0x0800d76c
 800b348:	7ff00000 	.word	0x7ff00000
 800b34c:	0800d751 	.word	0x0800d751
 800b350:	0800d748 	.word	0x0800d748
 800b354:	0800d725 	.word	0x0800d725
 800b358:	3ff80000 	.word	0x3ff80000
 800b35c:	0800d860 	.word	0x0800d860
 800b360:	0800d7c7 	.word	0x0800d7c7
 800b364:	2501      	movs	r5, #1
 800b366:	2300      	movs	r3, #0
 800b368:	9306      	str	r3, [sp, #24]
 800b36a:	9508      	str	r5, [sp, #32]
 800b36c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b370:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b374:	2200      	movs	r2, #0
 800b376:	2312      	movs	r3, #18
 800b378:	e7b0      	b.n	800b2dc <_dtoa_r+0x26c>
 800b37a:	2301      	movs	r3, #1
 800b37c:	9308      	str	r3, [sp, #32]
 800b37e:	e7f5      	b.n	800b36c <_dtoa_r+0x2fc>
 800b380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b382:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b386:	e7b8      	b.n	800b2fa <_dtoa_r+0x28a>
 800b388:	3101      	adds	r1, #1
 800b38a:	6041      	str	r1, [r0, #4]
 800b38c:	0052      	lsls	r2, r2, #1
 800b38e:	e7b8      	b.n	800b302 <_dtoa_r+0x292>
 800b390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b392:	9a01      	ldr	r2, [sp, #4]
 800b394:	601a      	str	r2, [r3, #0]
 800b396:	9b03      	ldr	r3, [sp, #12]
 800b398:	2b0e      	cmp	r3, #14
 800b39a:	f200 809d 	bhi.w	800b4d8 <_dtoa_r+0x468>
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	f000 809a 	beq.w	800b4d8 <_dtoa_r+0x468>
 800b3a4:	9b00      	ldr	r3, [sp, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	dd32      	ble.n	800b410 <_dtoa_r+0x3a0>
 800b3aa:	4ab7      	ldr	r2, [pc, #732]	; (800b688 <_dtoa_r+0x618>)
 800b3ac:	f003 030f 	and.w	r3, r3, #15
 800b3b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3b8:	9b00      	ldr	r3, [sp, #0]
 800b3ba:	05d8      	lsls	r0, r3, #23
 800b3bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b3c0:	d516      	bpl.n	800b3f0 <_dtoa_r+0x380>
 800b3c2:	4bb2      	ldr	r3, [pc, #712]	; (800b68c <_dtoa_r+0x61c>)
 800b3c4:	ec51 0b19 	vmov	r0, r1, d9
 800b3c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3cc:	f7f5 fa3e 	bl	800084c <__aeabi_ddiv>
 800b3d0:	f007 070f 	and.w	r7, r7, #15
 800b3d4:	4682      	mov	sl, r0
 800b3d6:	468b      	mov	fp, r1
 800b3d8:	2503      	movs	r5, #3
 800b3da:	4eac      	ldr	r6, [pc, #688]	; (800b68c <_dtoa_r+0x61c>)
 800b3dc:	b957      	cbnz	r7, 800b3f4 <_dtoa_r+0x384>
 800b3de:	4642      	mov	r2, r8
 800b3e0:	464b      	mov	r3, r9
 800b3e2:	4650      	mov	r0, sl
 800b3e4:	4659      	mov	r1, fp
 800b3e6:	f7f5 fa31 	bl	800084c <__aeabi_ddiv>
 800b3ea:	4682      	mov	sl, r0
 800b3ec:	468b      	mov	fp, r1
 800b3ee:	e028      	b.n	800b442 <_dtoa_r+0x3d2>
 800b3f0:	2502      	movs	r5, #2
 800b3f2:	e7f2      	b.n	800b3da <_dtoa_r+0x36a>
 800b3f4:	07f9      	lsls	r1, r7, #31
 800b3f6:	d508      	bpl.n	800b40a <_dtoa_r+0x39a>
 800b3f8:	4640      	mov	r0, r8
 800b3fa:	4649      	mov	r1, r9
 800b3fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b400:	f7f5 f8fa 	bl	80005f8 <__aeabi_dmul>
 800b404:	3501      	adds	r5, #1
 800b406:	4680      	mov	r8, r0
 800b408:	4689      	mov	r9, r1
 800b40a:	107f      	asrs	r7, r7, #1
 800b40c:	3608      	adds	r6, #8
 800b40e:	e7e5      	b.n	800b3dc <_dtoa_r+0x36c>
 800b410:	f000 809b 	beq.w	800b54a <_dtoa_r+0x4da>
 800b414:	9b00      	ldr	r3, [sp, #0]
 800b416:	4f9d      	ldr	r7, [pc, #628]	; (800b68c <_dtoa_r+0x61c>)
 800b418:	425e      	negs	r6, r3
 800b41a:	4b9b      	ldr	r3, [pc, #620]	; (800b688 <_dtoa_r+0x618>)
 800b41c:	f006 020f 	and.w	r2, r6, #15
 800b420:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b428:	ec51 0b19 	vmov	r0, r1, d9
 800b42c:	f7f5 f8e4 	bl	80005f8 <__aeabi_dmul>
 800b430:	1136      	asrs	r6, r6, #4
 800b432:	4682      	mov	sl, r0
 800b434:	468b      	mov	fp, r1
 800b436:	2300      	movs	r3, #0
 800b438:	2502      	movs	r5, #2
 800b43a:	2e00      	cmp	r6, #0
 800b43c:	d17a      	bne.n	800b534 <_dtoa_r+0x4c4>
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1d3      	bne.n	800b3ea <_dtoa_r+0x37a>
 800b442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b444:	2b00      	cmp	r3, #0
 800b446:	f000 8082 	beq.w	800b54e <_dtoa_r+0x4de>
 800b44a:	4b91      	ldr	r3, [pc, #580]	; (800b690 <_dtoa_r+0x620>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	4650      	mov	r0, sl
 800b450:	4659      	mov	r1, fp
 800b452:	f7f5 fb43 	bl	8000adc <__aeabi_dcmplt>
 800b456:	2800      	cmp	r0, #0
 800b458:	d079      	beq.n	800b54e <_dtoa_r+0x4de>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d076      	beq.n	800b54e <_dtoa_r+0x4de>
 800b460:	9b02      	ldr	r3, [sp, #8]
 800b462:	2b00      	cmp	r3, #0
 800b464:	dd36      	ble.n	800b4d4 <_dtoa_r+0x464>
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	4650      	mov	r0, sl
 800b46a:	4659      	mov	r1, fp
 800b46c:	1e5f      	subs	r7, r3, #1
 800b46e:	2200      	movs	r2, #0
 800b470:	4b88      	ldr	r3, [pc, #544]	; (800b694 <_dtoa_r+0x624>)
 800b472:	f7f5 f8c1 	bl	80005f8 <__aeabi_dmul>
 800b476:	9e02      	ldr	r6, [sp, #8]
 800b478:	4682      	mov	sl, r0
 800b47a:	468b      	mov	fp, r1
 800b47c:	3501      	adds	r5, #1
 800b47e:	4628      	mov	r0, r5
 800b480:	f7f5 f850 	bl	8000524 <__aeabi_i2d>
 800b484:	4652      	mov	r2, sl
 800b486:	465b      	mov	r3, fp
 800b488:	f7f5 f8b6 	bl	80005f8 <__aeabi_dmul>
 800b48c:	4b82      	ldr	r3, [pc, #520]	; (800b698 <_dtoa_r+0x628>)
 800b48e:	2200      	movs	r2, #0
 800b490:	f7f4 fefc 	bl	800028c <__adddf3>
 800b494:	46d0      	mov	r8, sl
 800b496:	46d9      	mov	r9, fp
 800b498:	4682      	mov	sl, r0
 800b49a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b49e:	2e00      	cmp	r6, #0
 800b4a0:	d158      	bne.n	800b554 <_dtoa_r+0x4e4>
 800b4a2:	4b7e      	ldr	r3, [pc, #504]	; (800b69c <_dtoa_r+0x62c>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	f7f4 feed 	bl	8000288 <__aeabi_dsub>
 800b4ae:	4652      	mov	r2, sl
 800b4b0:	465b      	mov	r3, fp
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	f7f5 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f040 8295 	bne.w	800b9ea <_dtoa_r+0x97a>
 800b4c0:	4652      	mov	r2, sl
 800b4c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	4649      	mov	r1, r9
 800b4ca:	f7f5 fb07 	bl	8000adc <__aeabi_dcmplt>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	f040 8289 	bne.w	800b9e6 <_dtoa_r+0x976>
 800b4d4:	ec5b ab19 	vmov	sl, fp, d9
 800b4d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f2c0 8148 	blt.w	800b770 <_dtoa_r+0x700>
 800b4e0:	9a00      	ldr	r2, [sp, #0]
 800b4e2:	2a0e      	cmp	r2, #14
 800b4e4:	f300 8144 	bgt.w	800b770 <_dtoa_r+0x700>
 800b4e8:	4b67      	ldr	r3, [pc, #412]	; (800b688 <_dtoa_r+0x618>)
 800b4ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b4ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f280 80d5 	bge.w	800b6a4 <_dtoa_r+0x634>
 800b4fa:	9b03      	ldr	r3, [sp, #12]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f300 80d1 	bgt.w	800b6a4 <_dtoa_r+0x634>
 800b502:	f040 826f 	bne.w	800b9e4 <_dtoa_r+0x974>
 800b506:	4b65      	ldr	r3, [pc, #404]	; (800b69c <_dtoa_r+0x62c>)
 800b508:	2200      	movs	r2, #0
 800b50a:	4640      	mov	r0, r8
 800b50c:	4649      	mov	r1, r9
 800b50e:	f7f5 f873 	bl	80005f8 <__aeabi_dmul>
 800b512:	4652      	mov	r2, sl
 800b514:	465b      	mov	r3, fp
 800b516:	f7f5 faf5 	bl	8000b04 <__aeabi_dcmpge>
 800b51a:	9e03      	ldr	r6, [sp, #12]
 800b51c:	4637      	mov	r7, r6
 800b51e:	2800      	cmp	r0, #0
 800b520:	f040 8245 	bne.w	800b9ae <_dtoa_r+0x93e>
 800b524:	9d01      	ldr	r5, [sp, #4]
 800b526:	2331      	movs	r3, #49	; 0x31
 800b528:	f805 3b01 	strb.w	r3, [r5], #1
 800b52c:	9b00      	ldr	r3, [sp, #0]
 800b52e:	3301      	adds	r3, #1
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	e240      	b.n	800b9b6 <_dtoa_r+0x946>
 800b534:	07f2      	lsls	r2, r6, #31
 800b536:	d505      	bpl.n	800b544 <_dtoa_r+0x4d4>
 800b538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b53c:	f7f5 f85c 	bl	80005f8 <__aeabi_dmul>
 800b540:	3501      	adds	r5, #1
 800b542:	2301      	movs	r3, #1
 800b544:	1076      	asrs	r6, r6, #1
 800b546:	3708      	adds	r7, #8
 800b548:	e777      	b.n	800b43a <_dtoa_r+0x3ca>
 800b54a:	2502      	movs	r5, #2
 800b54c:	e779      	b.n	800b442 <_dtoa_r+0x3d2>
 800b54e:	9f00      	ldr	r7, [sp, #0]
 800b550:	9e03      	ldr	r6, [sp, #12]
 800b552:	e794      	b.n	800b47e <_dtoa_r+0x40e>
 800b554:	9901      	ldr	r1, [sp, #4]
 800b556:	4b4c      	ldr	r3, [pc, #304]	; (800b688 <_dtoa_r+0x618>)
 800b558:	4431      	add	r1, r6
 800b55a:	910d      	str	r1, [sp, #52]	; 0x34
 800b55c:	9908      	ldr	r1, [sp, #32]
 800b55e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b562:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b566:	2900      	cmp	r1, #0
 800b568:	d043      	beq.n	800b5f2 <_dtoa_r+0x582>
 800b56a:	494d      	ldr	r1, [pc, #308]	; (800b6a0 <_dtoa_r+0x630>)
 800b56c:	2000      	movs	r0, #0
 800b56e:	f7f5 f96d 	bl	800084c <__aeabi_ddiv>
 800b572:	4652      	mov	r2, sl
 800b574:	465b      	mov	r3, fp
 800b576:	f7f4 fe87 	bl	8000288 <__aeabi_dsub>
 800b57a:	9d01      	ldr	r5, [sp, #4]
 800b57c:	4682      	mov	sl, r0
 800b57e:	468b      	mov	fp, r1
 800b580:	4649      	mov	r1, r9
 800b582:	4640      	mov	r0, r8
 800b584:	f7f5 fae8 	bl	8000b58 <__aeabi_d2iz>
 800b588:	4606      	mov	r6, r0
 800b58a:	f7f4 ffcb 	bl	8000524 <__aeabi_i2d>
 800b58e:	4602      	mov	r2, r0
 800b590:	460b      	mov	r3, r1
 800b592:	4640      	mov	r0, r8
 800b594:	4649      	mov	r1, r9
 800b596:	f7f4 fe77 	bl	8000288 <__aeabi_dsub>
 800b59a:	3630      	adds	r6, #48	; 0x30
 800b59c:	f805 6b01 	strb.w	r6, [r5], #1
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	465b      	mov	r3, fp
 800b5a4:	4680      	mov	r8, r0
 800b5a6:	4689      	mov	r9, r1
 800b5a8:	f7f5 fa98 	bl	8000adc <__aeabi_dcmplt>
 800b5ac:	2800      	cmp	r0, #0
 800b5ae:	d163      	bne.n	800b678 <_dtoa_r+0x608>
 800b5b0:	4642      	mov	r2, r8
 800b5b2:	464b      	mov	r3, r9
 800b5b4:	4936      	ldr	r1, [pc, #216]	; (800b690 <_dtoa_r+0x620>)
 800b5b6:	2000      	movs	r0, #0
 800b5b8:	f7f4 fe66 	bl	8000288 <__aeabi_dsub>
 800b5bc:	4652      	mov	r2, sl
 800b5be:	465b      	mov	r3, fp
 800b5c0:	f7f5 fa8c 	bl	8000adc <__aeabi_dcmplt>
 800b5c4:	2800      	cmp	r0, #0
 800b5c6:	f040 80b5 	bne.w	800b734 <_dtoa_r+0x6c4>
 800b5ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5cc:	429d      	cmp	r5, r3
 800b5ce:	d081      	beq.n	800b4d4 <_dtoa_r+0x464>
 800b5d0:	4b30      	ldr	r3, [pc, #192]	; (800b694 <_dtoa_r+0x624>)
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	4650      	mov	r0, sl
 800b5d6:	4659      	mov	r1, fp
 800b5d8:	f7f5 f80e 	bl	80005f8 <__aeabi_dmul>
 800b5dc:	4b2d      	ldr	r3, [pc, #180]	; (800b694 <_dtoa_r+0x624>)
 800b5de:	4682      	mov	sl, r0
 800b5e0:	468b      	mov	fp, r1
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f7f5 f806 	bl	80005f8 <__aeabi_dmul>
 800b5ec:	4680      	mov	r8, r0
 800b5ee:	4689      	mov	r9, r1
 800b5f0:	e7c6      	b.n	800b580 <_dtoa_r+0x510>
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	f7f4 ffff 	bl	80005f8 <__aeabi_dmul>
 800b5fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5fc:	9d01      	ldr	r5, [sp, #4]
 800b5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800b600:	4682      	mov	sl, r0
 800b602:	468b      	mov	fp, r1
 800b604:	4649      	mov	r1, r9
 800b606:	4640      	mov	r0, r8
 800b608:	f7f5 faa6 	bl	8000b58 <__aeabi_d2iz>
 800b60c:	4606      	mov	r6, r0
 800b60e:	f7f4 ff89 	bl	8000524 <__aeabi_i2d>
 800b612:	3630      	adds	r6, #48	; 0x30
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4640      	mov	r0, r8
 800b61a:	4649      	mov	r1, r9
 800b61c:	f7f4 fe34 	bl	8000288 <__aeabi_dsub>
 800b620:	f805 6b01 	strb.w	r6, [r5], #1
 800b624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b626:	429d      	cmp	r5, r3
 800b628:	4680      	mov	r8, r0
 800b62a:	4689      	mov	r9, r1
 800b62c:	f04f 0200 	mov.w	r2, #0
 800b630:	d124      	bne.n	800b67c <_dtoa_r+0x60c>
 800b632:	4b1b      	ldr	r3, [pc, #108]	; (800b6a0 <_dtoa_r+0x630>)
 800b634:	4650      	mov	r0, sl
 800b636:	4659      	mov	r1, fp
 800b638:	f7f4 fe28 	bl	800028c <__adddf3>
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4640      	mov	r0, r8
 800b642:	4649      	mov	r1, r9
 800b644:	f7f5 fa68 	bl	8000b18 <__aeabi_dcmpgt>
 800b648:	2800      	cmp	r0, #0
 800b64a:	d173      	bne.n	800b734 <_dtoa_r+0x6c4>
 800b64c:	4652      	mov	r2, sl
 800b64e:	465b      	mov	r3, fp
 800b650:	4913      	ldr	r1, [pc, #76]	; (800b6a0 <_dtoa_r+0x630>)
 800b652:	2000      	movs	r0, #0
 800b654:	f7f4 fe18 	bl	8000288 <__aeabi_dsub>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4640      	mov	r0, r8
 800b65e:	4649      	mov	r1, r9
 800b660:	f7f5 fa3c 	bl	8000adc <__aeabi_dcmplt>
 800b664:	2800      	cmp	r0, #0
 800b666:	f43f af35 	beq.w	800b4d4 <_dtoa_r+0x464>
 800b66a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b66c:	1e6b      	subs	r3, r5, #1
 800b66e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b670:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b674:	2b30      	cmp	r3, #48	; 0x30
 800b676:	d0f8      	beq.n	800b66a <_dtoa_r+0x5fa>
 800b678:	9700      	str	r7, [sp, #0]
 800b67a:	e049      	b.n	800b710 <_dtoa_r+0x6a0>
 800b67c:	4b05      	ldr	r3, [pc, #20]	; (800b694 <_dtoa_r+0x624>)
 800b67e:	f7f4 ffbb 	bl	80005f8 <__aeabi_dmul>
 800b682:	4680      	mov	r8, r0
 800b684:	4689      	mov	r9, r1
 800b686:	e7bd      	b.n	800b604 <_dtoa_r+0x594>
 800b688:	0800d860 	.word	0x0800d860
 800b68c:	0800d838 	.word	0x0800d838
 800b690:	3ff00000 	.word	0x3ff00000
 800b694:	40240000 	.word	0x40240000
 800b698:	401c0000 	.word	0x401c0000
 800b69c:	40140000 	.word	0x40140000
 800b6a0:	3fe00000 	.word	0x3fe00000
 800b6a4:	9d01      	ldr	r5, [sp, #4]
 800b6a6:	4656      	mov	r6, sl
 800b6a8:	465f      	mov	r7, fp
 800b6aa:	4642      	mov	r2, r8
 800b6ac:	464b      	mov	r3, r9
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	4639      	mov	r1, r7
 800b6b2:	f7f5 f8cb 	bl	800084c <__aeabi_ddiv>
 800b6b6:	f7f5 fa4f 	bl	8000b58 <__aeabi_d2iz>
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	f7f4 ff32 	bl	8000524 <__aeabi_i2d>
 800b6c0:	4642      	mov	r2, r8
 800b6c2:	464b      	mov	r3, r9
 800b6c4:	f7f4 ff98 	bl	80005f8 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b6d4:	f7f4 fdd8 	bl	8000288 <__aeabi_dsub>
 800b6d8:	f805 6b01 	strb.w	r6, [r5], #1
 800b6dc:	9e01      	ldr	r6, [sp, #4]
 800b6de:	9f03      	ldr	r7, [sp, #12]
 800b6e0:	1bae      	subs	r6, r5, r6
 800b6e2:	42b7      	cmp	r7, r6
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	d135      	bne.n	800b756 <_dtoa_r+0x6e6>
 800b6ea:	f7f4 fdcf 	bl	800028c <__adddf3>
 800b6ee:	4642      	mov	r2, r8
 800b6f0:	464b      	mov	r3, r9
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	f7f5 fa0f 	bl	8000b18 <__aeabi_dcmpgt>
 800b6fa:	b9d0      	cbnz	r0, 800b732 <_dtoa_r+0x6c2>
 800b6fc:	4642      	mov	r2, r8
 800b6fe:	464b      	mov	r3, r9
 800b700:	4630      	mov	r0, r6
 800b702:	4639      	mov	r1, r7
 800b704:	f7f5 f9e0 	bl	8000ac8 <__aeabi_dcmpeq>
 800b708:	b110      	cbz	r0, 800b710 <_dtoa_r+0x6a0>
 800b70a:	f01a 0f01 	tst.w	sl, #1
 800b70e:	d110      	bne.n	800b732 <_dtoa_r+0x6c2>
 800b710:	4620      	mov	r0, r4
 800b712:	ee18 1a10 	vmov	r1, s16
 800b716:	f000 fae5 	bl	800bce4 <_Bfree>
 800b71a:	2300      	movs	r3, #0
 800b71c:	9800      	ldr	r0, [sp, #0]
 800b71e:	702b      	strb	r3, [r5, #0]
 800b720:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b722:	3001      	adds	r0, #1
 800b724:	6018      	str	r0, [r3, #0]
 800b726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f43f acf1 	beq.w	800b110 <_dtoa_r+0xa0>
 800b72e:	601d      	str	r5, [r3, #0]
 800b730:	e4ee      	b.n	800b110 <_dtoa_r+0xa0>
 800b732:	9f00      	ldr	r7, [sp, #0]
 800b734:	462b      	mov	r3, r5
 800b736:	461d      	mov	r5, r3
 800b738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b73c:	2a39      	cmp	r2, #57	; 0x39
 800b73e:	d106      	bne.n	800b74e <_dtoa_r+0x6de>
 800b740:	9a01      	ldr	r2, [sp, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	d1f7      	bne.n	800b736 <_dtoa_r+0x6c6>
 800b746:	9901      	ldr	r1, [sp, #4]
 800b748:	2230      	movs	r2, #48	; 0x30
 800b74a:	3701      	adds	r7, #1
 800b74c:	700a      	strb	r2, [r1, #0]
 800b74e:	781a      	ldrb	r2, [r3, #0]
 800b750:	3201      	adds	r2, #1
 800b752:	701a      	strb	r2, [r3, #0]
 800b754:	e790      	b.n	800b678 <_dtoa_r+0x608>
 800b756:	4ba6      	ldr	r3, [pc, #664]	; (800b9f0 <_dtoa_r+0x980>)
 800b758:	2200      	movs	r2, #0
 800b75a:	f7f4 ff4d 	bl	80005f8 <__aeabi_dmul>
 800b75e:	2200      	movs	r2, #0
 800b760:	2300      	movs	r3, #0
 800b762:	4606      	mov	r6, r0
 800b764:	460f      	mov	r7, r1
 800b766:	f7f5 f9af 	bl	8000ac8 <__aeabi_dcmpeq>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	d09d      	beq.n	800b6aa <_dtoa_r+0x63a>
 800b76e:	e7cf      	b.n	800b710 <_dtoa_r+0x6a0>
 800b770:	9a08      	ldr	r2, [sp, #32]
 800b772:	2a00      	cmp	r2, #0
 800b774:	f000 80d7 	beq.w	800b926 <_dtoa_r+0x8b6>
 800b778:	9a06      	ldr	r2, [sp, #24]
 800b77a:	2a01      	cmp	r2, #1
 800b77c:	f300 80ba 	bgt.w	800b8f4 <_dtoa_r+0x884>
 800b780:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b782:	2a00      	cmp	r2, #0
 800b784:	f000 80b2 	beq.w	800b8ec <_dtoa_r+0x87c>
 800b788:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b78c:	9e07      	ldr	r6, [sp, #28]
 800b78e:	9d04      	ldr	r5, [sp, #16]
 800b790:	9a04      	ldr	r2, [sp, #16]
 800b792:	441a      	add	r2, r3
 800b794:	9204      	str	r2, [sp, #16]
 800b796:	9a05      	ldr	r2, [sp, #20]
 800b798:	2101      	movs	r1, #1
 800b79a:	441a      	add	r2, r3
 800b79c:	4620      	mov	r0, r4
 800b79e:	9205      	str	r2, [sp, #20]
 800b7a0:	f000 fb58 	bl	800be54 <__i2b>
 800b7a4:	4607      	mov	r7, r0
 800b7a6:	2d00      	cmp	r5, #0
 800b7a8:	dd0c      	ble.n	800b7c4 <_dtoa_r+0x754>
 800b7aa:	9b05      	ldr	r3, [sp, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	dd09      	ble.n	800b7c4 <_dtoa_r+0x754>
 800b7b0:	42ab      	cmp	r3, r5
 800b7b2:	9a04      	ldr	r2, [sp, #16]
 800b7b4:	bfa8      	it	ge
 800b7b6:	462b      	movge	r3, r5
 800b7b8:	1ad2      	subs	r2, r2, r3
 800b7ba:	9204      	str	r2, [sp, #16]
 800b7bc:	9a05      	ldr	r2, [sp, #20]
 800b7be:	1aed      	subs	r5, r5, r3
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	9b07      	ldr	r3, [sp, #28]
 800b7c6:	b31b      	cbz	r3, 800b810 <_dtoa_r+0x7a0>
 800b7c8:	9b08      	ldr	r3, [sp, #32]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 80af 	beq.w	800b92e <_dtoa_r+0x8be>
 800b7d0:	2e00      	cmp	r6, #0
 800b7d2:	dd13      	ble.n	800b7fc <_dtoa_r+0x78c>
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	4632      	mov	r2, r6
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 fbfb 	bl	800bfd4 <__pow5mult>
 800b7de:	ee18 2a10 	vmov	r2, s16
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f000 fb4a 	bl	800be80 <__multiply>
 800b7ec:	ee18 1a10 	vmov	r1, s16
 800b7f0:	4680      	mov	r8, r0
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 fa76 	bl	800bce4 <_Bfree>
 800b7f8:	ee08 8a10 	vmov	s16, r8
 800b7fc:	9b07      	ldr	r3, [sp, #28]
 800b7fe:	1b9a      	subs	r2, r3, r6
 800b800:	d006      	beq.n	800b810 <_dtoa_r+0x7a0>
 800b802:	ee18 1a10 	vmov	r1, s16
 800b806:	4620      	mov	r0, r4
 800b808:	f000 fbe4 	bl	800bfd4 <__pow5mult>
 800b80c:	ee08 0a10 	vmov	s16, r0
 800b810:	2101      	movs	r1, #1
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fb1e 	bl	800be54 <__i2b>
 800b818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	4606      	mov	r6, r0
 800b81e:	f340 8088 	ble.w	800b932 <_dtoa_r+0x8c2>
 800b822:	461a      	mov	r2, r3
 800b824:	4601      	mov	r1, r0
 800b826:	4620      	mov	r0, r4
 800b828:	f000 fbd4 	bl	800bfd4 <__pow5mult>
 800b82c:	9b06      	ldr	r3, [sp, #24]
 800b82e:	2b01      	cmp	r3, #1
 800b830:	4606      	mov	r6, r0
 800b832:	f340 8081 	ble.w	800b938 <_dtoa_r+0x8c8>
 800b836:	f04f 0800 	mov.w	r8, #0
 800b83a:	6933      	ldr	r3, [r6, #16]
 800b83c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b840:	6918      	ldr	r0, [r3, #16]
 800b842:	f000 fab7 	bl	800bdb4 <__hi0bits>
 800b846:	f1c0 0020 	rsb	r0, r0, #32
 800b84a:	9b05      	ldr	r3, [sp, #20]
 800b84c:	4418      	add	r0, r3
 800b84e:	f010 001f 	ands.w	r0, r0, #31
 800b852:	f000 8092 	beq.w	800b97a <_dtoa_r+0x90a>
 800b856:	f1c0 0320 	rsb	r3, r0, #32
 800b85a:	2b04      	cmp	r3, #4
 800b85c:	f340 808a 	ble.w	800b974 <_dtoa_r+0x904>
 800b860:	f1c0 001c 	rsb	r0, r0, #28
 800b864:	9b04      	ldr	r3, [sp, #16]
 800b866:	4403      	add	r3, r0
 800b868:	9304      	str	r3, [sp, #16]
 800b86a:	9b05      	ldr	r3, [sp, #20]
 800b86c:	4403      	add	r3, r0
 800b86e:	4405      	add	r5, r0
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	9b04      	ldr	r3, [sp, #16]
 800b874:	2b00      	cmp	r3, #0
 800b876:	dd07      	ble.n	800b888 <_dtoa_r+0x818>
 800b878:	ee18 1a10 	vmov	r1, s16
 800b87c:	461a      	mov	r2, r3
 800b87e:	4620      	mov	r0, r4
 800b880:	f000 fc02 	bl	800c088 <__lshift>
 800b884:	ee08 0a10 	vmov	s16, r0
 800b888:	9b05      	ldr	r3, [sp, #20]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	dd05      	ble.n	800b89a <_dtoa_r+0x82a>
 800b88e:	4631      	mov	r1, r6
 800b890:	461a      	mov	r2, r3
 800b892:	4620      	mov	r0, r4
 800b894:	f000 fbf8 	bl	800c088 <__lshift>
 800b898:	4606      	mov	r6, r0
 800b89a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d06e      	beq.n	800b97e <_dtoa_r+0x90e>
 800b8a0:	ee18 0a10 	vmov	r0, s16
 800b8a4:	4631      	mov	r1, r6
 800b8a6:	f000 fc5f 	bl	800c168 <__mcmp>
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	da67      	bge.n	800b97e <_dtoa_r+0x90e>
 800b8ae:	9b00      	ldr	r3, [sp, #0]
 800b8b0:	3b01      	subs	r3, #1
 800b8b2:	ee18 1a10 	vmov	r1, s16
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	220a      	movs	r2, #10
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f000 fa33 	bl	800bd28 <__multadd>
 800b8c2:	9b08      	ldr	r3, [sp, #32]
 800b8c4:	ee08 0a10 	vmov	s16, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	f000 81b1 	beq.w	800bc30 <_dtoa_r+0xbc0>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	4639      	mov	r1, r7
 800b8d2:	220a      	movs	r2, #10
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f000 fa27 	bl	800bd28 <__multadd>
 800b8da:	9b02      	ldr	r3, [sp, #8]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	4607      	mov	r7, r0
 800b8e0:	f300 808e 	bgt.w	800ba00 <_dtoa_r+0x990>
 800b8e4:	9b06      	ldr	r3, [sp, #24]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	dc51      	bgt.n	800b98e <_dtoa_r+0x91e>
 800b8ea:	e089      	b.n	800ba00 <_dtoa_r+0x990>
 800b8ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b8f2:	e74b      	b.n	800b78c <_dtoa_r+0x71c>
 800b8f4:	9b03      	ldr	r3, [sp, #12]
 800b8f6:	1e5e      	subs	r6, r3, #1
 800b8f8:	9b07      	ldr	r3, [sp, #28]
 800b8fa:	42b3      	cmp	r3, r6
 800b8fc:	bfbf      	itttt	lt
 800b8fe:	9b07      	ldrlt	r3, [sp, #28]
 800b900:	9607      	strlt	r6, [sp, #28]
 800b902:	1af2      	sublt	r2, r6, r3
 800b904:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b906:	bfb6      	itet	lt
 800b908:	189b      	addlt	r3, r3, r2
 800b90a:	1b9e      	subge	r6, r3, r6
 800b90c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b90e:	9b03      	ldr	r3, [sp, #12]
 800b910:	bfb8      	it	lt
 800b912:	2600      	movlt	r6, #0
 800b914:	2b00      	cmp	r3, #0
 800b916:	bfb7      	itett	lt
 800b918:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b91c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b920:	1a9d      	sublt	r5, r3, r2
 800b922:	2300      	movlt	r3, #0
 800b924:	e734      	b.n	800b790 <_dtoa_r+0x720>
 800b926:	9e07      	ldr	r6, [sp, #28]
 800b928:	9d04      	ldr	r5, [sp, #16]
 800b92a:	9f08      	ldr	r7, [sp, #32]
 800b92c:	e73b      	b.n	800b7a6 <_dtoa_r+0x736>
 800b92e:	9a07      	ldr	r2, [sp, #28]
 800b930:	e767      	b.n	800b802 <_dtoa_r+0x792>
 800b932:	9b06      	ldr	r3, [sp, #24]
 800b934:	2b01      	cmp	r3, #1
 800b936:	dc18      	bgt.n	800b96a <_dtoa_r+0x8fa>
 800b938:	f1ba 0f00 	cmp.w	sl, #0
 800b93c:	d115      	bne.n	800b96a <_dtoa_r+0x8fa>
 800b93e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b942:	b993      	cbnz	r3, 800b96a <_dtoa_r+0x8fa>
 800b944:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b948:	0d1b      	lsrs	r3, r3, #20
 800b94a:	051b      	lsls	r3, r3, #20
 800b94c:	b183      	cbz	r3, 800b970 <_dtoa_r+0x900>
 800b94e:	9b04      	ldr	r3, [sp, #16]
 800b950:	3301      	adds	r3, #1
 800b952:	9304      	str	r3, [sp, #16]
 800b954:	9b05      	ldr	r3, [sp, #20]
 800b956:	3301      	adds	r3, #1
 800b958:	9305      	str	r3, [sp, #20]
 800b95a:	f04f 0801 	mov.w	r8, #1
 800b95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b960:	2b00      	cmp	r3, #0
 800b962:	f47f af6a 	bne.w	800b83a <_dtoa_r+0x7ca>
 800b966:	2001      	movs	r0, #1
 800b968:	e76f      	b.n	800b84a <_dtoa_r+0x7da>
 800b96a:	f04f 0800 	mov.w	r8, #0
 800b96e:	e7f6      	b.n	800b95e <_dtoa_r+0x8ee>
 800b970:	4698      	mov	r8, r3
 800b972:	e7f4      	b.n	800b95e <_dtoa_r+0x8ee>
 800b974:	f43f af7d 	beq.w	800b872 <_dtoa_r+0x802>
 800b978:	4618      	mov	r0, r3
 800b97a:	301c      	adds	r0, #28
 800b97c:	e772      	b.n	800b864 <_dtoa_r+0x7f4>
 800b97e:	9b03      	ldr	r3, [sp, #12]
 800b980:	2b00      	cmp	r3, #0
 800b982:	dc37      	bgt.n	800b9f4 <_dtoa_r+0x984>
 800b984:	9b06      	ldr	r3, [sp, #24]
 800b986:	2b02      	cmp	r3, #2
 800b988:	dd34      	ble.n	800b9f4 <_dtoa_r+0x984>
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	9302      	str	r3, [sp, #8]
 800b98e:	9b02      	ldr	r3, [sp, #8]
 800b990:	b96b      	cbnz	r3, 800b9ae <_dtoa_r+0x93e>
 800b992:	4631      	mov	r1, r6
 800b994:	2205      	movs	r2, #5
 800b996:	4620      	mov	r0, r4
 800b998:	f000 f9c6 	bl	800bd28 <__multadd>
 800b99c:	4601      	mov	r1, r0
 800b99e:	4606      	mov	r6, r0
 800b9a0:	ee18 0a10 	vmov	r0, s16
 800b9a4:	f000 fbe0 	bl	800c168 <__mcmp>
 800b9a8:	2800      	cmp	r0, #0
 800b9aa:	f73f adbb 	bgt.w	800b524 <_dtoa_r+0x4b4>
 800b9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9b0:	9d01      	ldr	r5, [sp, #4]
 800b9b2:	43db      	mvns	r3, r3
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	f04f 0800 	mov.w	r8, #0
 800b9ba:	4631      	mov	r1, r6
 800b9bc:	4620      	mov	r0, r4
 800b9be:	f000 f991 	bl	800bce4 <_Bfree>
 800b9c2:	2f00      	cmp	r7, #0
 800b9c4:	f43f aea4 	beq.w	800b710 <_dtoa_r+0x6a0>
 800b9c8:	f1b8 0f00 	cmp.w	r8, #0
 800b9cc:	d005      	beq.n	800b9da <_dtoa_r+0x96a>
 800b9ce:	45b8      	cmp	r8, r7
 800b9d0:	d003      	beq.n	800b9da <_dtoa_r+0x96a>
 800b9d2:	4641      	mov	r1, r8
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	f000 f985 	bl	800bce4 <_Bfree>
 800b9da:	4639      	mov	r1, r7
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f000 f981 	bl	800bce4 <_Bfree>
 800b9e2:	e695      	b.n	800b710 <_dtoa_r+0x6a0>
 800b9e4:	2600      	movs	r6, #0
 800b9e6:	4637      	mov	r7, r6
 800b9e8:	e7e1      	b.n	800b9ae <_dtoa_r+0x93e>
 800b9ea:	9700      	str	r7, [sp, #0]
 800b9ec:	4637      	mov	r7, r6
 800b9ee:	e599      	b.n	800b524 <_dtoa_r+0x4b4>
 800b9f0:	40240000 	.word	0x40240000
 800b9f4:	9b08      	ldr	r3, [sp, #32]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	f000 80ca 	beq.w	800bb90 <_dtoa_r+0xb20>
 800b9fc:	9b03      	ldr	r3, [sp, #12]
 800b9fe:	9302      	str	r3, [sp, #8]
 800ba00:	2d00      	cmp	r5, #0
 800ba02:	dd05      	ble.n	800ba10 <_dtoa_r+0x9a0>
 800ba04:	4639      	mov	r1, r7
 800ba06:	462a      	mov	r2, r5
 800ba08:	4620      	mov	r0, r4
 800ba0a:	f000 fb3d 	bl	800c088 <__lshift>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	f1b8 0f00 	cmp.w	r8, #0
 800ba14:	d05b      	beq.n	800bace <_dtoa_r+0xa5e>
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	4620      	mov	r0, r4
 800ba1a:	f000 f923 	bl	800bc64 <_Balloc>
 800ba1e:	4605      	mov	r5, r0
 800ba20:	b928      	cbnz	r0, 800ba2e <_dtoa_r+0x9be>
 800ba22:	4b87      	ldr	r3, [pc, #540]	; (800bc40 <_dtoa_r+0xbd0>)
 800ba24:	4602      	mov	r2, r0
 800ba26:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba2a:	f7ff bb3b 	b.w	800b0a4 <_dtoa_r+0x34>
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	3202      	adds	r2, #2
 800ba32:	0092      	lsls	r2, r2, #2
 800ba34:	f107 010c 	add.w	r1, r7, #12
 800ba38:	300c      	adds	r0, #12
 800ba3a:	f7fe fda1 	bl	800a580 <memcpy>
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4629      	mov	r1, r5
 800ba42:	4620      	mov	r0, r4
 800ba44:	f000 fb20 	bl	800c088 <__lshift>
 800ba48:	9b01      	ldr	r3, [sp, #4]
 800ba4a:	f103 0901 	add.w	r9, r3, #1
 800ba4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ba52:	4413      	add	r3, r2
 800ba54:	9305      	str	r3, [sp, #20]
 800ba56:	f00a 0301 	and.w	r3, sl, #1
 800ba5a:	46b8      	mov	r8, r7
 800ba5c:	9304      	str	r3, [sp, #16]
 800ba5e:	4607      	mov	r7, r0
 800ba60:	4631      	mov	r1, r6
 800ba62:	ee18 0a10 	vmov	r0, s16
 800ba66:	f7ff fa77 	bl	800af58 <quorem>
 800ba6a:	4641      	mov	r1, r8
 800ba6c:	9002      	str	r0, [sp, #8]
 800ba6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba72:	ee18 0a10 	vmov	r0, s16
 800ba76:	f000 fb77 	bl	800c168 <__mcmp>
 800ba7a:	463a      	mov	r2, r7
 800ba7c:	9003      	str	r0, [sp, #12]
 800ba7e:	4631      	mov	r1, r6
 800ba80:	4620      	mov	r0, r4
 800ba82:	f000 fb8d 	bl	800c1a0 <__mdiff>
 800ba86:	68c2      	ldr	r2, [r0, #12]
 800ba88:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800ba8c:	4605      	mov	r5, r0
 800ba8e:	bb02      	cbnz	r2, 800bad2 <_dtoa_r+0xa62>
 800ba90:	4601      	mov	r1, r0
 800ba92:	ee18 0a10 	vmov	r0, s16
 800ba96:	f000 fb67 	bl	800c168 <__mcmp>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	4629      	mov	r1, r5
 800ba9e:	4620      	mov	r0, r4
 800baa0:	9207      	str	r2, [sp, #28]
 800baa2:	f000 f91f 	bl	800bce4 <_Bfree>
 800baa6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800baaa:	ea43 0102 	orr.w	r1, r3, r2
 800baae:	9b04      	ldr	r3, [sp, #16]
 800bab0:	430b      	orrs	r3, r1
 800bab2:	464d      	mov	r5, r9
 800bab4:	d10f      	bne.n	800bad6 <_dtoa_r+0xa66>
 800bab6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800baba:	d02a      	beq.n	800bb12 <_dtoa_r+0xaa2>
 800babc:	9b03      	ldr	r3, [sp, #12]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	dd02      	ble.n	800bac8 <_dtoa_r+0xa58>
 800bac2:	9b02      	ldr	r3, [sp, #8]
 800bac4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bac8:	f88b a000 	strb.w	sl, [fp]
 800bacc:	e775      	b.n	800b9ba <_dtoa_r+0x94a>
 800bace:	4638      	mov	r0, r7
 800bad0:	e7ba      	b.n	800ba48 <_dtoa_r+0x9d8>
 800bad2:	2201      	movs	r2, #1
 800bad4:	e7e2      	b.n	800ba9c <_dtoa_r+0xa2c>
 800bad6:	9b03      	ldr	r3, [sp, #12]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	db04      	blt.n	800bae6 <_dtoa_r+0xa76>
 800badc:	9906      	ldr	r1, [sp, #24]
 800bade:	430b      	orrs	r3, r1
 800bae0:	9904      	ldr	r1, [sp, #16]
 800bae2:	430b      	orrs	r3, r1
 800bae4:	d122      	bne.n	800bb2c <_dtoa_r+0xabc>
 800bae6:	2a00      	cmp	r2, #0
 800bae8:	ddee      	ble.n	800bac8 <_dtoa_r+0xa58>
 800baea:	ee18 1a10 	vmov	r1, s16
 800baee:	2201      	movs	r2, #1
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 fac9 	bl	800c088 <__lshift>
 800baf6:	4631      	mov	r1, r6
 800baf8:	ee08 0a10 	vmov	s16, r0
 800bafc:	f000 fb34 	bl	800c168 <__mcmp>
 800bb00:	2800      	cmp	r0, #0
 800bb02:	dc03      	bgt.n	800bb0c <_dtoa_r+0xa9c>
 800bb04:	d1e0      	bne.n	800bac8 <_dtoa_r+0xa58>
 800bb06:	f01a 0f01 	tst.w	sl, #1
 800bb0a:	d0dd      	beq.n	800bac8 <_dtoa_r+0xa58>
 800bb0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb10:	d1d7      	bne.n	800bac2 <_dtoa_r+0xa52>
 800bb12:	2339      	movs	r3, #57	; 0x39
 800bb14:	f88b 3000 	strb.w	r3, [fp]
 800bb18:	462b      	mov	r3, r5
 800bb1a:	461d      	mov	r5, r3
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bb22:	2a39      	cmp	r2, #57	; 0x39
 800bb24:	d071      	beq.n	800bc0a <_dtoa_r+0xb9a>
 800bb26:	3201      	adds	r2, #1
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	e746      	b.n	800b9ba <_dtoa_r+0x94a>
 800bb2c:	2a00      	cmp	r2, #0
 800bb2e:	dd07      	ble.n	800bb40 <_dtoa_r+0xad0>
 800bb30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bb34:	d0ed      	beq.n	800bb12 <_dtoa_r+0xaa2>
 800bb36:	f10a 0301 	add.w	r3, sl, #1
 800bb3a:	f88b 3000 	strb.w	r3, [fp]
 800bb3e:	e73c      	b.n	800b9ba <_dtoa_r+0x94a>
 800bb40:	9b05      	ldr	r3, [sp, #20]
 800bb42:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bb46:	4599      	cmp	r9, r3
 800bb48:	d047      	beq.n	800bbda <_dtoa_r+0xb6a>
 800bb4a:	ee18 1a10 	vmov	r1, s16
 800bb4e:	2300      	movs	r3, #0
 800bb50:	220a      	movs	r2, #10
 800bb52:	4620      	mov	r0, r4
 800bb54:	f000 f8e8 	bl	800bd28 <__multadd>
 800bb58:	45b8      	cmp	r8, r7
 800bb5a:	ee08 0a10 	vmov	s16, r0
 800bb5e:	f04f 0300 	mov.w	r3, #0
 800bb62:	f04f 020a 	mov.w	r2, #10
 800bb66:	4641      	mov	r1, r8
 800bb68:	4620      	mov	r0, r4
 800bb6a:	d106      	bne.n	800bb7a <_dtoa_r+0xb0a>
 800bb6c:	f000 f8dc 	bl	800bd28 <__multadd>
 800bb70:	4680      	mov	r8, r0
 800bb72:	4607      	mov	r7, r0
 800bb74:	f109 0901 	add.w	r9, r9, #1
 800bb78:	e772      	b.n	800ba60 <_dtoa_r+0x9f0>
 800bb7a:	f000 f8d5 	bl	800bd28 <__multadd>
 800bb7e:	4639      	mov	r1, r7
 800bb80:	4680      	mov	r8, r0
 800bb82:	2300      	movs	r3, #0
 800bb84:	220a      	movs	r2, #10
 800bb86:	4620      	mov	r0, r4
 800bb88:	f000 f8ce 	bl	800bd28 <__multadd>
 800bb8c:	4607      	mov	r7, r0
 800bb8e:	e7f1      	b.n	800bb74 <_dtoa_r+0xb04>
 800bb90:	9b03      	ldr	r3, [sp, #12]
 800bb92:	9302      	str	r3, [sp, #8]
 800bb94:	9d01      	ldr	r5, [sp, #4]
 800bb96:	ee18 0a10 	vmov	r0, s16
 800bb9a:	4631      	mov	r1, r6
 800bb9c:	f7ff f9dc 	bl	800af58 <quorem>
 800bba0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bba4:	9b01      	ldr	r3, [sp, #4]
 800bba6:	f805 ab01 	strb.w	sl, [r5], #1
 800bbaa:	1aea      	subs	r2, r5, r3
 800bbac:	9b02      	ldr	r3, [sp, #8]
 800bbae:	4293      	cmp	r3, r2
 800bbb0:	dd09      	ble.n	800bbc6 <_dtoa_r+0xb56>
 800bbb2:	ee18 1a10 	vmov	r1, s16
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	220a      	movs	r2, #10
 800bbba:	4620      	mov	r0, r4
 800bbbc:	f000 f8b4 	bl	800bd28 <__multadd>
 800bbc0:	ee08 0a10 	vmov	s16, r0
 800bbc4:	e7e7      	b.n	800bb96 <_dtoa_r+0xb26>
 800bbc6:	9b02      	ldr	r3, [sp, #8]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	bfc8      	it	gt
 800bbcc:	461d      	movgt	r5, r3
 800bbce:	9b01      	ldr	r3, [sp, #4]
 800bbd0:	bfd8      	it	le
 800bbd2:	2501      	movle	r5, #1
 800bbd4:	441d      	add	r5, r3
 800bbd6:	f04f 0800 	mov.w	r8, #0
 800bbda:	ee18 1a10 	vmov	r1, s16
 800bbde:	2201      	movs	r2, #1
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	f000 fa51 	bl	800c088 <__lshift>
 800bbe6:	4631      	mov	r1, r6
 800bbe8:	ee08 0a10 	vmov	s16, r0
 800bbec:	f000 fabc 	bl	800c168 <__mcmp>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	dc91      	bgt.n	800bb18 <_dtoa_r+0xaa8>
 800bbf4:	d102      	bne.n	800bbfc <_dtoa_r+0xb8c>
 800bbf6:	f01a 0f01 	tst.w	sl, #1
 800bbfa:	d18d      	bne.n	800bb18 <_dtoa_r+0xaa8>
 800bbfc:	462b      	mov	r3, r5
 800bbfe:	461d      	mov	r5, r3
 800bc00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc04:	2a30      	cmp	r2, #48	; 0x30
 800bc06:	d0fa      	beq.n	800bbfe <_dtoa_r+0xb8e>
 800bc08:	e6d7      	b.n	800b9ba <_dtoa_r+0x94a>
 800bc0a:	9a01      	ldr	r2, [sp, #4]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d184      	bne.n	800bb1a <_dtoa_r+0xaaa>
 800bc10:	9b00      	ldr	r3, [sp, #0]
 800bc12:	3301      	adds	r3, #1
 800bc14:	9300      	str	r3, [sp, #0]
 800bc16:	2331      	movs	r3, #49	; 0x31
 800bc18:	7013      	strb	r3, [r2, #0]
 800bc1a:	e6ce      	b.n	800b9ba <_dtoa_r+0x94a>
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <_dtoa_r+0xbd4>)
 800bc1e:	f7ff ba95 	b.w	800b14c <_dtoa_r+0xdc>
 800bc22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f47f aa6e 	bne.w	800b106 <_dtoa_r+0x96>
 800bc2a:	4b07      	ldr	r3, [pc, #28]	; (800bc48 <_dtoa_r+0xbd8>)
 800bc2c:	f7ff ba8e 	b.w	800b14c <_dtoa_r+0xdc>
 800bc30:	9b02      	ldr	r3, [sp, #8]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dcae      	bgt.n	800bb94 <_dtoa_r+0xb24>
 800bc36:	9b06      	ldr	r3, [sp, #24]
 800bc38:	2b02      	cmp	r3, #2
 800bc3a:	f73f aea8 	bgt.w	800b98e <_dtoa_r+0x91e>
 800bc3e:	e7a9      	b.n	800bb94 <_dtoa_r+0xb24>
 800bc40:	0800d7c7 	.word	0x0800d7c7
 800bc44:	0800d724 	.word	0x0800d724
 800bc48:	0800d748 	.word	0x0800d748

0800bc4c <_localeconv_r>:
 800bc4c:	4800      	ldr	r0, [pc, #0]	; (800bc50 <_localeconv_r+0x4>)
 800bc4e:	4770      	bx	lr
 800bc50:	20000164 	.word	0x20000164

0800bc54 <malloc>:
 800bc54:	4b02      	ldr	r3, [pc, #8]	; (800bc60 <malloc+0xc>)
 800bc56:	4601      	mov	r1, r0
 800bc58:	6818      	ldr	r0, [r3, #0]
 800bc5a:	f000 bc09 	b.w	800c470 <_malloc_r>
 800bc5e:	bf00      	nop
 800bc60:	20000010 	.word	0x20000010

0800bc64 <_Balloc>:
 800bc64:	b570      	push	{r4, r5, r6, lr}
 800bc66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	b976      	cbnz	r6, 800bc8c <_Balloc+0x28>
 800bc6e:	2010      	movs	r0, #16
 800bc70:	f7ff fff0 	bl	800bc54 <malloc>
 800bc74:	4602      	mov	r2, r0
 800bc76:	6260      	str	r0, [r4, #36]	; 0x24
 800bc78:	b920      	cbnz	r0, 800bc84 <_Balloc+0x20>
 800bc7a:	4b18      	ldr	r3, [pc, #96]	; (800bcdc <_Balloc+0x78>)
 800bc7c:	4818      	ldr	r0, [pc, #96]	; (800bce0 <_Balloc+0x7c>)
 800bc7e:	2166      	movs	r1, #102	; 0x66
 800bc80:	f000 fe04 	bl	800c88c <__assert_func>
 800bc84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc88:	6006      	str	r6, [r0, #0]
 800bc8a:	60c6      	str	r6, [r0, #12]
 800bc8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc8e:	68f3      	ldr	r3, [r6, #12]
 800bc90:	b183      	cbz	r3, 800bcb4 <_Balloc+0x50>
 800bc92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc94:	68db      	ldr	r3, [r3, #12]
 800bc96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc9a:	b9b8      	cbnz	r0, 800bccc <_Balloc+0x68>
 800bc9c:	2101      	movs	r1, #1
 800bc9e:	fa01 f605 	lsl.w	r6, r1, r5
 800bca2:	1d72      	adds	r2, r6, #5
 800bca4:	0092      	lsls	r2, r2, #2
 800bca6:	4620      	mov	r0, r4
 800bca8:	f000 fb60 	bl	800c36c <_calloc_r>
 800bcac:	b160      	cbz	r0, 800bcc8 <_Balloc+0x64>
 800bcae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bcb2:	e00e      	b.n	800bcd2 <_Balloc+0x6e>
 800bcb4:	2221      	movs	r2, #33	; 0x21
 800bcb6:	2104      	movs	r1, #4
 800bcb8:	4620      	mov	r0, r4
 800bcba:	f000 fb57 	bl	800c36c <_calloc_r>
 800bcbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bcc0:	60f0      	str	r0, [r6, #12]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d1e4      	bne.n	800bc92 <_Balloc+0x2e>
 800bcc8:	2000      	movs	r0, #0
 800bcca:	bd70      	pop	{r4, r5, r6, pc}
 800bccc:	6802      	ldr	r2, [r0, #0]
 800bcce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bcd8:	e7f7      	b.n	800bcca <_Balloc+0x66>
 800bcda:	bf00      	nop
 800bcdc:	0800d755 	.word	0x0800d755
 800bce0:	0800d7d8 	.word	0x0800d7d8

0800bce4 <_Bfree>:
 800bce4:	b570      	push	{r4, r5, r6, lr}
 800bce6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bce8:	4605      	mov	r5, r0
 800bcea:	460c      	mov	r4, r1
 800bcec:	b976      	cbnz	r6, 800bd0c <_Bfree+0x28>
 800bcee:	2010      	movs	r0, #16
 800bcf0:	f7ff ffb0 	bl	800bc54 <malloc>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	6268      	str	r0, [r5, #36]	; 0x24
 800bcf8:	b920      	cbnz	r0, 800bd04 <_Bfree+0x20>
 800bcfa:	4b09      	ldr	r3, [pc, #36]	; (800bd20 <_Bfree+0x3c>)
 800bcfc:	4809      	ldr	r0, [pc, #36]	; (800bd24 <_Bfree+0x40>)
 800bcfe:	218a      	movs	r1, #138	; 0x8a
 800bd00:	f000 fdc4 	bl	800c88c <__assert_func>
 800bd04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd08:	6006      	str	r6, [r0, #0]
 800bd0a:	60c6      	str	r6, [r0, #12]
 800bd0c:	b13c      	cbz	r4, 800bd1e <_Bfree+0x3a>
 800bd0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bd10:	6862      	ldr	r2, [r4, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd18:	6021      	str	r1, [r4, #0]
 800bd1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd1e:	bd70      	pop	{r4, r5, r6, pc}
 800bd20:	0800d755 	.word	0x0800d755
 800bd24:	0800d7d8 	.word	0x0800d7d8

0800bd28 <__multadd>:
 800bd28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2c:	690d      	ldr	r5, [r1, #16]
 800bd2e:	4607      	mov	r7, r0
 800bd30:	460c      	mov	r4, r1
 800bd32:	461e      	mov	r6, r3
 800bd34:	f101 0c14 	add.w	ip, r1, #20
 800bd38:	2000      	movs	r0, #0
 800bd3a:	f8dc 3000 	ldr.w	r3, [ip]
 800bd3e:	b299      	uxth	r1, r3
 800bd40:	fb02 6101 	mla	r1, r2, r1, r6
 800bd44:	0c1e      	lsrs	r6, r3, #16
 800bd46:	0c0b      	lsrs	r3, r1, #16
 800bd48:	fb02 3306 	mla	r3, r2, r6, r3
 800bd4c:	b289      	uxth	r1, r1
 800bd4e:	3001      	adds	r0, #1
 800bd50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bd54:	4285      	cmp	r5, r0
 800bd56:	f84c 1b04 	str.w	r1, [ip], #4
 800bd5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bd5e:	dcec      	bgt.n	800bd3a <__multadd+0x12>
 800bd60:	b30e      	cbz	r6, 800bda6 <__multadd+0x7e>
 800bd62:	68a3      	ldr	r3, [r4, #8]
 800bd64:	42ab      	cmp	r3, r5
 800bd66:	dc19      	bgt.n	800bd9c <__multadd+0x74>
 800bd68:	6861      	ldr	r1, [r4, #4]
 800bd6a:	4638      	mov	r0, r7
 800bd6c:	3101      	adds	r1, #1
 800bd6e:	f7ff ff79 	bl	800bc64 <_Balloc>
 800bd72:	4680      	mov	r8, r0
 800bd74:	b928      	cbnz	r0, 800bd82 <__multadd+0x5a>
 800bd76:	4602      	mov	r2, r0
 800bd78:	4b0c      	ldr	r3, [pc, #48]	; (800bdac <__multadd+0x84>)
 800bd7a:	480d      	ldr	r0, [pc, #52]	; (800bdb0 <__multadd+0x88>)
 800bd7c:	21b5      	movs	r1, #181	; 0xb5
 800bd7e:	f000 fd85 	bl	800c88c <__assert_func>
 800bd82:	6922      	ldr	r2, [r4, #16]
 800bd84:	3202      	adds	r2, #2
 800bd86:	f104 010c 	add.w	r1, r4, #12
 800bd8a:	0092      	lsls	r2, r2, #2
 800bd8c:	300c      	adds	r0, #12
 800bd8e:	f7fe fbf7 	bl	800a580 <memcpy>
 800bd92:	4621      	mov	r1, r4
 800bd94:	4638      	mov	r0, r7
 800bd96:	f7ff ffa5 	bl	800bce4 <_Bfree>
 800bd9a:	4644      	mov	r4, r8
 800bd9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bda0:	3501      	adds	r5, #1
 800bda2:	615e      	str	r6, [r3, #20]
 800bda4:	6125      	str	r5, [r4, #16]
 800bda6:	4620      	mov	r0, r4
 800bda8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdac:	0800d7c7 	.word	0x0800d7c7
 800bdb0:	0800d7d8 	.word	0x0800d7d8

0800bdb4 <__hi0bits>:
 800bdb4:	0c03      	lsrs	r3, r0, #16
 800bdb6:	041b      	lsls	r3, r3, #16
 800bdb8:	b9d3      	cbnz	r3, 800bdf0 <__hi0bits+0x3c>
 800bdba:	0400      	lsls	r0, r0, #16
 800bdbc:	2310      	movs	r3, #16
 800bdbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bdc2:	bf04      	itt	eq
 800bdc4:	0200      	lsleq	r0, r0, #8
 800bdc6:	3308      	addeq	r3, #8
 800bdc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bdcc:	bf04      	itt	eq
 800bdce:	0100      	lsleq	r0, r0, #4
 800bdd0:	3304      	addeq	r3, #4
 800bdd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdd6:	bf04      	itt	eq
 800bdd8:	0080      	lsleq	r0, r0, #2
 800bdda:	3302      	addeq	r3, #2
 800bddc:	2800      	cmp	r0, #0
 800bdde:	db05      	blt.n	800bdec <__hi0bits+0x38>
 800bde0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bde4:	f103 0301 	add.w	r3, r3, #1
 800bde8:	bf08      	it	eq
 800bdea:	2320      	moveq	r3, #32
 800bdec:	4618      	mov	r0, r3
 800bdee:	4770      	bx	lr
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	e7e4      	b.n	800bdbe <__hi0bits+0xa>

0800bdf4 <__lo0bits>:
 800bdf4:	6803      	ldr	r3, [r0, #0]
 800bdf6:	f013 0207 	ands.w	r2, r3, #7
 800bdfa:	4601      	mov	r1, r0
 800bdfc:	d00b      	beq.n	800be16 <__lo0bits+0x22>
 800bdfe:	07da      	lsls	r2, r3, #31
 800be00:	d423      	bmi.n	800be4a <__lo0bits+0x56>
 800be02:	0798      	lsls	r0, r3, #30
 800be04:	bf49      	itett	mi
 800be06:	085b      	lsrmi	r3, r3, #1
 800be08:	089b      	lsrpl	r3, r3, #2
 800be0a:	2001      	movmi	r0, #1
 800be0c:	600b      	strmi	r3, [r1, #0]
 800be0e:	bf5c      	itt	pl
 800be10:	600b      	strpl	r3, [r1, #0]
 800be12:	2002      	movpl	r0, #2
 800be14:	4770      	bx	lr
 800be16:	b298      	uxth	r0, r3
 800be18:	b9a8      	cbnz	r0, 800be46 <__lo0bits+0x52>
 800be1a:	0c1b      	lsrs	r3, r3, #16
 800be1c:	2010      	movs	r0, #16
 800be1e:	b2da      	uxtb	r2, r3
 800be20:	b90a      	cbnz	r2, 800be26 <__lo0bits+0x32>
 800be22:	3008      	adds	r0, #8
 800be24:	0a1b      	lsrs	r3, r3, #8
 800be26:	071a      	lsls	r2, r3, #28
 800be28:	bf04      	itt	eq
 800be2a:	091b      	lsreq	r3, r3, #4
 800be2c:	3004      	addeq	r0, #4
 800be2e:	079a      	lsls	r2, r3, #30
 800be30:	bf04      	itt	eq
 800be32:	089b      	lsreq	r3, r3, #2
 800be34:	3002      	addeq	r0, #2
 800be36:	07da      	lsls	r2, r3, #31
 800be38:	d403      	bmi.n	800be42 <__lo0bits+0x4e>
 800be3a:	085b      	lsrs	r3, r3, #1
 800be3c:	f100 0001 	add.w	r0, r0, #1
 800be40:	d005      	beq.n	800be4e <__lo0bits+0x5a>
 800be42:	600b      	str	r3, [r1, #0]
 800be44:	4770      	bx	lr
 800be46:	4610      	mov	r0, r2
 800be48:	e7e9      	b.n	800be1e <__lo0bits+0x2a>
 800be4a:	2000      	movs	r0, #0
 800be4c:	4770      	bx	lr
 800be4e:	2020      	movs	r0, #32
 800be50:	4770      	bx	lr
	...

0800be54 <__i2b>:
 800be54:	b510      	push	{r4, lr}
 800be56:	460c      	mov	r4, r1
 800be58:	2101      	movs	r1, #1
 800be5a:	f7ff ff03 	bl	800bc64 <_Balloc>
 800be5e:	4602      	mov	r2, r0
 800be60:	b928      	cbnz	r0, 800be6e <__i2b+0x1a>
 800be62:	4b05      	ldr	r3, [pc, #20]	; (800be78 <__i2b+0x24>)
 800be64:	4805      	ldr	r0, [pc, #20]	; (800be7c <__i2b+0x28>)
 800be66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be6a:	f000 fd0f 	bl	800c88c <__assert_func>
 800be6e:	2301      	movs	r3, #1
 800be70:	6144      	str	r4, [r0, #20]
 800be72:	6103      	str	r3, [r0, #16]
 800be74:	bd10      	pop	{r4, pc}
 800be76:	bf00      	nop
 800be78:	0800d7c7 	.word	0x0800d7c7
 800be7c:	0800d7d8 	.word	0x0800d7d8

0800be80 <__multiply>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4691      	mov	r9, r2
 800be86:	690a      	ldr	r2, [r1, #16]
 800be88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	bfb8      	it	lt
 800be90:	460b      	movlt	r3, r1
 800be92:	460c      	mov	r4, r1
 800be94:	bfbc      	itt	lt
 800be96:	464c      	movlt	r4, r9
 800be98:	4699      	movlt	r9, r3
 800be9a:	6927      	ldr	r7, [r4, #16]
 800be9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bea0:	68a3      	ldr	r3, [r4, #8]
 800bea2:	6861      	ldr	r1, [r4, #4]
 800bea4:	eb07 060a 	add.w	r6, r7, sl
 800bea8:	42b3      	cmp	r3, r6
 800beaa:	b085      	sub	sp, #20
 800beac:	bfb8      	it	lt
 800beae:	3101      	addlt	r1, #1
 800beb0:	f7ff fed8 	bl	800bc64 <_Balloc>
 800beb4:	b930      	cbnz	r0, 800bec4 <__multiply+0x44>
 800beb6:	4602      	mov	r2, r0
 800beb8:	4b44      	ldr	r3, [pc, #272]	; (800bfcc <__multiply+0x14c>)
 800beba:	4845      	ldr	r0, [pc, #276]	; (800bfd0 <__multiply+0x150>)
 800bebc:	f240 115d 	movw	r1, #349	; 0x15d
 800bec0:	f000 fce4 	bl	800c88c <__assert_func>
 800bec4:	f100 0514 	add.w	r5, r0, #20
 800bec8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800becc:	462b      	mov	r3, r5
 800bece:	2200      	movs	r2, #0
 800bed0:	4543      	cmp	r3, r8
 800bed2:	d321      	bcc.n	800bf18 <__multiply+0x98>
 800bed4:	f104 0314 	add.w	r3, r4, #20
 800bed8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bedc:	f109 0314 	add.w	r3, r9, #20
 800bee0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bee4:	9202      	str	r2, [sp, #8]
 800bee6:	1b3a      	subs	r2, r7, r4
 800bee8:	3a15      	subs	r2, #21
 800beea:	f022 0203 	bic.w	r2, r2, #3
 800beee:	3204      	adds	r2, #4
 800bef0:	f104 0115 	add.w	r1, r4, #21
 800bef4:	428f      	cmp	r7, r1
 800bef6:	bf38      	it	cc
 800bef8:	2204      	movcc	r2, #4
 800befa:	9201      	str	r2, [sp, #4]
 800befc:	9a02      	ldr	r2, [sp, #8]
 800befe:	9303      	str	r3, [sp, #12]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d80c      	bhi.n	800bf1e <__multiply+0x9e>
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	dd03      	ble.n	800bf10 <__multiply+0x90>
 800bf08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d05a      	beq.n	800bfc6 <__multiply+0x146>
 800bf10:	6106      	str	r6, [r0, #16]
 800bf12:	b005      	add	sp, #20
 800bf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf18:	f843 2b04 	str.w	r2, [r3], #4
 800bf1c:	e7d8      	b.n	800bed0 <__multiply+0x50>
 800bf1e:	f8b3 a000 	ldrh.w	sl, [r3]
 800bf22:	f1ba 0f00 	cmp.w	sl, #0
 800bf26:	d024      	beq.n	800bf72 <__multiply+0xf2>
 800bf28:	f104 0e14 	add.w	lr, r4, #20
 800bf2c:	46a9      	mov	r9, r5
 800bf2e:	f04f 0c00 	mov.w	ip, #0
 800bf32:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bf36:	f8d9 1000 	ldr.w	r1, [r9]
 800bf3a:	fa1f fb82 	uxth.w	fp, r2
 800bf3e:	b289      	uxth	r1, r1
 800bf40:	fb0a 110b 	mla	r1, sl, fp, r1
 800bf44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bf48:	f8d9 2000 	ldr.w	r2, [r9]
 800bf4c:	4461      	add	r1, ip
 800bf4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf52:	fb0a c20b 	mla	r2, sl, fp, ip
 800bf56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bf5a:	b289      	uxth	r1, r1
 800bf5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bf60:	4577      	cmp	r7, lr
 800bf62:	f849 1b04 	str.w	r1, [r9], #4
 800bf66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bf6a:	d8e2      	bhi.n	800bf32 <__multiply+0xb2>
 800bf6c:	9a01      	ldr	r2, [sp, #4]
 800bf6e:	f845 c002 	str.w	ip, [r5, r2]
 800bf72:	9a03      	ldr	r2, [sp, #12]
 800bf74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf78:	3304      	adds	r3, #4
 800bf7a:	f1b9 0f00 	cmp.w	r9, #0
 800bf7e:	d020      	beq.n	800bfc2 <__multiply+0x142>
 800bf80:	6829      	ldr	r1, [r5, #0]
 800bf82:	f104 0c14 	add.w	ip, r4, #20
 800bf86:	46ae      	mov	lr, r5
 800bf88:	f04f 0a00 	mov.w	sl, #0
 800bf8c:	f8bc b000 	ldrh.w	fp, [ip]
 800bf90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bf94:	fb09 220b 	mla	r2, r9, fp, r2
 800bf98:	4492      	add	sl, r2
 800bf9a:	b289      	uxth	r1, r1
 800bf9c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bfa0:	f84e 1b04 	str.w	r1, [lr], #4
 800bfa4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bfa8:	f8be 1000 	ldrh.w	r1, [lr]
 800bfac:	0c12      	lsrs	r2, r2, #16
 800bfae:	fb09 1102 	mla	r1, r9, r2, r1
 800bfb2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bfb6:	4567      	cmp	r7, ip
 800bfb8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bfbc:	d8e6      	bhi.n	800bf8c <__multiply+0x10c>
 800bfbe:	9a01      	ldr	r2, [sp, #4]
 800bfc0:	50a9      	str	r1, [r5, r2]
 800bfc2:	3504      	adds	r5, #4
 800bfc4:	e79a      	b.n	800befc <__multiply+0x7c>
 800bfc6:	3e01      	subs	r6, #1
 800bfc8:	e79c      	b.n	800bf04 <__multiply+0x84>
 800bfca:	bf00      	nop
 800bfcc:	0800d7c7 	.word	0x0800d7c7
 800bfd0:	0800d7d8 	.word	0x0800d7d8

0800bfd4 <__pow5mult>:
 800bfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfd8:	4615      	mov	r5, r2
 800bfda:	f012 0203 	ands.w	r2, r2, #3
 800bfde:	4606      	mov	r6, r0
 800bfe0:	460f      	mov	r7, r1
 800bfe2:	d007      	beq.n	800bff4 <__pow5mult+0x20>
 800bfe4:	4c25      	ldr	r4, [pc, #148]	; (800c07c <__pow5mult+0xa8>)
 800bfe6:	3a01      	subs	r2, #1
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfee:	f7ff fe9b 	bl	800bd28 <__multadd>
 800bff2:	4607      	mov	r7, r0
 800bff4:	10ad      	asrs	r5, r5, #2
 800bff6:	d03d      	beq.n	800c074 <__pow5mult+0xa0>
 800bff8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bffa:	b97c      	cbnz	r4, 800c01c <__pow5mult+0x48>
 800bffc:	2010      	movs	r0, #16
 800bffe:	f7ff fe29 	bl	800bc54 <malloc>
 800c002:	4602      	mov	r2, r0
 800c004:	6270      	str	r0, [r6, #36]	; 0x24
 800c006:	b928      	cbnz	r0, 800c014 <__pow5mult+0x40>
 800c008:	4b1d      	ldr	r3, [pc, #116]	; (800c080 <__pow5mult+0xac>)
 800c00a:	481e      	ldr	r0, [pc, #120]	; (800c084 <__pow5mult+0xb0>)
 800c00c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c010:	f000 fc3c 	bl	800c88c <__assert_func>
 800c014:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c018:	6004      	str	r4, [r0, #0]
 800c01a:	60c4      	str	r4, [r0, #12]
 800c01c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c020:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c024:	b94c      	cbnz	r4, 800c03a <__pow5mult+0x66>
 800c026:	f240 2171 	movw	r1, #625	; 0x271
 800c02a:	4630      	mov	r0, r6
 800c02c:	f7ff ff12 	bl	800be54 <__i2b>
 800c030:	2300      	movs	r3, #0
 800c032:	f8c8 0008 	str.w	r0, [r8, #8]
 800c036:	4604      	mov	r4, r0
 800c038:	6003      	str	r3, [r0, #0]
 800c03a:	f04f 0900 	mov.w	r9, #0
 800c03e:	07eb      	lsls	r3, r5, #31
 800c040:	d50a      	bpl.n	800c058 <__pow5mult+0x84>
 800c042:	4639      	mov	r1, r7
 800c044:	4622      	mov	r2, r4
 800c046:	4630      	mov	r0, r6
 800c048:	f7ff ff1a 	bl	800be80 <__multiply>
 800c04c:	4639      	mov	r1, r7
 800c04e:	4680      	mov	r8, r0
 800c050:	4630      	mov	r0, r6
 800c052:	f7ff fe47 	bl	800bce4 <_Bfree>
 800c056:	4647      	mov	r7, r8
 800c058:	106d      	asrs	r5, r5, #1
 800c05a:	d00b      	beq.n	800c074 <__pow5mult+0xa0>
 800c05c:	6820      	ldr	r0, [r4, #0]
 800c05e:	b938      	cbnz	r0, 800c070 <__pow5mult+0x9c>
 800c060:	4622      	mov	r2, r4
 800c062:	4621      	mov	r1, r4
 800c064:	4630      	mov	r0, r6
 800c066:	f7ff ff0b 	bl	800be80 <__multiply>
 800c06a:	6020      	str	r0, [r4, #0]
 800c06c:	f8c0 9000 	str.w	r9, [r0]
 800c070:	4604      	mov	r4, r0
 800c072:	e7e4      	b.n	800c03e <__pow5mult+0x6a>
 800c074:	4638      	mov	r0, r7
 800c076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c07a:	bf00      	nop
 800c07c:	0800d928 	.word	0x0800d928
 800c080:	0800d755 	.word	0x0800d755
 800c084:	0800d7d8 	.word	0x0800d7d8

0800c088 <__lshift>:
 800c088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c08c:	460c      	mov	r4, r1
 800c08e:	6849      	ldr	r1, [r1, #4]
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c096:	68a3      	ldr	r3, [r4, #8]
 800c098:	4607      	mov	r7, r0
 800c09a:	4691      	mov	r9, r2
 800c09c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0a0:	f108 0601 	add.w	r6, r8, #1
 800c0a4:	42b3      	cmp	r3, r6
 800c0a6:	db0b      	blt.n	800c0c0 <__lshift+0x38>
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	f7ff fddb 	bl	800bc64 <_Balloc>
 800c0ae:	4605      	mov	r5, r0
 800c0b0:	b948      	cbnz	r0, 800c0c6 <__lshift+0x3e>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <__lshift+0xd8>)
 800c0b6:	482b      	ldr	r0, [pc, #172]	; (800c164 <__lshift+0xdc>)
 800c0b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c0bc:	f000 fbe6 	bl	800c88c <__assert_func>
 800c0c0:	3101      	adds	r1, #1
 800c0c2:	005b      	lsls	r3, r3, #1
 800c0c4:	e7ee      	b.n	800c0a4 <__lshift+0x1c>
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	f100 0114 	add.w	r1, r0, #20
 800c0cc:	f100 0210 	add.w	r2, r0, #16
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	4553      	cmp	r3, sl
 800c0d4:	db37      	blt.n	800c146 <__lshift+0xbe>
 800c0d6:	6920      	ldr	r0, [r4, #16]
 800c0d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0dc:	f104 0314 	add.w	r3, r4, #20
 800c0e0:	f019 091f 	ands.w	r9, r9, #31
 800c0e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c0ec:	d02f      	beq.n	800c14e <__lshift+0xc6>
 800c0ee:	f1c9 0e20 	rsb	lr, r9, #32
 800c0f2:	468a      	mov	sl, r1
 800c0f4:	f04f 0c00 	mov.w	ip, #0
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	fa02 f209 	lsl.w	r2, r2, r9
 800c0fe:	ea42 020c 	orr.w	r2, r2, ip
 800c102:	f84a 2b04 	str.w	r2, [sl], #4
 800c106:	f853 2b04 	ldr.w	r2, [r3], #4
 800c10a:	4298      	cmp	r0, r3
 800c10c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c110:	d8f2      	bhi.n	800c0f8 <__lshift+0x70>
 800c112:	1b03      	subs	r3, r0, r4
 800c114:	3b15      	subs	r3, #21
 800c116:	f023 0303 	bic.w	r3, r3, #3
 800c11a:	3304      	adds	r3, #4
 800c11c:	f104 0215 	add.w	r2, r4, #21
 800c120:	4290      	cmp	r0, r2
 800c122:	bf38      	it	cc
 800c124:	2304      	movcc	r3, #4
 800c126:	f841 c003 	str.w	ip, [r1, r3]
 800c12a:	f1bc 0f00 	cmp.w	ip, #0
 800c12e:	d001      	beq.n	800c134 <__lshift+0xac>
 800c130:	f108 0602 	add.w	r6, r8, #2
 800c134:	3e01      	subs	r6, #1
 800c136:	4638      	mov	r0, r7
 800c138:	612e      	str	r6, [r5, #16]
 800c13a:	4621      	mov	r1, r4
 800c13c:	f7ff fdd2 	bl	800bce4 <_Bfree>
 800c140:	4628      	mov	r0, r5
 800c142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c146:	f842 0f04 	str.w	r0, [r2, #4]!
 800c14a:	3301      	adds	r3, #1
 800c14c:	e7c1      	b.n	800c0d2 <__lshift+0x4a>
 800c14e:	3904      	subs	r1, #4
 800c150:	f853 2b04 	ldr.w	r2, [r3], #4
 800c154:	f841 2f04 	str.w	r2, [r1, #4]!
 800c158:	4298      	cmp	r0, r3
 800c15a:	d8f9      	bhi.n	800c150 <__lshift+0xc8>
 800c15c:	e7ea      	b.n	800c134 <__lshift+0xac>
 800c15e:	bf00      	nop
 800c160:	0800d7c7 	.word	0x0800d7c7
 800c164:	0800d7d8 	.word	0x0800d7d8

0800c168 <__mcmp>:
 800c168:	b530      	push	{r4, r5, lr}
 800c16a:	6902      	ldr	r2, [r0, #16]
 800c16c:	690c      	ldr	r4, [r1, #16]
 800c16e:	1b12      	subs	r2, r2, r4
 800c170:	d10e      	bne.n	800c190 <__mcmp+0x28>
 800c172:	f100 0314 	add.w	r3, r0, #20
 800c176:	3114      	adds	r1, #20
 800c178:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c17c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c180:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c184:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c188:	42a5      	cmp	r5, r4
 800c18a:	d003      	beq.n	800c194 <__mcmp+0x2c>
 800c18c:	d305      	bcc.n	800c19a <__mcmp+0x32>
 800c18e:	2201      	movs	r2, #1
 800c190:	4610      	mov	r0, r2
 800c192:	bd30      	pop	{r4, r5, pc}
 800c194:	4283      	cmp	r3, r0
 800c196:	d3f3      	bcc.n	800c180 <__mcmp+0x18>
 800c198:	e7fa      	b.n	800c190 <__mcmp+0x28>
 800c19a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c19e:	e7f7      	b.n	800c190 <__mcmp+0x28>

0800c1a0 <__mdiff>:
 800c1a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	460c      	mov	r4, r1
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	f7ff ffdb 	bl	800c168 <__mcmp>
 800c1b2:	1e05      	subs	r5, r0, #0
 800c1b4:	d110      	bne.n	800c1d8 <__mdiff+0x38>
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f7ff fd53 	bl	800bc64 <_Balloc>
 800c1be:	b930      	cbnz	r0, 800c1ce <__mdiff+0x2e>
 800c1c0:	4b3a      	ldr	r3, [pc, #232]	; (800c2ac <__mdiff+0x10c>)
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	f240 2132 	movw	r1, #562	; 0x232
 800c1c8:	4839      	ldr	r0, [pc, #228]	; (800c2b0 <__mdiff+0x110>)
 800c1ca:	f000 fb5f 	bl	800c88c <__assert_func>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c1d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d8:	bfa4      	itt	ge
 800c1da:	4643      	movge	r3, r8
 800c1dc:	46a0      	movge	r8, r4
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c1e4:	bfa6      	itte	ge
 800c1e6:	461c      	movge	r4, r3
 800c1e8:	2500      	movge	r5, #0
 800c1ea:	2501      	movlt	r5, #1
 800c1ec:	f7ff fd3a 	bl	800bc64 <_Balloc>
 800c1f0:	b920      	cbnz	r0, 800c1fc <__mdiff+0x5c>
 800c1f2:	4b2e      	ldr	r3, [pc, #184]	; (800c2ac <__mdiff+0x10c>)
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1fa:	e7e5      	b.n	800c1c8 <__mdiff+0x28>
 800c1fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c200:	6926      	ldr	r6, [r4, #16]
 800c202:	60c5      	str	r5, [r0, #12]
 800c204:	f104 0914 	add.w	r9, r4, #20
 800c208:	f108 0514 	add.w	r5, r8, #20
 800c20c:	f100 0e14 	add.w	lr, r0, #20
 800c210:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c214:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c218:	f108 0210 	add.w	r2, r8, #16
 800c21c:	46f2      	mov	sl, lr
 800c21e:	2100      	movs	r1, #0
 800c220:	f859 3b04 	ldr.w	r3, [r9], #4
 800c224:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c228:	fa1f f883 	uxth.w	r8, r3
 800c22c:	fa11 f18b 	uxtah	r1, r1, fp
 800c230:	0c1b      	lsrs	r3, r3, #16
 800c232:	eba1 0808 	sub.w	r8, r1, r8
 800c236:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c23a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c23e:	fa1f f888 	uxth.w	r8, r8
 800c242:	1419      	asrs	r1, r3, #16
 800c244:	454e      	cmp	r6, r9
 800c246:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c24a:	f84a 3b04 	str.w	r3, [sl], #4
 800c24e:	d8e7      	bhi.n	800c220 <__mdiff+0x80>
 800c250:	1b33      	subs	r3, r6, r4
 800c252:	3b15      	subs	r3, #21
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	3304      	adds	r3, #4
 800c25a:	3415      	adds	r4, #21
 800c25c:	42a6      	cmp	r6, r4
 800c25e:	bf38      	it	cc
 800c260:	2304      	movcc	r3, #4
 800c262:	441d      	add	r5, r3
 800c264:	4473      	add	r3, lr
 800c266:	469e      	mov	lr, r3
 800c268:	462e      	mov	r6, r5
 800c26a:	4566      	cmp	r6, ip
 800c26c:	d30e      	bcc.n	800c28c <__mdiff+0xec>
 800c26e:	f10c 0203 	add.w	r2, ip, #3
 800c272:	1b52      	subs	r2, r2, r5
 800c274:	f022 0203 	bic.w	r2, r2, #3
 800c278:	3d03      	subs	r5, #3
 800c27a:	45ac      	cmp	ip, r5
 800c27c:	bf38      	it	cc
 800c27e:	2200      	movcc	r2, #0
 800c280:	441a      	add	r2, r3
 800c282:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c286:	b17b      	cbz	r3, 800c2a8 <__mdiff+0x108>
 800c288:	6107      	str	r7, [r0, #16]
 800c28a:	e7a3      	b.n	800c1d4 <__mdiff+0x34>
 800c28c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c290:	fa11 f288 	uxtah	r2, r1, r8
 800c294:	1414      	asrs	r4, r2, #16
 800c296:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c29a:	b292      	uxth	r2, r2
 800c29c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c2a0:	f84e 2b04 	str.w	r2, [lr], #4
 800c2a4:	1421      	asrs	r1, r4, #16
 800c2a6:	e7e0      	b.n	800c26a <__mdiff+0xca>
 800c2a8:	3f01      	subs	r7, #1
 800c2aa:	e7ea      	b.n	800c282 <__mdiff+0xe2>
 800c2ac:	0800d7c7 	.word	0x0800d7c7
 800c2b0:	0800d7d8 	.word	0x0800d7d8

0800c2b4 <__d2b>:
 800c2b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c2b8:	4689      	mov	r9, r1
 800c2ba:	2101      	movs	r1, #1
 800c2bc:	ec57 6b10 	vmov	r6, r7, d0
 800c2c0:	4690      	mov	r8, r2
 800c2c2:	f7ff fccf 	bl	800bc64 <_Balloc>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	b930      	cbnz	r0, 800c2d8 <__d2b+0x24>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	4b25      	ldr	r3, [pc, #148]	; (800c364 <__d2b+0xb0>)
 800c2ce:	4826      	ldr	r0, [pc, #152]	; (800c368 <__d2b+0xb4>)
 800c2d0:	f240 310a 	movw	r1, #778	; 0x30a
 800c2d4:	f000 fada 	bl	800c88c <__assert_func>
 800c2d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c2dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2e0:	bb35      	cbnz	r5, 800c330 <__d2b+0x7c>
 800c2e2:	2e00      	cmp	r6, #0
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	d028      	beq.n	800c33a <__d2b+0x86>
 800c2e8:	4668      	mov	r0, sp
 800c2ea:	9600      	str	r6, [sp, #0]
 800c2ec:	f7ff fd82 	bl	800bdf4 <__lo0bits>
 800c2f0:	9900      	ldr	r1, [sp, #0]
 800c2f2:	b300      	cbz	r0, 800c336 <__d2b+0x82>
 800c2f4:	9a01      	ldr	r2, [sp, #4]
 800c2f6:	f1c0 0320 	rsb	r3, r0, #32
 800c2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c2fe:	430b      	orrs	r3, r1
 800c300:	40c2      	lsrs	r2, r0
 800c302:	6163      	str	r3, [r4, #20]
 800c304:	9201      	str	r2, [sp, #4]
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	61a3      	str	r3, [r4, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	bf14      	ite	ne
 800c30e:	2202      	movne	r2, #2
 800c310:	2201      	moveq	r2, #1
 800c312:	6122      	str	r2, [r4, #16]
 800c314:	b1d5      	cbz	r5, 800c34c <__d2b+0x98>
 800c316:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c31a:	4405      	add	r5, r0
 800c31c:	f8c9 5000 	str.w	r5, [r9]
 800c320:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c324:	f8c8 0000 	str.w	r0, [r8]
 800c328:	4620      	mov	r0, r4
 800c32a:	b003      	add	sp, #12
 800c32c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c334:	e7d5      	b.n	800c2e2 <__d2b+0x2e>
 800c336:	6161      	str	r1, [r4, #20]
 800c338:	e7e5      	b.n	800c306 <__d2b+0x52>
 800c33a:	a801      	add	r0, sp, #4
 800c33c:	f7ff fd5a 	bl	800bdf4 <__lo0bits>
 800c340:	9b01      	ldr	r3, [sp, #4]
 800c342:	6163      	str	r3, [r4, #20]
 800c344:	2201      	movs	r2, #1
 800c346:	6122      	str	r2, [r4, #16]
 800c348:	3020      	adds	r0, #32
 800c34a:	e7e3      	b.n	800c314 <__d2b+0x60>
 800c34c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c350:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c354:	f8c9 0000 	str.w	r0, [r9]
 800c358:	6918      	ldr	r0, [r3, #16]
 800c35a:	f7ff fd2b 	bl	800bdb4 <__hi0bits>
 800c35e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c362:	e7df      	b.n	800c324 <__d2b+0x70>
 800c364:	0800d7c7 	.word	0x0800d7c7
 800c368:	0800d7d8 	.word	0x0800d7d8

0800c36c <_calloc_r>:
 800c36c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c36e:	fba1 2402 	umull	r2, r4, r1, r2
 800c372:	b94c      	cbnz	r4, 800c388 <_calloc_r+0x1c>
 800c374:	4611      	mov	r1, r2
 800c376:	9201      	str	r2, [sp, #4]
 800c378:	f000 f87a 	bl	800c470 <_malloc_r>
 800c37c:	9a01      	ldr	r2, [sp, #4]
 800c37e:	4605      	mov	r5, r0
 800c380:	b930      	cbnz	r0, 800c390 <_calloc_r+0x24>
 800c382:	4628      	mov	r0, r5
 800c384:	b003      	add	sp, #12
 800c386:	bd30      	pop	{r4, r5, pc}
 800c388:	220c      	movs	r2, #12
 800c38a:	6002      	str	r2, [r0, #0]
 800c38c:	2500      	movs	r5, #0
 800c38e:	e7f8      	b.n	800c382 <_calloc_r+0x16>
 800c390:	4621      	mov	r1, r4
 800c392:	f7fe f903 	bl	800a59c <memset>
 800c396:	e7f4      	b.n	800c382 <_calloc_r+0x16>

0800c398 <_free_r>:
 800c398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c39a:	2900      	cmp	r1, #0
 800c39c:	d044      	beq.n	800c428 <_free_r+0x90>
 800c39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a2:	9001      	str	r0, [sp, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c3aa:	bfb8      	it	lt
 800c3ac:	18e4      	addlt	r4, r4, r3
 800c3ae:	f000 fac9 	bl	800c944 <__malloc_lock>
 800c3b2:	4a1e      	ldr	r2, [pc, #120]	; (800c42c <_free_r+0x94>)
 800c3b4:	9801      	ldr	r0, [sp, #4]
 800c3b6:	6813      	ldr	r3, [r2, #0]
 800c3b8:	b933      	cbnz	r3, 800c3c8 <_free_r+0x30>
 800c3ba:	6063      	str	r3, [r4, #4]
 800c3bc:	6014      	str	r4, [r2, #0]
 800c3be:	b003      	add	sp, #12
 800c3c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3c4:	f000 bac4 	b.w	800c950 <__malloc_unlock>
 800c3c8:	42a3      	cmp	r3, r4
 800c3ca:	d908      	bls.n	800c3de <_free_r+0x46>
 800c3cc:	6825      	ldr	r5, [r4, #0]
 800c3ce:	1961      	adds	r1, r4, r5
 800c3d0:	428b      	cmp	r3, r1
 800c3d2:	bf01      	itttt	eq
 800c3d4:	6819      	ldreq	r1, [r3, #0]
 800c3d6:	685b      	ldreq	r3, [r3, #4]
 800c3d8:	1949      	addeq	r1, r1, r5
 800c3da:	6021      	streq	r1, [r4, #0]
 800c3dc:	e7ed      	b.n	800c3ba <_free_r+0x22>
 800c3de:	461a      	mov	r2, r3
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	b10b      	cbz	r3, 800c3e8 <_free_r+0x50>
 800c3e4:	42a3      	cmp	r3, r4
 800c3e6:	d9fa      	bls.n	800c3de <_free_r+0x46>
 800c3e8:	6811      	ldr	r1, [r2, #0]
 800c3ea:	1855      	adds	r5, r2, r1
 800c3ec:	42a5      	cmp	r5, r4
 800c3ee:	d10b      	bne.n	800c408 <_free_r+0x70>
 800c3f0:	6824      	ldr	r4, [r4, #0]
 800c3f2:	4421      	add	r1, r4
 800c3f4:	1854      	adds	r4, r2, r1
 800c3f6:	42a3      	cmp	r3, r4
 800c3f8:	6011      	str	r1, [r2, #0]
 800c3fa:	d1e0      	bne.n	800c3be <_free_r+0x26>
 800c3fc:	681c      	ldr	r4, [r3, #0]
 800c3fe:	685b      	ldr	r3, [r3, #4]
 800c400:	6053      	str	r3, [r2, #4]
 800c402:	4421      	add	r1, r4
 800c404:	6011      	str	r1, [r2, #0]
 800c406:	e7da      	b.n	800c3be <_free_r+0x26>
 800c408:	d902      	bls.n	800c410 <_free_r+0x78>
 800c40a:	230c      	movs	r3, #12
 800c40c:	6003      	str	r3, [r0, #0]
 800c40e:	e7d6      	b.n	800c3be <_free_r+0x26>
 800c410:	6825      	ldr	r5, [r4, #0]
 800c412:	1961      	adds	r1, r4, r5
 800c414:	428b      	cmp	r3, r1
 800c416:	bf04      	itt	eq
 800c418:	6819      	ldreq	r1, [r3, #0]
 800c41a:	685b      	ldreq	r3, [r3, #4]
 800c41c:	6063      	str	r3, [r4, #4]
 800c41e:	bf04      	itt	eq
 800c420:	1949      	addeq	r1, r1, r5
 800c422:	6021      	streq	r1, [r4, #0]
 800c424:	6054      	str	r4, [r2, #4]
 800c426:	e7ca      	b.n	800c3be <_free_r+0x26>
 800c428:	b003      	add	sp, #12
 800c42a:	bd30      	pop	{r4, r5, pc}
 800c42c:	20000e18 	.word	0x20000e18

0800c430 <sbrk_aligned>:
 800c430:	b570      	push	{r4, r5, r6, lr}
 800c432:	4e0e      	ldr	r6, [pc, #56]	; (800c46c <sbrk_aligned+0x3c>)
 800c434:	460c      	mov	r4, r1
 800c436:	6831      	ldr	r1, [r6, #0]
 800c438:	4605      	mov	r5, r0
 800c43a:	b911      	cbnz	r1, 800c442 <sbrk_aligned+0x12>
 800c43c:	f000 fa16 	bl	800c86c <_sbrk_r>
 800c440:	6030      	str	r0, [r6, #0]
 800c442:	4621      	mov	r1, r4
 800c444:	4628      	mov	r0, r5
 800c446:	f000 fa11 	bl	800c86c <_sbrk_r>
 800c44a:	1c43      	adds	r3, r0, #1
 800c44c:	d00a      	beq.n	800c464 <sbrk_aligned+0x34>
 800c44e:	1cc4      	adds	r4, r0, #3
 800c450:	f024 0403 	bic.w	r4, r4, #3
 800c454:	42a0      	cmp	r0, r4
 800c456:	d007      	beq.n	800c468 <sbrk_aligned+0x38>
 800c458:	1a21      	subs	r1, r4, r0
 800c45a:	4628      	mov	r0, r5
 800c45c:	f000 fa06 	bl	800c86c <_sbrk_r>
 800c460:	3001      	adds	r0, #1
 800c462:	d101      	bne.n	800c468 <sbrk_aligned+0x38>
 800c464:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c468:	4620      	mov	r0, r4
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	20000e1c 	.word	0x20000e1c

0800c470 <_malloc_r>:
 800c470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c474:	1ccd      	adds	r5, r1, #3
 800c476:	f025 0503 	bic.w	r5, r5, #3
 800c47a:	3508      	adds	r5, #8
 800c47c:	2d0c      	cmp	r5, #12
 800c47e:	bf38      	it	cc
 800c480:	250c      	movcc	r5, #12
 800c482:	2d00      	cmp	r5, #0
 800c484:	4607      	mov	r7, r0
 800c486:	db01      	blt.n	800c48c <_malloc_r+0x1c>
 800c488:	42a9      	cmp	r1, r5
 800c48a:	d905      	bls.n	800c498 <_malloc_r+0x28>
 800c48c:	230c      	movs	r3, #12
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	2600      	movs	r6, #0
 800c492:	4630      	mov	r0, r6
 800c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c498:	4e2e      	ldr	r6, [pc, #184]	; (800c554 <_malloc_r+0xe4>)
 800c49a:	f000 fa53 	bl	800c944 <__malloc_lock>
 800c49e:	6833      	ldr	r3, [r6, #0]
 800c4a0:	461c      	mov	r4, r3
 800c4a2:	bb34      	cbnz	r4, 800c4f2 <_malloc_r+0x82>
 800c4a4:	4629      	mov	r1, r5
 800c4a6:	4638      	mov	r0, r7
 800c4a8:	f7ff ffc2 	bl	800c430 <sbrk_aligned>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	4604      	mov	r4, r0
 800c4b0:	d14d      	bne.n	800c54e <_malloc_r+0xde>
 800c4b2:	6834      	ldr	r4, [r6, #0]
 800c4b4:	4626      	mov	r6, r4
 800c4b6:	2e00      	cmp	r6, #0
 800c4b8:	d140      	bne.n	800c53c <_malloc_r+0xcc>
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	4631      	mov	r1, r6
 800c4be:	4638      	mov	r0, r7
 800c4c0:	eb04 0803 	add.w	r8, r4, r3
 800c4c4:	f000 f9d2 	bl	800c86c <_sbrk_r>
 800c4c8:	4580      	cmp	r8, r0
 800c4ca:	d13a      	bne.n	800c542 <_malloc_r+0xd2>
 800c4cc:	6821      	ldr	r1, [r4, #0]
 800c4ce:	3503      	adds	r5, #3
 800c4d0:	1a6d      	subs	r5, r5, r1
 800c4d2:	f025 0503 	bic.w	r5, r5, #3
 800c4d6:	3508      	adds	r5, #8
 800c4d8:	2d0c      	cmp	r5, #12
 800c4da:	bf38      	it	cc
 800c4dc:	250c      	movcc	r5, #12
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	f7ff ffa5 	bl	800c430 <sbrk_aligned>
 800c4e6:	3001      	adds	r0, #1
 800c4e8:	d02b      	beq.n	800c542 <_malloc_r+0xd2>
 800c4ea:	6823      	ldr	r3, [r4, #0]
 800c4ec:	442b      	add	r3, r5
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	e00e      	b.n	800c510 <_malloc_r+0xa0>
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	1b52      	subs	r2, r2, r5
 800c4f6:	d41e      	bmi.n	800c536 <_malloc_r+0xc6>
 800c4f8:	2a0b      	cmp	r2, #11
 800c4fa:	d916      	bls.n	800c52a <_malloc_r+0xba>
 800c4fc:	1961      	adds	r1, r4, r5
 800c4fe:	42a3      	cmp	r3, r4
 800c500:	6025      	str	r5, [r4, #0]
 800c502:	bf18      	it	ne
 800c504:	6059      	strne	r1, [r3, #4]
 800c506:	6863      	ldr	r3, [r4, #4]
 800c508:	bf08      	it	eq
 800c50a:	6031      	streq	r1, [r6, #0]
 800c50c:	5162      	str	r2, [r4, r5]
 800c50e:	604b      	str	r3, [r1, #4]
 800c510:	4638      	mov	r0, r7
 800c512:	f104 060b 	add.w	r6, r4, #11
 800c516:	f000 fa1b 	bl	800c950 <__malloc_unlock>
 800c51a:	f026 0607 	bic.w	r6, r6, #7
 800c51e:	1d23      	adds	r3, r4, #4
 800c520:	1af2      	subs	r2, r6, r3
 800c522:	d0b6      	beq.n	800c492 <_malloc_r+0x22>
 800c524:	1b9b      	subs	r3, r3, r6
 800c526:	50a3      	str	r3, [r4, r2]
 800c528:	e7b3      	b.n	800c492 <_malloc_r+0x22>
 800c52a:	6862      	ldr	r2, [r4, #4]
 800c52c:	42a3      	cmp	r3, r4
 800c52e:	bf0c      	ite	eq
 800c530:	6032      	streq	r2, [r6, #0]
 800c532:	605a      	strne	r2, [r3, #4]
 800c534:	e7ec      	b.n	800c510 <_malloc_r+0xa0>
 800c536:	4623      	mov	r3, r4
 800c538:	6864      	ldr	r4, [r4, #4]
 800c53a:	e7b2      	b.n	800c4a2 <_malloc_r+0x32>
 800c53c:	4634      	mov	r4, r6
 800c53e:	6876      	ldr	r6, [r6, #4]
 800c540:	e7b9      	b.n	800c4b6 <_malloc_r+0x46>
 800c542:	230c      	movs	r3, #12
 800c544:	603b      	str	r3, [r7, #0]
 800c546:	4638      	mov	r0, r7
 800c548:	f000 fa02 	bl	800c950 <__malloc_unlock>
 800c54c:	e7a1      	b.n	800c492 <_malloc_r+0x22>
 800c54e:	6025      	str	r5, [r4, #0]
 800c550:	e7de      	b.n	800c510 <_malloc_r+0xa0>
 800c552:	bf00      	nop
 800c554:	20000e18 	.word	0x20000e18

0800c558 <_realloc_r>:
 800c558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55c:	4680      	mov	r8, r0
 800c55e:	4614      	mov	r4, r2
 800c560:	460e      	mov	r6, r1
 800c562:	b921      	cbnz	r1, 800c56e <_realloc_r+0x16>
 800c564:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	4611      	mov	r1, r2
 800c56a:	f7ff bf81 	b.w	800c470 <_malloc_r>
 800c56e:	b92a      	cbnz	r2, 800c57c <_realloc_r+0x24>
 800c570:	f7ff ff12 	bl	800c398 <_free_r>
 800c574:	4625      	mov	r5, r4
 800c576:	4628      	mov	r0, r5
 800c578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57c:	f000 f9ee 	bl	800c95c <_malloc_usable_size_r>
 800c580:	4284      	cmp	r4, r0
 800c582:	4607      	mov	r7, r0
 800c584:	d802      	bhi.n	800c58c <_realloc_r+0x34>
 800c586:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c58a:	d812      	bhi.n	800c5b2 <_realloc_r+0x5a>
 800c58c:	4621      	mov	r1, r4
 800c58e:	4640      	mov	r0, r8
 800c590:	f7ff ff6e 	bl	800c470 <_malloc_r>
 800c594:	4605      	mov	r5, r0
 800c596:	2800      	cmp	r0, #0
 800c598:	d0ed      	beq.n	800c576 <_realloc_r+0x1e>
 800c59a:	42bc      	cmp	r4, r7
 800c59c:	4622      	mov	r2, r4
 800c59e:	4631      	mov	r1, r6
 800c5a0:	bf28      	it	cs
 800c5a2:	463a      	movcs	r2, r7
 800c5a4:	f7fd ffec 	bl	800a580 <memcpy>
 800c5a8:	4631      	mov	r1, r6
 800c5aa:	4640      	mov	r0, r8
 800c5ac:	f7ff fef4 	bl	800c398 <_free_r>
 800c5b0:	e7e1      	b.n	800c576 <_realloc_r+0x1e>
 800c5b2:	4635      	mov	r5, r6
 800c5b4:	e7df      	b.n	800c576 <_realloc_r+0x1e>

0800c5b6 <__ssputs_r>:
 800c5b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ba:	688e      	ldr	r6, [r1, #8]
 800c5bc:	429e      	cmp	r6, r3
 800c5be:	4682      	mov	sl, r0
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	4690      	mov	r8, r2
 800c5c4:	461f      	mov	r7, r3
 800c5c6:	d838      	bhi.n	800c63a <__ssputs_r+0x84>
 800c5c8:	898a      	ldrh	r2, [r1, #12]
 800c5ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c5ce:	d032      	beq.n	800c636 <__ssputs_r+0x80>
 800c5d0:	6825      	ldr	r5, [r4, #0]
 800c5d2:	6909      	ldr	r1, [r1, #16]
 800c5d4:	eba5 0901 	sub.w	r9, r5, r1
 800c5d8:	6965      	ldr	r5, [r4, #20]
 800c5da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	444b      	add	r3, r9
 800c5e6:	106d      	asrs	r5, r5, #1
 800c5e8:	429d      	cmp	r5, r3
 800c5ea:	bf38      	it	cc
 800c5ec:	461d      	movcc	r5, r3
 800c5ee:	0553      	lsls	r3, r2, #21
 800c5f0:	d531      	bpl.n	800c656 <__ssputs_r+0xa0>
 800c5f2:	4629      	mov	r1, r5
 800c5f4:	f7ff ff3c 	bl	800c470 <_malloc_r>
 800c5f8:	4606      	mov	r6, r0
 800c5fa:	b950      	cbnz	r0, 800c612 <__ssputs_r+0x5c>
 800c5fc:	230c      	movs	r3, #12
 800c5fe:	f8ca 3000 	str.w	r3, [sl]
 800c602:	89a3      	ldrh	r3, [r4, #12]
 800c604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c60e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c612:	6921      	ldr	r1, [r4, #16]
 800c614:	464a      	mov	r2, r9
 800c616:	f7fd ffb3 	bl	800a580 <memcpy>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c624:	81a3      	strh	r3, [r4, #12]
 800c626:	6126      	str	r6, [r4, #16]
 800c628:	6165      	str	r5, [r4, #20]
 800c62a:	444e      	add	r6, r9
 800c62c:	eba5 0509 	sub.w	r5, r5, r9
 800c630:	6026      	str	r6, [r4, #0]
 800c632:	60a5      	str	r5, [r4, #8]
 800c634:	463e      	mov	r6, r7
 800c636:	42be      	cmp	r6, r7
 800c638:	d900      	bls.n	800c63c <__ssputs_r+0x86>
 800c63a:	463e      	mov	r6, r7
 800c63c:	6820      	ldr	r0, [r4, #0]
 800c63e:	4632      	mov	r2, r6
 800c640:	4641      	mov	r1, r8
 800c642:	f000 f965 	bl	800c910 <memmove>
 800c646:	68a3      	ldr	r3, [r4, #8]
 800c648:	1b9b      	subs	r3, r3, r6
 800c64a:	60a3      	str	r3, [r4, #8]
 800c64c:	6823      	ldr	r3, [r4, #0]
 800c64e:	4433      	add	r3, r6
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	2000      	movs	r0, #0
 800c654:	e7db      	b.n	800c60e <__ssputs_r+0x58>
 800c656:	462a      	mov	r2, r5
 800c658:	f7ff ff7e 	bl	800c558 <_realloc_r>
 800c65c:	4606      	mov	r6, r0
 800c65e:	2800      	cmp	r0, #0
 800c660:	d1e1      	bne.n	800c626 <__ssputs_r+0x70>
 800c662:	6921      	ldr	r1, [r4, #16]
 800c664:	4650      	mov	r0, sl
 800c666:	f7ff fe97 	bl	800c398 <_free_r>
 800c66a:	e7c7      	b.n	800c5fc <__ssputs_r+0x46>

0800c66c <_svfiprintf_r>:
 800c66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c670:	4698      	mov	r8, r3
 800c672:	898b      	ldrh	r3, [r1, #12]
 800c674:	061b      	lsls	r3, r3, #24
 800c676:	b09d      	sub	sp, #116	; 0x74
 800c678:	4607      	mov	r7, r0
 800c67a:	460d      	mov	r5, r1
 800c67c:	4614      	mov	r4, r2
 800c67e:	d50e      	bpl.n	800c69e <_svfiprintf_r+0x32>
 800c680:	690b      	ldr	r3, [r1, #16]
 800c682:	b963      	cbnz	r3, 800c69e <_svfiprintf_r+0x32>
 800c684:	2140      	movs	r1, #64	; 0x40
 800c686:	f7ff fef3 	bl	800c470 <_malloc_r>
 800c68a:	6028      	str	r0, [r5, #0]
 800c68c:	6128      	str	r0, [r5, #16]
 800c68e:	b920      	cbnz	r0, 800c69a <_svfiprintf_r+0x2e>
 800c690:	230c      	movs	r3, #12
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c698:	e0d1      	b.n	800c83e <_svfiprintf_r+0x1d2>
 800c69a:	2340      	movs	r3, #64	; 0x40
 800c69c:	616b      	str	r3, [r5, #20]
 800c69e:	2300      	movs	r3, #0
 800c6a0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6a2:	2320      	movs	r3, #32
 800c6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6ac:	2330      	movs	r3, #48	; 0x30
 800c6ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c858 <_svfiprintf_r+0x1ec>
 800c6b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6b6:	f04f 0901 	mov.w	r9, #1
 800c6ba:	4623      	mov	r3, r4
 800c6bc:	469a      	mov	sl, r3
 800c6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6c2:	b10a      	cbz	r2, 800c6c8 <_svfiprintf_r+0x5c>
 800c6c4:	2a25      	cmp	r2, #37	; 0x25
 800c6c6:	d1f9      	bne.n	800c6bc <_svfiprintf_r+0x50>
 800c6c8:	ebba 0b04 	subs.w	fp, sl, r4
 800c6cc:	d00b      	beq.n	800c6e6 <_svfiprintf_r+0x7a>
 800c6ce:	465b      	mov	r3, fp
 800c6d0:	4622      	mov	r2, r4
 800c6d2:	4629      	mov	r1, r5
 800c6d4:	4638      	mov	r0, r7
 800c6d6:	f7ff ff6e 	bl	800c5b6 <__ssputs_r>
 800c6da:	3001      	adds	r0, #1
 800c6dc:	f000 80aa 	beq.w	800c834 <_svfiprintf_r+0x1c8>
 800c6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6e2:	445a      	add	r2, fp
 800c6e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c6e6:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	f000 80a2 	beq.w	800c834 <_svfiprintf_r+0x1c8>
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6fa:	f10a 0a01 	add.w	sl, sl, #1
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	9307      	str	r3, [sp, #28]
 800c702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c706:	931a      	str	r3, [sp, #104]	; 0x68
 800c708:	4654      	mov	r4, sl
 800c70a:	2205      	movs	r2, #5
 800c70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c710:	4851      	ldr	r0, [pc, #324]	; (800c858 <_svfiprintf_r+0x1ec>)
 800c712:	f7f3 fd65 	bl	80001e0 <memchr>
 800c716:	9a04      	ldr	r2, [sp, #16]
 800c718:	b9d8      	cbnz	r0, 800c752 <_svfiprintf_r+0xe6>
 800c71a:	06d0      	lsls	r0, r2, #27
 800c71c:	bf44      	itt	mi
 800c71e:	2320      	movmi	r3, #32
 800c720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c724:	0711      	lsls	r1, r2, #28
 800c726:	bf44      	itt	mi
 800c728:	232b      	movmi	r3, #43	; 0x2b
 800c72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c72e:	f89a 3000 	ldrb.w	r3, [sl]
 800c732:	2b2a      	cmp	r3, #42	; 0x2a
 800c734:	d015      	beq.n	800c762 <_svfiprintf_r+0xf6>
 800c736:	9a07      	ldr	r2, [sp, #28]
 800c738:	4654      	mov	r4, sl
 800c73a:	2000      	movs	r0, #0
 800c73c:	f04f 0c0a 	mov.w	ip, #10
 800c740:	4621      	mov	r1, r4
 800c742:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c746:	3b30      	subs	r3, #48	; 0x30
 800c748:	2b09      	cmp	r3, #9
 800c74a:	d94e      	bls.n	800c7ea <_svfiprintf_r+0x17e>
 800c74c:	b1b0      	cbz	r0, 800c77c <_svfiprintf_r+0x110>
 800c74e:	9207      	str	r2, [sp, #28]
 800c750:	e014      	b.n	800c77c <_svfiprintf_r+0x110>
 800c752:	eba0 0308 	sub.w	r3, r0, r8
 800c756:	fa09 f303 	lsl.w	r3, r9, r3
 800c75a:	4313      	orrs	r3, r2
 800c75c:	9304      	str	r3, [sp, #16]
 800c75e:	46a2      	mov	sl, r4
 800c760:	e7d2      	b.n	800c708 <_svfiprintf_r+0x9c>
 800c762:	9b03      	ldr	r3, [sp, #12]
 800c764:	1d19      	adds	r1, r3, #4
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	9103      	str	r1, [sp, #12]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	bfbb      	ittet	lt
 800c76e:	425b      	neglt	r3, r3
 800c770:	f042 0202 	orrlt.w	r2, r2, #2
 800c774:	9307      	strge	r3, [sp, #28]
 800c776:	9307      	strlt	r3, [sp, #28]
 800c778:	bfb8      	it	lt
 800c77a:	9204      	strlt	r2, [sp, #16]
 800c77c:	7823      	ldrb	r3, [r4, #0]
 800c77e:	2b2e      	cmp	r3, #46	; 0x2e
 800c780:	d10c      	bne.n	800c79c <_svfiprintf_r+0x130>
 800c782:	7863      	ldrb	r3, [r4, #1]
 800c784:	2b2a      	cmp	r3, #42	; 0x2a
 800c786:	d135      	bne.n	800c7f4 <_svfiprintf_r+0x188>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	1d1a      	adds	r2, r3, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	9203      	str	r2, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	bfb8      	it	lt
 800c794:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c798:	3402      	adds	r4, #2
 800c79a:	9305      	str	r3, [sp, #20]
 800c79c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c868 <_svfiprintf_r+0x1fc>
 800c7a0:	7821      	ldrb	r1, [r4, #0]
 800c7a2:	2203      	movs	r2, #3
 800c7a4:	4650      	mov	r0, sl
 800c7a6:	f7f3 fd1b 	bl	80001e0 <memchr>
 800c7aa:	b140      	cbz	r0, 800c7be <_svfiprintf_r+0x152>
 800c7ac:	2340      	movs	r3, #64	; 0x40
 800c7ae:	eba0 000a 	sub.w	r0, r0, sl
 800c7b2:	fa03 f000 	lsl.w	r0, r3, r0
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	4303      	orrs	r3, r0
 800c7ba:	3401      	adds	r4, #1
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7c2:	4826      	ldr	r0, [pc, #152]	; (800c85c <_svfiprintf_r+0x1f0>)
 800c7c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7c8:	2206      	movs	r2, #6
 800c7ca:	f7f3 fd09 	bl	80001e0 <memchr>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d038      	beq.n	800c844 <_svfiprintf_r+0x1d8>
 800c7d2:	4b23      	ldr	r3, [pc, #140]	; (800c860 <_svfiprintf_r+0x1f4>)
 800c7d4:	bb1b      	cbnz	r3, 800c81e <_svfiprintf_r+0x1b2>
 800c7d6:	9b03      	ldr	r3, [sp, #12]
 800c7d8:	3307      	adds	r3, #7
 800c7da:	f023 0307 	bic.w	r3, r3, #7
 800c7de:	3308      	adds	r3, #8
 800c7e0:	9303      	str	r3, [sp, #12]
 800c7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7e4:	4433      	add	r3, r6
 800c7e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7e8:	e767      	b.n	800c6ba <_svfiprintf_r+0x4e>
 800c7ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	e7a5      	b.n	800c740 <_svfiprintf_r+0xd4>
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	3401      	adds	r4, #1
 800c7f8:	9305      	str	r3, [sp, #20]
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	f04f 0c0a 	mov.w	ip, #10
 800c800:	4620      	mov	r0, r4
 800c802:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c806:	3a30      	subs	r2, #48	; 0x30
 800c808:	2a09      	cmp	r2, #9
 800c80a:	d903      	bls.n	800c814 <_svfiprintf_r+0x1a8>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d0c5      	beq.n	800c79c <_svfiprintf_r+0x130>
 800c810:	9105      	str	r1, [sp, #20]
 800c812:	e7c3      	b.n	800c79c <_svfiprintf_r+0x130>
 800c814:	fb0c 2101 	mla	r1, ip, r1, r2
 800c818:	4604      	mov	r4, r0
 800c81a:	2301      	movs	r3, #1
 800c81c:	e7f0      	b.n	800c800 <_svfiprintf_r+0x194>
 800c81e:	ab03      	add	r3, sp, #12
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	462a      	mov	r2, r5
 800c824:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <_svfiprintf_r+0x1f8>)
 800c826:	a904      	add	r1, sp, #16
 800c828:	4638      	mov	r0, r7
 800c82a:	f7fd ff5f 	bl	800a6ec <_printf_float>
 800c82e:	1c42      	adds	r2, r0, #1
 800c830:	4606      	mov	r6, r0
 800c832:	d1d6      	bne.n	800c7e2 <_svfiprintf_r+0x176>
 800c834:	89ab      	ldrh	r3, [r5, #12]
 800c836:	065b      	lsls	r3, r3, #25
 800c838:	f53f af2c 	bmi.w	800c694 <_svfiprintf_r+0x28>
 800c83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c83e:	b01d      	add	sp, #116	; 0x74
 800c840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c844:	ab03      	add	r3, sp, #12
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	462a      	mov	r2, r5
 800c84a:	4b06      	ldr	r3, [pc, #24]	; (800c864 <_svfiprintf_r+0x1f8>)
 800c84c:	a904      	add	r1, sp, #16
 800c84e:	4638      	mov	r0, r7
 800c850:	f7fe f9f0 	bl	800ac34 <_printf_i>
 800c854:	e7eb      	b.n	800c82e <_svfiprintf_r+0x1c2>
 800c856:	bf00      	nop
 800c858:	0800d934 	.word	0x0800d934
 800c85c:	0800d93e 	.word	0x0800d93e
 800c860:	0800a6ed 	.word	0x0800a6ed
 800c864:	0800c5b7 	.word	0x0800c5b7
 800c868:	0800d93a 	.word	0x0800d93a

0800c86c <_sbrk_r>:
 800c86c:	b538      	push	{r3, r4, r5, lr}
 800c86e:	4d06      	ldr	r5, [pc, #24]	; (800c888 <_sbrk_r+0x1c>)
 800c870:	2300      	movs	r3, #0
 800c872:	4604      	mov	r4, r0
 800c874:	4608      	mov	r0, r1
 800c876:	602b      	str	r3, [r5, #0]
 800c878:	f7f8 f950 	bl	8004b1c <_sbrk>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_sbrk_r+0x1a>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_sbrk_r+0x1a>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20000e20 	.word	0x20000e20

0800c88c <__assert_func>:
 800c88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c88e:	4614      	mov	r4, r2
 800c890:	461a      	mov	r2, r3
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <__assert_func+0x2c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4605      	mov	r5, r0
 800c898:	68d8      	ldr	r0, [r3, #12]
 800c89a:	b14c      	cbz	r4, 800c8b0 <__assert_func+0x24>
 800c89c:	4b07      	ldr	r3, [pc, #28]	; (800c8bc <__assert_func+0x30>)
 800c89e:	9100      	str	r1, [sp, #0]
 800c8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8a4:	4906      	ldr	r1, [pc, #24]	; (800c8c0 <__assert_func+0x34>)
 800c8a6:	462b      	mov	r3, r5
 800c8a8:	f000 f80e 	bl	800c8c8 <fiprintf>
 800c8ac:	f7fd fe36 	bl	800a51c <abort>
 800c8b0:	4b04      	ldr	r3, [pc, #16]	; (800c8c4 <__assert_func+0x38>)
 800c8b2:	461c      	mov	r4, r3
 800c8b4:	e7f3      	b.n	800c89e <__assert_func+0x12>
 800c8b6:	bf00      	nop
 800c8b8:	20000010 	.word	0x20000010
 800c8bc:	0800d945 	.word	0x0800d945
 800c8c0:	0800d952 	.word	0x0800d952
 800c8c4:	0800d980 	.word	0x0800d980

0800c8c8 <fiprintf>:
 800c8c8:	b40e      	push	{r1, r2, r3}
 800c8ca:	b503      	push	{r0, r1, lr}
 800c8cc:	4601      	mov	r1, r0
 800c8ce:	ab03      	add	r3, sp, #12
 800c8d0:	4805      	ldr	r0, [pc, #20]	; (800c8e8 <fiprintf+0x20>)
 800c8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d6:	6800      	ldr	r0, [r0, #0]
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	f000 f871 	bl	800c9c0 <_vfiprintf_r>
 800c8de:	b002      	add	sp, #8
 800c8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8e4:	b003      	add	sp, #12
 800c8e6:	4770      	bx	lr
 800c8e8:	20000010 	.word	0x20000010

0800c8ec <__ascii_mbtowc>:
 800c8ec:	b082      	sub	sp, #8
 800c8ee:	b901      	cbnz	r1, 800c8f2 <__ascii_mbtowc+0x6>
 800c8f0:	a901      	add	r1, sp, #4
 800c8f2:	b142      	cbz	r2, 800c906 <__ascii_mbtowc+0x1a>
 800c8f4:	b14b      	cbz	r3, 800c90a <__ascii_mbtowc+0x1e>
 800c8f6:	7813      	ldrb	r3, [r2, #0]
 800c8f8:	600b      	str	r3, [r1, #0]
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	1e10      	subs	r0, r2, #0
 800c8fe:	bf18      	it	ne
 800c900:	2001      	movne	r0, #1
 800c902:	b002      	add	sp, #8
 800c904:	4770      	bx	lr
 800c906:	4610      	mov	r0, r2
 800c908:	e7fb      	b.n	800c902 <__ascii_mbtowc+0x16>
 800c90a:	f06f 0001 	mvn.w	r0, #1
 800c90e:	e7f8      	b.n	800c902 <__ascii_mbtowc+0x16>

0800c910 <memmove>:
 800c910:	4288      	cmp	r0, r1
 800c912:	b510      	push	{r4, lr}
 800c914:	eb01 0402 	add.w	r4, r1, r2
 800c918:	d902      	bls.n	800c920 <memmove+0x10>
 800c91a:	4284      	cmp	r4, r0
 800c91c:	4623      	mov	r3, r4
 800c91e:	d807      	bhi.n	800c930 <memmove+0x20>
 800c920:	1e43      	subs	r3, r0, #1
 800c922:	42a1      	cmp	r1, r4
 800c924:	d008      	beq.n	800c938 <memmove+0x28>
 800c926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c92a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c92e:	e7f8      	b.n	800c922 <memmove+0x12>
 800c930:	4402      	add	r2, r0
 800c932:	4601      	mov	r1, r0
 800c934:	428a      	cmp	r2, r1
 800c936:	d100      	bne.n	800c93a <memmove+0x2a>
 800c938:	bd10      	pop	{r4, pc}
 800c93a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c93e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c942:	e7f7      	b.n	800c934 <memmove+0x24>

0800c944 <__malloc_lock>:
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <__malloc_lock+0x8>)
 800c946:	f000 bbf1 	b.w	800d12c <__retarget_lock_acquire_recursive>
 800c94a:	bf00      	nop
 800c94c:	20000e24 	.word	0x20000e24

0800c950 <__malloc_unlock>:
 800c950:	4801      	ldr	r0, [pc, #4]	; (800c958 <__malloc_unlock+0x8>)
 800c952:	f000 bbec 	b.w	800d12e <__retarget_lock_release_recursive>
 800c956:	bf00      	nop
 800c958:	20000e24 	.word	0x20000e24

0800c95c <_malloc_usable_size_r>:
 800c95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c960:	1f18      	subs	r0, r3, #4
 800c962:	2b00      	cmp	r3, #0
 800c964:	bfbc      	itt	lt
 800c966:	580b      	ldrlt	r3, [r1, r0]
 800c968:	18c0      	addlt	r0, r0, r3
 800c96a:	4770      	bx	lr

0800c96c <__sfputc_r>:
 800c96c:	6893      	ldr	r3, [r2, #8]
 800c96e:	3b01      	subs	r3, #1
 800c970:	2b00      	cmp	r3, #0
 800c972:	b410      	push	{r4}
 800c974:	6093      	str	r3, [r2, #8]
 800c976:	da08      	bge.n	800c98a <__sfputc_r+0x1e>
 800c978:	6994      	ldr	r4, [r2, #24]
 800c97a:	42a3      	cmp	r3, r4
 800c97c:	db01      	blt.n	800c982 <__sfputc_r+0x16>
 800c97e:	290a      	cmp	r1, #10
 800c980:	d103      	bne.n	800c98a <__sfputc_r+0x1e>
 800c982:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c986:	f000 b94b 	b.w	800cc20 <__swbuf_r>
 800c98a:	6813      	ldr	r3, [r2, #0]
 800c98c:	1c58      	adds	r0, r3, #1
 800c98e:	6010      	str	r0, [r2, #0]
 800c990:	7019      	strb	r1, [r3, #0]
 800c992:	4608      	mov	r0, r1
 800c994:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c998:	4770      	bx	lr

0800c99a <__sfputs_r>:
 800c99a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99c:	4606      	mov	r6, r0
 800c99e:	460f      	mov	r7, r1
 800c9a0:	4614      	mov	r4, r2
 800c9a2:	18d5      	adds	r5, r2, r3
 800c9a4:	42ac      	cmp	r4, r5
 800c9a6:	d101      	bne.n	800c9ac <__sfputs_r+0x12>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e007      	b.n	800c9bc <__sfputs_r+0x22>
 800c9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9b0:	463a      	mov	r2, r7
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	f7ff ffda 	bl	800c96c <__sfputc_r>
 800c9b8:	1c43      	adds	r3, r0, #1
 800c9ba:	d1f3      	bne.n	800c9a4 <__sfputs_r+0xa>
 800c9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c9c0 <_vfiprintf_r>:
 800c9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c4:	460d      	mov	r5, r1
 800c9c6:	b09d      	sub	sp, #116	; 0x74
 800c9c8:	4614      	mov	r4, r2
 800c9ca:	4698      	mov	r8, r3
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	b118      	cbz	r0, 800c9d8 <_vfiprintf_r+0x18>
 800c9d0:	6983      	ldr	r3, [r0, #24]
 800c9d2:	b90b      	cbnz	r3, 800c9d8 <_vfiprintf_r+0x18>
 800c9d4:	f000 fb0c 	bl	800cff0 <__sinit>
 800c9d8:	4b89      	ldr	r3, [pc, #548]	; (800cc00 <_vfiprintf_r+0x240>)
 800c9da:	429d      	cmp	r5, r3
 800c9dc:	d11b      	bne.n	800ca16 <_vfiprintf_r+0x56>
 800c9de:	6875      	ldr	r5, [r6, #4]
 800c9e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9e2:	07d9      	lsls	r1, r3, #31
 800c9e4:	d405      	bmi.n	800c9f2 <_vfiprintf_r+0x32>
 800c9e6:	89ab      	ldrh	r3, [r5, #12]
 800c9e8:	059a      	lsls	r2, r3, #22
 800c9ea:	d402      	bmi.n	800c9f2 <_vfiprintf_r+0x32>
 800c9ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ee:	f000 fb9d 	bl	800d12c <__retarget_lock_acquire_recursive>
 800c9f2:	89ab      	ldrh	r3, [r5, #12]
 800c9f4:	071b      	lsls	r3, r3, #28
 800c9f6:	d501      	bpl.n	800c9fc <_vfiprintf_r+0x3c>
 800c9f8:	692b      	ldr	r3, [r5, #16]
 800c9fa:	b9eb      	cbnz	r3, 800ca38 <_vfiprintf_r+0x78>
 800c9fc:	4629      	mov	r1, r5
 800c9fe:	4630      	mov	r0, r6
 800ca00:	f000 f96e 	bl	800cce0 <__swsetup_r>
 800ca04:	b1c0      	cbz	r0, 800ca38 <_vfiprintf_r+0x78>
 800ca06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca08:	07dc      	lsls	r4, r3, #31
 800ca0a:	d50e      	bpl.n	800ca2a <_vfiprintf_r+0x6a>
 800ca0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca10:	b01d      	add	sp, #116	; 0x74
 800ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca16:	4b7b      	ldr	r3, [pc, #492]	; (800cc04 <_vfiprintf_r+0x244>)
 800ca18:	429d      	cmp	r5, r3
 800ca1a:	d101      	bne.n	800ca20 <_vfiprintf_r+0x60>
 800ca1c:	68b5      	ldr	r5, [r6, #8]
 800ca1e:	e7df      	b.n	800c9e0 <_vfiprintf_r+0x20>
 800ca20:	4b79      	ldr	r3, [pc, #484]	; (800cc08 <_vfiprintf_r+0x248>)
 800ca22:	429d      	cmp	r5, r3
 800ca24:	bf08      	it	eq
 800ca26:	68f5      	ldreq	r5, [r6, #12]
 800ca28:	e7da      	b.n	800c9e0 <_vfiprintf_r+0x20>
 800ca2a:	89ab      	ldrh	r3, [r5, #12]
 800ca2c:	0598      	lsls	r0, r3, #22
 800ca2e:	d4ed      	bmi.n	800ca0c <_vfiprintf_r+0x4c>
 800ca30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca32:	f000 fb7c 	bl	800d12e <__retarget_lock_release_recursive>
 800ca36:	e7e9      	b.n	800ca0c <_vfiprintf_r+0x4c>
 800ca38:	2300      	movs	r3, #0
 800ca3a:	9309      	str	r3, [sp, #36]	; 0x24
 800ca3c:	2320      	movs	r3, #32
 800ca3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca42:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca46:	2330      	movs	r3, #48	; 0x30
 800ca48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cc0c <_vfiprintf_r+0x24c>
 800ca4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca50:	f04f 0901 	mov.w	r9, #1
 800ca54:	4623      	mov	r3, r4
 800ca56:	469a      	mov	sl, r3
 800ca58:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca5c:	b10a      	cbz	r2, 800ca62 <_vfiprintf_r+0xa2>
 800ca5e:	2a25      	cmp	r2, #37	; 0x25
 800ca60:	d1f9      	bne.n	800ca56 <_vfiprintf_r+0x96>
 800ca62:	ebba 0b04 	subs.w	fp, sl, r4
 800ca66:	d00b      	beq.n	800ca80 <_vfiprintf_r+0xc0>
 800ca68:	465b      	mov	r3, fp
 800ca6a:	4622      	mov	r2, r4
 800ca6c:	4629      	mov	r1, r5
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f7ff ff93 	bl	800c99a <__sfputs_r>
 800ca74:	3001      	adds	r0, #1
 800ca76:	f000 80aa 	beq.w	800cbce <_vfiprintf_r+0x20e>
 800ca7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca7c:	445a      	add	r2, fp
 800ca7e:	9209      	str	r2, [sp, #36]	; 0x24
 800ca80:	f89a 3000 	ldrb.w	r3, [sl]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 80a2 	beq.w	800cbce <_vfiprintf_r+0x20e>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca94:	f10a 0a01 	add.w	sl, sl, #1
 800ca98:	9304      	str	r3, [sp, #16]
 800ca9a:	9307      	str	r3, [sp, #28]
 800ca9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caa0:	931a      	str	r3, [sp, #104]	; 0x68
 800caa2:	4654      	mov	r4, sl
 800caa4:	2205      	movs	r2, #5
 800caa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caaa:	4858      	ldr	r0, [pc, #352]	; (800cc0c <_vfiprintf_r+0x24c>)
 800caac:	f7f3 fb98 	bl	80001e0 <memchr>
 800cab0:	9a04      	ldr	r2, [sp, #16]
 800cab2:	b9d8      	cbnz	r0, 800caec <_vfiprintf_r+0x12c>
 800cab4:	06d1      	lsls	r1, r2, #27
 800cab6:	bf44      	itt	mi
 800cab8:	2320      	movmi	r3, #32
 800caba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cabe:	0713      	lsls	r3, r2, #28
 800cac0:	bf44      	itt	mi
 800cac2:	232b      	movmi	r3, #43	; 0x2b
 800cac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cac8:	f89a 3000 	ldrb.w	r3, [sl]
 800cacc:	2b2a      	cmp	r3, #42	; 0x2a
 800cace:	d015      	beq.n	800cafc <_vfiprintf_r+0x13c>
 800cad0:	9a07      	ldr	r2, [sp, #28]
 800cad2:	4654      	mov	r4, sl
 800cad4:	2000      	movs	r0, #0
 800cad6:	f04f 0c0a 	mov.w	ip, #10
 800cada:	4621      	mov	r1, r4
 800cadc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cae0:	3b30      	subs	r3, #48	; 0x30
 800cae2:	2b09      	cmp	r3, #9
 800cae4:	d94e      	bls.n	800cb84 <_vfiprintf_r+0x1c4>
 800cae6:	b1b0      	cbz	r0, 800cb16 <_vfiprintf_r+0x156>
 800cae8:	9207      	str	r2, [sp, #28]
 800caea:	e014      	b.n	800cb16 <_vfiprintf_r+0x156>
 800caec:	eba0 0308 	sub.w	r3, r0, r8
 800caf0:	fa09 f303 	lsl.w	r3, r9, r3
 800caf4:	4313      	orrs	r3, r2
 800caf6:	9304      	str	r3, [sp, #16]
 800caf8:	46a2      	mov	sl, r4
 800cafa:	e7d2      	b.n	800caa2 <_vfiprintf_r+0xe2>
 800cafc:	9b03      	ldr	r3, [sp, #12]
 800cafe:	1d19      	adds	r1, r3, #4
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	9103      	str	r1, [sp, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	bfbb      	ittet	lt
 800cb08:	425b      	neglt	r3, r3
 800cb0a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb0e:	9307      	strge	r3, [sp, #28]
 800cb10:	9307      	strlt	r3, [sp, #28]
 800cb12:	bfb8      	it	lt
 800cb14:	9204      	strlt	r2, [sp, #16]
 800cb16:	7823      	ldrb	r3, [r4, #0]
 800cb18:	2b2e      	cmp	r3, #46	; 0x2e
 800cb1a:	d10c      	bne.n	800cb36 <_vfiprintf_r+0x176>
 800cb1c:	7863      	ldrb	r3, [r4, #1]
 800cb1e:	2b2a      	cmp	r3, #42	; 0x2a
 800cb20:	d135      	bne.n	800cb8e <_vfiprintf_r+0x1ce>
 800cb22:	9b03      	ldr	r3, [sp, #12]
 800cb24:	1d1a      	adds	r2, r3, #4
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	9203      	str	r2, [sp, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	bfb8      	it	lt
 800cb2e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cb32:	3402      	adds	r4, #2
 800cb34:	9305      	str	r3, [sp, #20]
 800cb36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cc1c <_vfiprintf_r+0x25c>
 800cb3a:	7821      	ldrb	r1, [r4, #0]
 800cb3c:	2203      	movs	r2, #3
 800cb3e:	4650      	mov	r0, sl
 800cb40:	f7f3 fb4e 	bl	80001e0 <memchr>
 800cb44:	b140      	cbz	r0, 800cb58 <_vfiprintf_r+0x198>
 800cb46:	2340      	movs	r3, #64	; 0x40
 800cb48:	eba0 000a 	sub.w	r0, r0, sl
 800cb4c:	fa03 f000 	lsl.w	r0, r3, r0
 800cb50:	9b04      	ldr	r3, [sp, #16]
 800cb52:	4303      	orrs	r3, r0
 800cb54:	3401      	adds	r4, #1
 800cb56:	9304      	str	r3, [sp, #16]
 800cb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb5c:	482c      	ldr	r0, [pc, #176]	; (800cc10 <_vfiprintf_r+0x250>)
 800cb5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb62:	2206      	movs	r2, #6
 800cb64:	f7f3 fb3c 	bl	80001e0 <memchr>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d03f      	beq.n	800cbec <_vfiprintf_r+0x22c>
 800cb6c:	4b29      	ldr	r3, [pc, #164]	; (800cc14 <_vfiprintf_r+0x254>)
 800cb6e:	bb1b      	cbnz	r3, 800cbb8 <_vfiprintf_r+0x1f8>
 800cb70:	9b03      	ldr	r3, [sp, #12]
 800cb72:	3307      	adds	r3, #7
 800cb74:	f023 0307 	bic.w	r3, r3, #7
 800cb78:	3308      	adds	r3, #8
 800cb7a:	9303      	str	r3, [sp, #12]
 800cb7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7e:	443b      	add	r3, r7
 800cb80:	9309      	str	r3, [sp, #36]	; 0x24
 800cb82:	e767      	b.n	800ca54 <_vfiprintf_r+0x94>
 800cb84:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb88:	460c      	mov	r4, r1
 800cb8a:	2001      	movs	r0, #1
 800cb8c:	e7a5      	b.n	800cada <_vfiprintf_r+0x11a>
 800cb8e:	2300      	movs	r3, #0
 800cb90:	3401      	adds	r4, #1
 800cb92:	9305      	str	r3, [sp, #20]
 800cb94:	4619      	mov	r1, r3
 800cb96:	f04f 0c0a 	mov.w	ip, #10
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cba0:	3a30      	subs	r2, #48	; 0x30
 800cba2:	2a09      	cmp	r2, #9
 800cba4:	d903      	bls.n	800cbae <_vfiprintf_r+0x1ee>
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d0c5      	beq.n	800cb36 <_vfiprintf_r+0x176>
 800cbaa:	9105      	str	r1, [sp, #20]
 800cbac:	e7c3      	b.n	800cb36 <_vfiprintf_r+0x176>
 800cbae:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e7f0      	b.n	800cb9a <_vfiprintf_r+0x1da>
 800cbb8:	ab03      	add	r3, sp, #12
 800cbba:	9300      	str	r3, [sp, #0]
 800cbbc:	462a      	mov	r2, r5
 800cbbe:	4b16      	ldr	r3, [pc, #88]	; (800cc18 <_vfiprintf_r+0x258>)
 800cbc0:	a904      	add	r1, sp, #16
 800cbc2:	4630      	mov	r0, r6
 800cbc4:	f7fd fd92 	bl	800a6ec <_printf_float>
 800cbc8:	4607      	mov	r7, r0
 800cbca:	1c78      	adds	r0, r7, #1
 800cbcc:	d1d6      	bne.n	800cb7c <_vfiprintf_r+0x1bc>
 800cbce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cbd0:	07d9      	lsls	r1, r3, #31
 800cbd2:	d405      	bmi.n	800cbe0 <_vfiprintf_r+0x220>
 800cbd4:	89ab      	ldrh	r3, [r5, #12]
 800cbd6:	059a      	lsls	r2, r3, #22
 800cbd8:	d402      	bmi.n	800cbe0 <_vfiprintf_r+0x220>
 800cbda:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cbdc:	f000 faa7 	bl	800d12e <__retarget_lock_release_recursive>
 800cbe0:	89ab      	ldrh	r3, [r5, #12]
 800cbe2:	065b      	lsls	r3, r3, #25
 800cbe4:	f53f af12 	bmi.w	800ca0c <_vfiprintf_r+0x4c>
 800cbe8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cbea:	e711      	b.n	800ca10 <_vfiprintf_r+0x50>
 800cbec:	ab03      	add	r3, sp, #12
 800cbee:	9300      	str	r3, [sp, #0]
 800cbf0:	462a      	mov	r2, r5
 800cbf2:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <_vfiprintf_r+0x258>)
 800cbf4:	a904      	add	r1, sp, #16
 800cbf6:	4630      	mov	r0, r6
 800cbf8:	f7fe f81c 	bl	800ac34 <_printf_i>
 800cbfc:	e7e4      	b.n	800cbc8 <_vfiprintf_r+0x208>
 800cbfe:	bf00      	nop
 800cc00:	0800daac 	.word	0x0800daac
 800cc04:	0800dacc 	.word	0x0800dacc
 800cc08:	0800da8c 	.word	0x0800da8c
 800cc0c:	0800d934 	.word	0x0800d934
 800cc10:	0800d93e 	.word	0x0800d93e
 800cc14:	0800a6ed 	.word	0x0800a6ed
 800cc18:	0800c99b 	.word	0x0800c99b
 800cc1c:	0800d93a 	.word	0x0800d93a

0800cc20 <__swbuf_r>:
 800cc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc22:	460e      	mov	r6, r1
 800cc24:	4614      	mov	r4, r2
 800cc26:	4605      	mov	r5, r0
 800cc28:	b118      	cbz	r0, 800cc32 <__swbuf_r+0x12>
 800cc2a:	6983      	ldr	r3, [r0, #24]
 800cc2c:	b90b      	cbnz	r3, 800cc32 <__swbuf_r+0x12>
 800cc2e:	f000 f9df 	bl	800cff0 <__sinit>
 800cc32:	4b21      	ldr	r3, [pc, #132]	; (800ccb8 <__swbuf_r+0x98>)
 800cc34:	429c      	cmp	r4, r3
 800cc36:	d12b      	bne.n	800cc90 <__swbuf_r+0x70>
 800cc38:	686c      	ldr	r4, [r5, #4]
 800cc3a:	69a3      	ldr	r3, [r4, #24]
 800cc3c:	60a3      	str	r3, [r4, #8]
 800cc3e:	89a3      	ldrh	r3, [r4, #12]
 800cc40:	071a      	lsls	r2, r3, #28
 800cc42:	d52f      	bpl.n	800cca4 <__swbuf_r+0x84>
 800cc44:	6923      	ldr	r3, [r4, #16]
 800cc46:	b36b      	cbz	r3, 800cca4 <__swbuf_r+0x84>
 800cc48:	6923      	ldr	r3, [r4, #16]
 800cc4a:	6820      	ldr	r0, [r4, #0]
 800cc4c:	1ac0      	subs	r0, r0, r3
 800cc4e:	6963      	ldr	r3, [r4, #20]
 800cc50:	b2f6      	uxtb	r6, r6
 800cc52:	4283      	cmp	r3, r0
 800cc54:	4637      	mov	r7, r6
 800cc56:	dc04      	bgt.n	800cc62 <__swbuf_r+0x42>
 800cc58:	4621      	mov	r1, r4
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	f000 f934 	bl	800cec8 <_fflush_r>
 800cc60:	bb30      	cbnz	r0, 800ccb0 <__swbuf_r+0x90>
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	60a3      	str	r3, [r4, #8]
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	6022      	str	r2, [r4, #0]
 800cc6e:	701e      	strb	r6, [r3, #0]
 800cc70:	6963      	ldr	r3, [r4, #20]
 800cc72:	3001      	adds	r0, #1
 800cc74:	4283      	cmp	r3, r0
 800cc76:	d004      	beq.n	800cc82 <__swbuf_r+0x62>
 800cc78:	89a3      	ldrh	r3, [r4, #12]
 800cc7a:	07db      	lsls	r3, r3, #31
 800cc7c:	d506      	bpl.n	800cc8c <__swbuf_r+0x6c>
 800cc7e:	2e0a      	cmp	r6, #10
 800cc80:	d104      	bne.n	800cc8c <__swbuf_r+0x6c>
 800cc82:	4621      	mov	r1, r4
 800cc84:	4628      	mov	r0, r5
 800cc86:	f000 f91f 	bl	800cec8 <_fflush_r>
 800cc8a:	b988      	cbnz	r0, 800ccb0 <__swbuf_r+0x90>
 800cc8c:	4638      	mov	r0, r7
 800cc8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc90:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <__swbuf_r+0x9c>)
 800cc92:	429c      	cmp	r4, r3
 800cc94:	d101      	bne.n	800cc9a <__swbuf_r+0x7a>
 800cc96:	68ac      	ldr	r4, [r5, #8]
 800cc98:	e7cf      	b.n	800cc3a <__swbuf_r+0x1a>
 800cc9a:	4b09      	ldr	r3, [pc, #36]	; (800ccc0 <__swbuf_r+0xa0>)
 800cc9c:	429c      	cmp	r4, r3
 800cc9e:	bf08      	it	eq
 800cca0:	68ec      	ldreq	r4, [r5, #12]
 800cca2:	e7ca      	b.n	800cc3a <__swbuf_r+0x1a>
 800cca4:	4621      	mov	r1, r4
 800cca6:	4628      	mov	r0, r5
 800cca8:	f000 f81a 	bl	800cce0 <__swsetup_r>
 800ccac:	2800      	cmp	r0, #0
 800ccae:	d0cb      	beq.n	800cc48 <__swbuf_r+0x28>
 800ccb0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ccb4:	e7ea      	b.n	800cc8c <__swbuf_r+0x6c>
 800ccb6:	bf00      	nop
 800ccb8:	0800daac 	.word	0x0800daac
 800ccbc:	0800dacc 	.word	0x0800dacc
 800ccc0:	0800da8c 	.word	0x0800da8c

0800ccc4 <__ascii_wctomb>:
 800ccc4:	b149      	cbz	r1, 800ccda <__ascii_wctomb+0x16>
 800ccc6:	2aff      	cmp	r2, #255	; 0xff
 800ccc8:	bf85      	ittet	hi
 800ccca:	238a      	movhi	r3, #138	; 0x8a
 800cccc:	6003      	strhi	r3, [r0, #0]
 800ccce:	700a      	strbls	r2, [r1, #0]
 800ccd0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ccd4:	bf98      	it	ls
 800ccd6:	2001      	movls	r0, #1
 800ccd8:	4770      	bx	lr
 800ccda:	4608      	mov	r0, r1
 800ccdc:	4770      	bx	lr
	...

0800cce0 <__swsetup_r>:
 800cce0:	4b32      	ldr	r3, [pc, #200]	; (800cdac <__swsetup_r+0xcc>)
 800cce2:	b570      	push	{r4, r5, r6, lr}
 800cce4:	681d      	ldr	r5, [r3, #0]
 800cce6:	4606      	mov	r6, r0
 800cce8:	460c      	mov	r4, r1
 800ccea:	b125      	cbz	r5, 800ccf6 <__swsetup_r+0x16>
 800ccec:	69ab      	ldr	r3, [r5, #24]
 800ccee:	b913      	cbnz	r3, 800ccf6 <__swsetup_r+0x16>
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f000 f97d 	bl	800cff0 <__sinit>
 800ccf6:	4b2e      	ldr	r3, [pc, #184]	; (800cdb0 <__swsetup_r+0xd0>)
 800ccf8:	429c      	cmp	r4, r3
 800ccfa:	d10f      	bne.n	800cd1c <__swsetup_r+0x3c>
 800ccfc:	686c      	ldr	r4, [r5, #4]
 800ccfe:	89a3      	ldrh	r3, [r4, #12]
 800cd00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd04:	0719      	lsls	r1, r3, #28
 800cd06:	d42c      	bmi.n	800cd62 <__swsetup_r+0x82>
 800cd08:	06dd      	lsls	r5, r3, #27
 800cd0a:	d411      	bmi.n	800cd30 <__swsetup_r+0x50>
 800cd0c:	2309      	movs	r3, #9
 800cd0e:	6033      	str	r3, [r6, #0]
 800cd10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd1a:	e03e      	b.n	800cd9a <__swsetup_r+0xba>
 800cd1c:	4b25      	ldr	r3, [pc, #148]	; (800cdb4 <__swsetup_r+0xd4>)
 800cd1e:	429c      	cmp	r4, r3
 800cd20:	d101      	bne.n	800cd26 <__swsetup_r+0x46>
 800cd22:	68ac      	ldr	r4, [r5, #8]
 800cd24:	e7eb      	b.n	800ccfe <__swsetup_r+0x1e>
 800cd26:	4b24      	ldr	r3, [pc, #144]	; (800cdb8 <__swsetup_r+0xd8>)
 800cd28:	429c      	cmp	r4, r3
 800cd2a:	bf08      	it	eq
 800cd2c:	68ec      	ldreq	r4, [r5, #12]
 800cd2e:	e7e6      	b.n	800ccfe <__swsetup_r+0x1e>
 800cd30:	0758      	lsls	r0, r3, #29
 800cd32:	d512      	bpl.n	800cd5a <__swsetup_r+0x7a>
 800cd34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd36:	b141      	cbz	r1, 800cd4a <__swsetup_r+0x6a>
 800cd38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	d002      	beq.n	800cd46 <__swsetup_r+0x66>
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff fb29 	bl	800c398 <_free_r>
 800cd46:	2300      	movs	r3, #0
 800cd48:	6363      	str	r3, [r4, #52]	; 0x34
 800cd4a:	89a3      	ldrh	r3, [r4, #12]
 800cd4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd50:	81a3      	strh	r3, [r4, #12]
 800cd52:	2300      	movs	r3, #0
 800cd54:	6063      	str	r3, [r4, #4]
 800cd56:	6923      	ldr	r3, [r4, #16]
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	89a3      	ldrh	r3, [r4, #12]
 800cd5c:	f043 0308 	orr.w	r3, r3, #8
 800cd60:	81a3      	strh	r3, [r4, #12]
 800cd62:	6923      	ldr	r3, [r4, #16]
 800cd64:	b94b      	cbnz	r3, 800cd7a <__swsetup_r+0x9a>
 800cd66:	89a3      	ldrh	r3, [r4, #12]
 800cd68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd70:	d003      	beq.n	800cd7a <__swsetup_r+0x9a>
 800cd72:	4621      	mov	r1, r4
 800cd74:	4630      	mov	r0, r6
 800cd76:	f000 fa01 	bl	800d17c <__smakebuf_r>
 800cd7a:	89a0      	ldrh	r0, [r4, #12]
 800cd7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd80:	f010 0301 	ands.w	r3, r0, #1
 800cd84:	d00a      	beq.n	800cd9c <__swsetup_r+0xbc>
 800cd86:	2300      	movs	r3, #0
 800cd88:	60a3      	str	r3, [r4, #8]
 800cd8a:	6963      	ldr	r3, [r4, #20]
 800cd8c:	425b      	negs	r3, r3
 800cd8e:	61a3      	str	r3, [r4, #24]
 800cd90:	6923      	ldr	r3, [r4, #16]
 800cd92:	b943      	cbnz	r3, 800cda6 <__swsetup_r+0xc6>
 800cd94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd98:	d1ba      	bne.n	800cd10 <__swsetup_r+0x30>
 800cd9a:	bd70      	pop	{r4, r5, r6, pc}
 800cd9c:	0781      	lsls	r1, r0, #30
 800cd9e:	bf58      	it	pl
 800cda0:	6963      	ldrpl	r3, [r4, #20]
 800cda2:	60a3      	str	r3, [r4, #8]
 800cda4:	e7f4      	b.n	800cd90 <__swsetup_r+0xb0>
 800cda6:	2000      	movs	r0, #0
 800cda8:	e7f7      	b.n	800cd9a <__swsetup_r+0xba>
 800cdaa:	bf00      	nop
 800cdac:	20000010 	.word	0x20000010
 800cdb0:	0800daac 	.word	0x0800daac
 800cdb4:	0800dacc 	.word	0x0800dacc
 800cdb8:	0800da8c 	.word	0x0800da8c

0800cdbc <__sflush_r>:
 800cdbc:	898a      	ldrh	r2, [r1, #12]
 800cdbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdc2:	4605      	mov	r5, r0
 800cdc4:	0710      	lsls	r0, r2, #28
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	d458      	bmi.n	800ce7c <__sflush_r+0xc0>
 800cdca:	684b      	ldr	r3, [r1, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	dc05      	bgt.n	800cddc <__sflush_r+0x20>
 800cdd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	dc02      	bgt.n	800cddc <__sflush_r+0x20>
 800cdd6:	2000      	movs	r0, #0
 800cdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdde:	2e00      	cmp	r6, #0
 800cde0:	d0f9      	beq.n	800cdd6 <__sflush_r+0x1a>
 800cde2:	2300      	movs	r3, #0
 800cde4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cde8:	682f      	ldr	r7, [r5, #0]
 800cdea:	602b      	str	r3, [r5, #0]
 800cdec:	d032      	beq.n	800ce54 <__sflush_r+0x98>
 800cdee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdf0:	89a3      	ldrh	r3, [r4, #12]
 800cdf2:	075a      	lsls	r2, r3, #29
 800cdf4:	d505      	bpl.n	800ce02 <__sflush_r+0x46>
 800cdf6:	6863      	ldr	r3, [r4, #4]
 800cdf8:	1ac0      	subs	r0, r0, r3
 800cdfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdfc:	b10b      	cbz	r3, 800ce02 <__sflush_r+0x46>
 800cdfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ce00:	1ac0      	subs	r0, r0, r3
 800ce02:	2300      	movs	r3, #0
 800ce04:	4602      	mov	r2, r0
 800ce06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ce08:	6a21      	ldr	r1, [r4, #32]
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b0      	blx	r6
 800ce0e:	1c43      	adds	r3, r0, #1
 800ce10:	89a3      	ldrh	r3, [r4, #12]
 800ce12:	d106      	bne.n	800ce22 <__sflush_r+0x66>
 800ce14:	6829      	ldr	r1, [r5, #0]
 800ce16:	291d      	cmp	r1, #29
 800ce18:	d82c      	bhi.n	800ce74 <__sflush_r+0xb8>
 800ce1a:	4a2a      	ldr	r2, [pc, #168]	; (800cec4 <__sflush_r+0x108>)
 800ce1c:	40ca      	lsrs	r2, r1
 800ce1e:	07d6      	lsls	r6, r2, #31
 800ce20:	d528      	bpl.n	800ce74 <__sflush_r+0xb8>
 800ce22:	2200      	movs	r2, #0
 800ce24:	6062      	str	r2, [r4, #4]
 800ce26:	04d9      	lsls	r1, r3, #19
 800ce28:	6922      	ldr	r2, [r4, #16]
 800ce2a:	6022      	str	r2, [r4, #0]
 800ce2c:	d504      	bpl.n	800ce38 <__sflush_r+0x7c>
 800ce2e:	1c42      	adds	r2, r0, #1
 800ce30:	d101      	bne.n	800ce36 <__sflush_r+0x7a>
 800ce32:	682b      	ldr	r3, [r5, #0]
 800ce34:	b903      	cbnz	r3, 800ce38 <__sflush_r+0x7c>
 800ce36:	6560      	str	r0, [r4, #84]	; 0x54
 800ce38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce3a:	602f      	str	r7, [r5, #0]
 800ce3c:	2900      	cmp	r1, #0
 800ce3e:	d0ca      	beq.n	800cdd6 <__sflush_r+0x1a>
 800ce40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce44:	4299      	cmp	r1, r3
 800ce46:	d002      	beq.n	800ce4e <__sflush_r+0x92>
 800ce48:	4628      	mov	r0, r5
 800ce4a:	f7ff faa5 	bl	800c398 <_free_r>
 800ce4e:	2000      	movs	r0, #0
 800ce50:	6360      	str	r0, [r4, #52]	; 0x34
 800ce52:	e7c1      	b.n	800cdd8 <__sflush_r+0x1c>
 800ce54:	6a21      	ldr	r1, [r4, #32]
 800ce56:	2301      	movs	r3, #1
 800ce58:	4628      	mov	r0, r5
 800ce5a:	47b0      	blx	r6
 800ce5c:	1c41      	adds	r1, r0, #1
 800ce5e:	d1c7      	bne.n	800cdf0 <__sflush_r+0x34>
 800ce60:	682b      	ldr	r3, [r5, #0]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d0c4      	beq.n	800cdf0 <__sflush_r+0x34>
 800ce66:	2b1d      	cmp	r3, #29
 800ce68:	d001      	beq.n	800ce6e <__sflush_r+0xb2>
 800ce6a:	2b16      	cmp	r3, #22
 800ce6c:	d101      	bne.n	800ce72 <__sflush_r+0xb6>
 800ce6e:	602f      	str	r7, [r5, #0]
 800ce70:	e7b1      	b.n	800cdd6 <__sflush_r+0x1a>
 800ce72:	89a3      	ldrh	r3, [r4, #12]
 800ce74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce78:	81a3      	strh	r3, [r4, #12]
 800ce7a:	e7ad      	b.n	800cdd8 <__sflush_r+0x1c>
 800ce7c:	690f      	ldr	r7, [r1, #16]
 800ce7e:	2f00      	cmp	r7, #0
 800ce80:	d0a9      	beq.n	800cdd6 <__sflush_r+0x1a>
 800ce82:	0793      	lsls	r3, r2, #30
 800ce84:	680e      	ldr	r6, [r1, #0]
 800ce86:	bf08      	it	eq
 800ce88:	694b      	ldreq	r3, [r1, #20]
 800ce8a:	600f      	str	r7, [r1, #0]
 800ce8c:	bf18      	it	ne
 800ce8e:	2300      	movne	r3, #0
 800ce90:	eba6 0807 	sub.w	r8, r6, r7
 800ce94:	608b      	str	r3, [r1, #8]
 800ce96:	f1b8 0f00 	cmp.w	r8, #0
 800ce9a:	dd9c      	ble.n	800cdd6 <__sflush_r+0x1a>
 800ce9c:	6a21      	ldr	r1, [r4, #32]
 800ce9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cea0:	4643      	mov	r3, r8
 800cea2:	463a      	mov	r2, r7
 800cea4:	4628      	mov	r0, r5
 800cea6:	47b0      	blx	r6
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	dc06      	bgt.n	800ceba <__sflush_r+0xfe>
 800ceac:	89a3      	ldrh	r3, [r4, #12]
 800ceae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceb8:	e78e      	b.n	800cdd8 <__sflush_r+0x1c>
 800ceba:	4407      	add	r7, r0
 800cebc:	eba8 0800 	sub.w	r8, r8, r0
 800cec0:	e7e9      	b.n	800ce96 <__sflush_r+0xda>
 800cec2:	bf00      	nop
 800cec4:	20400001 	.word	0x20400001

0800cec8 <_fflush_r>:
 800cec8:	b538      	push	{r3, r4, r5, lr}
 800ceca:	690b      	ldr	r3, [r1, #16]
 800cecc:	4605      	mov	r5, r0
 800cece:	460c      	mov	r4, r1
 800ced0:	b913      	cbnz	r3, 800ced8 <_fflush_r+0x10>
 800ced2:	2500      	movs	r5, #0
 800ced4:	4628      	mov	r0, r5
 800ced6:	bd38      	pop	{r3, r4, r5, pc}
 800ced8:	b118      	cbz	r0, 800cee2 <_fflush_r+0x1a>
 800ceda:	6983      	ldr	r3, [r0, #24]
 800cedc:	b90b      	cbnz	r3, 800cee2 <_fflush_r+0x1a>
 800cede:	f000 f887 	bl	800cff0 <__sinit>
 800cee2:	4b14      	ldr	r3, [pc, #80]	; (800cf34 <_fflush_r+0x6c>)
 800cee4:	429c      	cmp	r4, r3
 800cee6:	d11b      	bne.n	800cf20 <_fflush_r+0x58>
 800cee8:	686c      	ldr	r4, [r5, #4]
 800ceea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d0ef      	beq.n	800ced2 <_fflush_r+0xa>
 800cef2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cef4:	07d0      	lsls	r0, r2, #31
 800cef6:	d404      	bmi.n	800cf02 <_fflush_r+0x3a>
 800cef8:	0599      	lsls	r1, r3, #22
 800cefa:	d402      	bmi.n	800cf02 <_fflush_r+0x3a>
 800cefc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cefe:	f000 f915 	bl	800d12c <__retarget_lock_acquire_recursive>
 800cf02:	4628      	mov	r0, r5
 800cf04:	4621      	mov	r1, r4
 800cf06:	f7ff ff59 	bl	800cdbc <__sflush_r>
 800cf0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf0c:	07da      	lsls	r2, r3, #31
 800cf0e:	4605      	mov	r5, r0
 800cf10:	d4e0      	bmi.n	800ced4 <_fflush_r+0xc>
 800cf12:	89a3      	ldrh	r3, [r4, #12]
 800cf14:	059b      	lsls	r3, r3, #22
 800cf16:	d4dd      	bmi.n	800ced4 <_fflush_r+0xc>
 800cf18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf1a:	f000 f908 	bl	800d12e <__retarget_lock_release_recursive>
 800cf1e:	e7d9      	b.n	800ced4 <_fflush_r+0xc>
 800cf20:	4b05      	ldr	r3, [pc, #20]	; (800cf38 <_fflush_r+0x70>)
 800cf22:	429c      	cmp	r4, r3
 800cf24:	d101      	bne.n	800cf2a <_fflush_r+0x62>
 800cf26:	68ac      	ldr	r4, [r5, #8]
 800cf28:	e7df      	b.n	800ceea <_fflush_r+0x22>
 800cf2a:	4b04      	ldr	r3, [pc, #16]	; (800cf3c <_fflush_r+0x74>)
 800cf2c:	429c      	cmp	r4, r3
 800cf2e:	bf08      	it	eq
 800cf30:	68ec      	ldreq	r4, [r5, #12]
 800cf32:	e7da      	b.n	800ceea <_fflush_r+0x22>
 800cf34:	0800daac 	.word	0x0800daac
 800cf38:	0800dacc 	.word	0x0800dacc
 800cf3c:	0800da8c 	.word	0x0800da8c

0800cf40 <std>:
 800cf40:	2300      	movs	r3, #0
 800cf42:	b510      	push	{r4, lr}
 800cf44:	4604      	mov	r4, r0
 800cf46:	e9c0 3300 	strd	r3, r3, [r0]
 800cf4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf4e:	6083      	str	r3, [r0, #8]
 800cf50:	8181      	strh	r1, [r0, #12]
 800cf52:	6643      	str	r3, [r0, #100]	; 0x64
 800cf54:	81c2      	strh	r2, [r0, #14]
 800cf56:	6183      	str	r3, [r0, #24]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	2208      	movs	r2, #8
 800cf5c:	305c      	adds	r0, #92	; 0x5c
 800cf5e:	f7fd fb1d 	bl	800a59c <memset>
 800cf62:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <std+0x38>)
 800cf64:	6263      	str	r3, [r4, #36]	; 0x24
 800cf66:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <std+0x3c>)
 800cf68:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf6a:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <std+0x40>)
 800cf6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf6e:	4b05      	ldr	r3, [pc, #20]	; (800cf84 <std+0x44>)
 800cf70:	6224      	str	r4, [r4, #32]
 800cf72:	6323      	str	r3, [r4, #48]	; 0x30
 800cf74:	bd10      	pop	{r4, pc}
 800cf76:	bf00      	nop
 800cf78:	0800d1fd 	.word	0x0800d1fd
 800cf7c:	0800d21f 	.word	0x0800d21f
 800cf80:	0800d257 	.word	0x0800d257
 800cf84:	0800d27b 	.word	0x0800d27b

0800cf88 <_cleanup_r>:
 800cf88:	4901      	ldr	r1, [pc, #4]	; (800cf90 <_cleanup_r+0x8>)
 800cf8a:	f000 b8af 	b.w	800d0ec <_fwalk_reent>
 800cf8e:	bf00      	nop
 800cf90:	0800cec9 	.word	0x0800cec9

0800cf94 <__sfmoreglue>:
 800cf94:	b570      	push	{r4, r5, r6, lr}
 800cf96:	2268      	movs	r2, #104	; 0x68
 800cf98:	1e4d      	subs	r5, r1, #1
 800cf9a:	4355      	muls	r5, r2
 800cf9c:	460e      	mov	r6, r1
 800cf9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfa2:	f7ff fa65 	bl	800c470 <_malloc_r>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	b140      	cbz	r0, 800cfbc <__sfmoreglue+0x28>
 800cfaa:	2100      	movs	r1, #0
 800cfac:	e9c0 1600 	strd	r1, r6, [r0]
 800cfb0:	300c      	adds	r0, #12
 800cfb2:	60a0      	str	r0, [r4, #8]
 800cfb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfb8:	f7fd faf0 	bl	800a59c <memset>
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}

0800cfc0 <__sfp_lock_acquire>:
 800cfc0:	4801      	ldr	r0, [pc, #4]	; (800cfc8 <__sfp_lock_acquire+0x8>)
 800cfc2:	f000 b8b3 	b.w	800d12c <__retarget_lock_acquire_recursive>
 800cfc6:	bf00      	nop
 800cfc8:	20000e25 	.word	0x20000e25

0800cfcc <__sfp_lock_release>:
 800cfcc:	4801      	ldr	r0, [pc, #4]	; (800cfd4 <__sfp_lock_release+0x8>)
 800cfce:	f000 b8ae 	b.w	800d12e <__retarget_lock_release_recursive>
 800cfd2:	bf00      	nop
 800cfd4:	20000e25 	.word	0x20000e25

0800cfd8 <__sinit_lock_acquire>:
 800cfd8:	4801      	ldr	r0, [pc, #4]	; (800cfe0 <__sinit_lock_acquire+0x8>)
 800cfda:	f000 b8a7 	b.w	800d12c <__retarget_lock_acquire_recursive>
 800cfde:	bf00      	nop
 800cfe0:	20000e26 	.word	0x20000e26

0800cfe4 <__sinit_lock_release>:
 800cfe4:	4801      	ldr	r0, [pc, #4]	; (800cfec <__sinit_lock_release+0x8>)
 800cfe6:	f000 b8a2 	b.w	800d12e <__retarget_lock_release_recursive>
 800cfea:	bf00      	nop
 800cfec:	20000e26 	.word	0x20000e26

0800cff0 <__sinit>:
 800cff0:	b510      	push	{r4, lr}
 800cff2:	4604      	mov	r4, r0
 800cff4:	f7ff fff0 	bl	800cfd8 <__sinit_lock_acquire>
 800cff8:	69a3      	ldr	r3, [r4, #24]
 800cffa:	b11b      	cbz	r3, 800d004 <__sinit+0x14>
 800cffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d000:	f7ff bff0 	b.w	800cfe4 <__sinit_lock_release>
 800d004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d008:	6523      	str	r3, [r4, #80]	; 0x50
 800d00a:	4b13      	ldr	r3, [pc, #76]	; (800d058 <__sinit+0x68>)
 800d00c:	4a13      	ldr	r2, [pc, #76]	; (800d05c <__sinit+0x6c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	62a2      	str	r2, [r4, #40]	; 0x28
 800d012:	42a3      	cmp	r3, r4
 800d014:	bf04      	itt	eq
 800d016:	2301      	moveq	r3, #1
 800d018:	61a3      	streq	r3, [r4, #24]
 800d01a:	4620      	mov	r0, r4
 800d01c:	f000 f820 	bl	800d060 <__sfp>
 800d020:	6060      	str	r0, [r4, #4]
 800d022:	4620      	mov	r0, r4
 800d024:	f000 f81c 	bl	800d060 <__sfp>
 800d028:	60a0      	str	r0, [r4, #8]
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 f818 	bl	800d060 <__sfp>
 800d030:	2200      	movs	r2, #0
 800d032:	60e0      	str	r0, [r4, #12]
 800d034:	2104      	movs	r1, #4
 800d036:	6860      	ldr	r0, [r4, #4]
 800d038:	f7ff ff82 	bl	800cf40 <std>
 800d03c:	68a0      	ldr	r0, [r4, #8]
 800d03e:	2201      	movs	r2, #1
 800d040:	2109      	movs	r1, #9
 800d042:	f7ff ff7d 	bl	800cf40 <std>
 800d046:	68e0      	ldr	r0, [r4, #12]
 800d048:	2202      	movs	r2, #2
 800d04a:	2112      	movs	r1, #18
 800d04c:	f7ff ff78 	bl	800cf40 <std>
 800d050:	2301      	movs	r3, #1
 800d052:	61a3      	str	r3, [r4, #24]
 800d054:	e7d2      	b.n	800cffc <__sinit+0xc>
 800d056:	bf00      	nop
 800d058:	0800d710 	.word	0x0800d710
 800d05c:	0800cf89 	.word	0x0800cf89

0800d060 <__sfp>:
 800d060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d062:	4607      	mov	r7, r0
 800d064:	f7ff ffac 	bl	800cfc0 <__sfp_lock_acquire>
 800d068:	4b1e      	ldr	r3, [pc, #120]	; (800d0e4 <__sfp+0x84>)
 800d06a:	681e      	ldr	r6, [r3, #0]
 800d06c:	69b3      	ldr	r3, [r6, #24]
 800d06e:	b913      	cbnz	r3, 800d076 <__sfp+0x16>
 800d070:	4630      	mov	r0, r6
 800d072:	f7ff ffbd 	bl	800cff0 <__sinit>
 800d076:	3648      	adds	r6, #72	; 0x48
 800d078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	d503      	bpl.n	800d088 <__sfp+0x28>
 800d080:	6833      	ldr	r3, [r6, #0]
 800d082:	b30b      	cbz	r3, 800d0c8 <__sfp+0x68>
 800d084:	6836      	ldr	r6, [r6, #0]
 800d086:	e7f7      	b.n	800d078 <__sfp+0x18>
 800d088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d08c:	b9d5      	cbnz	r5, 800d0c4 <__sfp+0x64>
 800d08e:	4b16      	ldr	r3, [pc, #88]	; (800d0e8 <__sfp+0x88>)
 800d090:	60e3      	str	r3, [r4, #12]
 800d092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d096:	6665      	str	r5, [r4, #100]	; 0x64
 800d098:	f000 f847 	bl	800d12a <__retarget_lock_init_recursive>
 800d09c:	f7ff ff96 	bl	800cfcc <__sfp_lock_release>
 800d0a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0a8:	6025      	str	r5, [r4, #0]
 800d0aa:	61a5      	str	r5, [r4, #24]
 800d0ac:	2208      	movs	r2, #8
 800d0ae:	4629      	mov	r1, r5
 800d0b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0b4:	f7fd fa72 	bl	800a59c <memset>
 800d0b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0c0:	4620      	mov	r0, r4
 800d0c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0c4:	3468      	adds	r4, #104	; 0x68
 800d0c6:	e7d9      	b.n	800d07c <__sfp+0x1c>
 800d0c8:	2104      	movs	r1, #4
 800d0ca:	4638      	mov	r0, r7
 800d0cc:	f7ff ff62 	bl	800cf94 <__sfmoreglue>
 800d0d0:	4604      	mov	r4, r0
 800d0d2:	6030      	str	r0, [r6, #0]
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d1d5      	bne.n	800d084 <__sfp+0x24>
 800d0d8:	f7ff ff78 	bl	800cfcc <__sfp_lock_release>
 800d0dc:	230c      	movs	r3, #12
 800d0de:	603b      	str	r3, [r7, #0]
 800d0e0:	e7ee      	b.n	800d0c0 <__sfp+0x60>
 800d0e2:	bf00      	nop
 800d0e4:	0800d710 	.word	0x0800d710
 800d0e8:	ffff0001 	.word	0xffff0001

0800d0ec <_fwalk_reent>:
 800d0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	4688      	mov	r8, r1
 800d0f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d0f8:	2700      	movs	r7, #0
 800d0fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0fe:	f1b9 0901 	subs.w	r9, r9, #1
 800d102:	d505      	bpl.n	800d110 <_fwalk_reent+0x24>
 800d104:	6824      	ldr	r4, [r4, #0]
 800d106:	2c00      	cmp	r4, #0
 800d108:	d1f7      	bne.n	800d0fa <_fwalk_reent+0xe>
 800d10a:	4638      	mov	r0, r7
 800d10c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d110:	89ab      	ldrh	r3, [r5, #12]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d907      	bls.n	800d126 <_fwalk_reent+0x3a>
 800d116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d11a:	3301      	adds	r3, #1
 800d11c:	d003      	beq.n	800d126 <_fwalk_reent+0x3a>
 800d11e:	4629      	mov	r1, r5
 800d120:	4630      	mov	r0, r6
 800d122:	47c0      	blx	r8
 800d124:	4307      	orrs	r7, r0
 800d126:	3568      	adds	r5, #104	; 0x68
 800d128:	e7e9      	b.n	800d0fe <_fwalk_reent+0x12>

0800d12a <__retarget_lock_init_recursive>:
 800d12a:	4770      	bx	lr

0800d12c <__retarget_lock_acquire_recursive>:
 800d12c:	4770      	bx	lr

0800d12e <__retarget_lock_release_recursive>:
 800d12e:	4770      	bx	lr

0800d130 <__swhatbuf_r>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	460e      	mov	r6, r1
 800d134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d138:	2900      	cmp	r1, #0
 800d13a:	b096      	sub	sp, #88	; 0x58
 800d13c:	4614      	mov	r4, r2
 800d13e:	461d      	mov	r5, r3
 800d140:	da08      	bge.n	800d154 <__swhatbuf_r+0x24>
 800d142:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	602a      	str	r2, [r5, #0]
 800d14a:	061a      	lsls	r2, r3, #24
 800d14c:	d410      	bmi.n	800d170 <__swhatbuf_r+0x40>
 800d14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d152:	e00e      	b.n	800d172 <__swhatbuf_r+0x42>
 800d154:	466a      	mov	r2, sp
 800d156:	f000 f8b7 	bl	800d2c8 <_fstat_r>
 800d15a:	2800      	cmp	r0, #0
 800d15c:	dbf1      	blt.n	800d142 <__swhatbuf_r+0x12>
 800d15e:	9a01      	ldr	r2, [sp, #4]
 800d160:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d164:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d168:	425a      	negs	r2, r3
 800d16a:	415a      	adcs	r2, r3
 800d16c:	602a      	str	r2, [r5, #0]
 800d16e:	e7ee      	b.n	800d14e <__swhatbuf_r+0x1e>
 800d170:	2340      	movs	r3, #64	; 0x40
 800d172:	2000      	movs	r0, #0
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	b016      	add	sp, #88	; 0x58
 800d178:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d17c <__smakebuf_r>:
 800d17c:	898b      	ldrh	r3, [r1, #12]
 800d17e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d180:	079d      	lsls	r5, r3, #30
 800d182:	4606      	mov	r6, r0
 800d184:	460c      	mov	r4, r1
 800d186:	d507      	bpl.n	800d198 <__smakebuf_r+0x1c>
 800d188:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d18c:	6023      	str	r3, [r4, #0]
 800d18e:	6123      	str	r3, [r4, #16]
 800d190:	2301      	movs	r3, #1
 800d192:	6163      	str	r3, [r4, #20]
 800d194:	b002      	add	sp, #8
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	ab01      	add	r3, sp, #4
 800d19a:	466a      	mov	r2, sp
 800d19c:	f7ff ffc8 	bl	800d130 <__swhatbuf_r>
 800d1a0:	9900      	ldr	r1, [sp, #0]
 800d1a2:	4605      	mov	r5, r0
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	f7ff f963 	bl	800c470 <_malloc_r>
 800d1aa:	b948      	cbnz	r0, 800d1c0 <__smakebuf_r+0x44>
 800d1ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1b0:	059a      	lsls	r2, r3, #22
 800d1b2:	d4ef      	bmi.n	800d194 <__smakebuf_r+0x18>
 800d1b4:	f023 0303 	bic.w	r3, r3, #3
 800d1b8:	f043 0302 	orr.w	r3, r3, #2
 800d1bc:	81a3      	strh	r3, [r4, #12]
 800d1be:	e7e3      	b.n	800d188 <__smakebuf_r+0xc>
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <__smakebuf_r+0x7c>)
 800d1c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	6020      	str	r0, [r4, #0]
 800d1c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1cc:	81a3      	strh	r3, [r4, #12]
 800d1ce:	9b00      	ldr	r3, [sp, #0]
 800d1d0:	6163      	str	r3, [r4, #20]
 800d1d2:	9b01      	ldr	r3, [sp, #4]
 800d1d4:	6120      	str	r0, [r4, #16]
 800d1d6:	b15b      	cbz	r3, 800d1f0 <__smakebuf_r+0x74>
 800d1d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f000 f885 	bl	800d2ec <_isatty_r>
 800d1e2:	b128      	cbz	r0, 800d1f0 <__smakebuf_r+0x74>
 800d1e4:	89a3      	ldrh	r3, [r4, #12]
 800d1e6:	f023 0303 	bic.w	r3, r3, #3
 800d1ea:	f043 0301 	orr.w	r3, r3, #1
 800d1ee:	81a3      	strh	r3, [r4, #12]
 800d1f0:	89a0      	ldrh	r0, [r4, #12]
 800d1f2:	4305      	orrs	r5, r0
 800d1f4:	81a5      	strh	r5, [r4, #12]
 800d1f6:	e7cd      	b.n	800d194 <__smakebuf_r+0x18>
 800d1f8:	0800cf89 	.word	0x0800cf89

0800d1fc <__sread>:
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	460c      	mov	r4, r1
 800d200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d204:	f000 f894 	bl	800d330 <_read_r>
 800d208:	2800      	cmp	r0, #0
 800d20a:	bfab      	itete	ge
 800d20c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d20e:	89a3      	ldrhlt	r3, [r4, #12]
 800d210:	181b      	addge	r3, r3, r0
 800d212:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d216:	bfac      	ite	ge
 800d218:	6563      	strge	r3, [r4, #84]	; 0x54
 800d21a:	81a3      	strhlt	r3, [r4, #12]
 800d21c:	bd10      	pop	{r4, pc}

0800d21e <__swrite>:
 800d21e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d222:	461f      	mov	r7, r3
 800d224:	898b      	ldrh	r3, [r1, #12]
 800d226:	05db      	lsls	r3, r3, #23
 800d228:	4605      	mov	r5, r0
 800d22a:	460c      	mov	r4, r1
 800d22c:	4616      	mov	r6, r2
 800d22e:	d505      	bpl.n	800d23c <__swrite+0x1e>
 800d230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d234:	2302      	movs	r3, #2
 800d236:	2200      	movs	r2, #0
 800d238:	f000 f868 	bl	800d30c <_lseek_r>
 800d23c:	89a3      	ldrh	r3, [r4, #12]
 800d23e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d242:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d246:	81a3      	strh	r3, [r4, #12]
 800d248:	4632      	mov	r2, r6
 800d24a:	463b      	mov	r3, r7
 800d24c:	4628      	mov	r0, r5
 800d24e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d252:	f000 b817 	b.w	800d284 <_write_r>

0800d256 <__sseek>:
 800d256:	b510      	push	{r4, lr}
 800d258:	460c      	mov	r4, r1
 800d25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d25e:	f000 f855 	bl	800d30c <_lseek_r>
 800d262:	1c43      	adds	r3, r0, #1
 800d264:	89a3      	ldrh	r3, [r4, #12]
 800d266:	bf15      	itete	ne
 800d268:	6560      	strne	r0, [r4, #84]	; 0x54
 800d26a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d26e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strheq	r3, [r4, #12]
 800d274:	bf18      	it	ne
 800d276:	81a3      	strhne	r3, [r4, #12]
 800d278:	bd10      	pop	{r4, pc}

0800d27a <__sclose>:
 800d27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27e:	f000 b813 	b.w	800d2a8 <_close_r>
	...

0800d284 <_write_r>:
 800d284:	b538      	push	{r3, r4, r5, lr}
 800d286:	4d07      	ldr	r5, [pc, #28]	; (800d2a4 <_write_r+0x20>)
 800d288:	4604      	mov	r4, r0
 800d28a:	4608      	mov	r0, r1
 800d28c:	4611      	mov	r1, r2
 800d28e:	2200      	movs	r2, #0
 800d290:	602a      	str	r2, [r5, #0]
 800d292:	461a      	mov	r2, r3
 800d294:	f7f7 fbf1 	bl	8004a7a <_write>
 800d298:	1c43      	adds	r3, r0, #1
 800d29a:	d102      	bne.n	800d2a2 <_write_r+0x1e>
 800d29c:	682b      	ldr	r3, [r5, #0]
 800d29e:	b103      	cbz	r3, 800d2a2 <_write_r+0x1e>
 800d2a0:	6023      	str	r3, [r4, #0]
 800d2a2:	bd38      	pop	{r3, r4, r5, pc}
 800d2a4:	20000e20 	.word	0x20000e20

0800d2a8 <_close_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4d06      	ldr	r5, [pc, #24]	; (800d2c4 <_close_r+0x1c>)
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	4608      	mov	r0, r1
 800d2b2:	602b      	str	r3, [r5, #0]
 800d2b4:	f7f7 fbfd 	bl	8004ab2 <_close>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_close_r+0x1a>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_close_r+0x1a>
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20000e20 	.word	0x20000e20

0800d2c8 <_fstat_r>:
 800d2c8:	b538      	push	{r3, r4, r5, lr}
 800d2ca:	4d07      	ldr	r5, [pc, #28]	; (800d2e8 <_fstat_r+0x20>)
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	4604      	mov	r4, r0
 800d2d0:	4608      	mov	r0, r1
 800d2d2:	4611      	mov	r1, r2
 800d2d4:	602b      	str	r3, [r5, #0]
 800d2d6:	f7f7 fbf8 	bl	8004aca <_fstat>
 800d2da:	1c43      	adds	r3, r0, #1
 800d2dc:	d102      	bne.n	800d2e4 <_fstat_r+0x1c>
 800d2de:	682b      	ldr	r3, [r5, #0]
 800d2e0:	b103      	cbz	r3, 800d2e4 <_fstat_r+0x1c>
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	bd38      	pop	{r3, r4, r5, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20000e20 	.word	0x20000e20

0800d2ec <_isatty_r>:
 800d2ec:	b538      	push	{r3, r4, r5, lr}
 800d2ee:	4d06      	ldr	r5, [pc, #24]	; (800d308 <_isatty_r+0x1c>)
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	4604      	mov	r4, r0
 800d2f4:	4608      	mov	r0, r1
 800d2f6:	602b      	str	r3, [r5, #0]
 800d2f8:	f7f7 fbf7 	bl	8004aea <_isatty>
 800d2fc:	1c43      	adds	r3, r0, #1
 800d2fe:	d102      	bne.n	800d306 <_isatty_r+0x1a>
 800d300:	682b      	ldr	r3, [r5, #0]
 800d302:	b103      	cbz	r3, 800d306 <_isatty_r+0x1a>
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	bd38      	pop	{r3, r4, r5, pc}
 800d308:	20000e20 	.word	0x20000e20

0800d30c <_lseek_r>:
 800d30c:	b538      	push	{r3, r4, r5, lr}
 800d30e:	4d07      	ldr	r5, [pc, #28]	; (800d32c <_lseek_r+0x20>)
 800d310:	4604      	mov	r4, r0
 800d312:	4608      	mov	r0, r1
 800d314:	4611      	mov	r1, r2
 800d316:	2200      	movs	r2, #0
 800d318:	602a      	str	r2, [r5, #0]
 800d31a:	461a      	mov	r2, r3
 800d31c:	f7f7 fbf0 	bl	8004b00 <_lseek>
 800d320:	1c43      	adds	r3, r0, #1
 800d322:	d102      	bne.n	800d32a <_lseek_r+0x1e>
 800d324:	682b      	ldr	r3, [r5, #0]
 800d326:	b103      	cbz	r3, 800d32a <_lseek_r+0x1e>
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	bd38      	pop	{r3, r4, r5, pc}
 800d32c:	20000e20 	.word	0x20000e20

0800d330 <_read_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d07      	ldr	r5, [pc, #28]	; (800d350 <_read_r+0x20>)
 800d334:	4604      	mov	r4, r0
 800d336:	4608      	mov	r0, r1
 800d338:	4611      	mov	r1, r2
 800d33a:	2200      	movs	r2, #0
 800d33c:	602a      	str	r2, [r5, #0]
 800d33e:	461a      	mov	r2, r3
 800d340:	f7f7 fb7e 	bl	8004a40 <_read>
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	d102      	bne.n	800d34e <_read_r+0x1e>
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	b103      	cbz	r3, 800d34e <_read_r+0x1e>
 800d34c:	6023      	str	r3, [r4, #0]
 800d34e:	bd38      	pop	{r3, r4, r5, pc}
 800d350:	20000e20 	.word	0x20000e20

0800d354 <_init>:
 800d354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d356:	bf00      	nop
 800d358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d35a:	bc08      	pop	{r3}
 800d35c:	469e      	mov	lr, r3
 800d35e:	4770      	bx	lr

0800d360 <_fini>:
 800d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d362:	bf00      	nop
 800d364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d366:	bc08      	pop	{r3}
 800d368:	469e      	mov	lr, r3
 800d36a:	4770      	bx	lr
